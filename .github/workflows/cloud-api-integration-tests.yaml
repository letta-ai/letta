name: Run cloud-api integration tests

permissions:
  actions: read
  contents: read

on:
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: changed-files
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .github/workflows/cloud-api-integration-tests.yaml
            apps/cloud-api/**
            apps/web/**
            apps/core/**
            libs/**
            package.json
            package-lock.json
            tsconfig.json

  cloud-api-integration-tests:
    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
    needs: [changed-files]
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-web:
        image: postgres
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-core:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true
      - name: Install just
        uses: extractions/setup-just@v3
        with:
          just-version: '1.42.2'
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Check if line is not empty
            if [[ -n "$line" ]]; then
              # Extract the value after the equals sign
              value=$(echo "$line" | cut -d= -f2-)
              # Mask the value so it doesn't appear in logs
              echo "::add-mask::$value"
              # Add to GitHub environment
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(uvx --with google-cloud-secret-manager python3 ../../packer/base/files/letta_secrets_helper.py --env dev --service ci)

      - name: Install python dependencies
        shell: bash
        working-directory: apps/core
        run: uv sync --no-install-project ${{ inputs.install-args || '--extra postgres --extra external-tools --extra dev --extra cloud-tool-sandbox' }}
      - name: Migrate core database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          uv run alembic upgrade head

      - name: Turn on Letta agents on main branch
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        run: uv run letta server &
      - name: Install Dependencies
        run: npm ci
      - name: Migrate web database
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
        run: npm run web:database:migrate
      - name: Install deps
        working-directory: apps/cloud-api
        run: just setup-cloud-api
      - name: Install deps
        working-directory: apps/cloud-api
        run: just setup-cloud-api
      - name: Turn on cloud-api
        working-directory: apps/cloud-api
        run: just cloud-api > cloud-api.log 2>&1 &
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_OPTIONS: --max_old_space_size=4096
          CLOUD_API_ENDPOINT: http://localhost:3006
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_DEV_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISH_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_DEV_PUBLISH_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          LETTA_AGENTS_ENDPOINT: http://localhost:8283
          NEXT_PUBLIC_CURRENT_HOST: http://localhost:3000
          IS_CYPRESS_RUN: yes
          IS_API_STABILITY_TEST: yes
          USE_FAKE_USER: yes
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
      - name: Run tests with pytest
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          LETTA_SERVER_PASS: test_server_token
          LETTA_SERVER_URL: http://localhost:8283
          LETTA_API_URL: http://localhost:3006
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          PYTHONPATH: ${{ github.workspace }}:${{ env.PYTHONPATH }}
        run: |
          cd apps/core
          uv run --frozen pytest -s tests/test_client.py
          uv run --frozen pytest -s tests/sdk/
      - name: Save cloud-api log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: apps/cloud-api/cloud-api.log
          name: cloud-api-log
