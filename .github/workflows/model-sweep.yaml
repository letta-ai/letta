name: Model Sweep
on:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches:
      - kian/fix_model_swep
  workflow_dispatch:
    inputs:
      branch-name:
        required: true
        type: string

jobs:
  model-sweep:
    runs-on: [self-hosted, medium]
    services:
      postgres:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -n "$line" ]]; then
              value=$(echo "$line" | cut -d= -f2-)
              echo "::add-mask::$value"
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(letta_secrets_helper --env dev --service ci)

      - name: Install dependencies
        shell: bash
        working-directory: apps/core
        run: uv sync --no-install-project ${{ inputs.install-args || '--extra postgres --extra external-tools --extra dev --extra cloud-tool-sandbox' }}
      - name: Migrate database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          uv run alembic upgrade head

      - name: Run integration tests
        working-directory: apps/core
        # if any of the 1000+ test cases fail, pytest reports exit code 1 and won't procces/upload the results
        continue-on-error: true
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          LETTA_SERVER_PASS: test_server_token
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ env.ANTHROPIC_API_KEY }}
          AZURE_API_KEY: ${{ env.AZURE_API_KEY }}
          AZURE_BASE_URL: ${{ secrets.AZURE_BASE_URL }}
          GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT}}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION}}
          DEEPSEEK_API_KEY: ${{ env.DEEPSEEK_API_KEY}}
        run: |
          uv run --frozen pytest \
            -s -vv \
            ../../.github/scripts/model-sweep/model_sweep.py \
            --json-report --json-report-file=../../.github/scripts/model-sweep/model_sweep_report.json --json-report-indent=4

      - name: Upload model sweep report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: model-sweep-report
          path: .github/scripts/model-sweep/model_sweep_report.json

  post-process:
    runs-on: [self-hosted, medium]
    needs: model-sweep
    if: always() && needs.model-sweep.result != 'cancelled'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download model sweep report
        uses: actions/download-artifact@v4
        with:
          name: model-sweep-report
          path: .github/scripts/model-sweep/

      - name: Parse model sweep report to global config
        working-directory: apps/core
        run: |
          uv run python ../../.github/scripts/model-sweep/parse_model_sweep_report.py \
            model_sweep_report.json \
            global_models_config_detailed.json \
            config.json \
            global_models_config_compact.json

      - name: Convert global config to markdown
        working-directory: apps/core
        run: |
          uv run python ../../.github/scripts/model-sweep/generate_model_sweep_markdown.py \
            global_models_config_detailed.json \
            supported-models.mdx
          cp ../../.github/scripts/model-sweep/supported-models.mdx fern/pages/selfhosting/supported-models.mdx
          echo "Model sweep report saved to apps/core/fern/pages/selfhosting/supported-models.mdx"


      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: model-sweep-processed
          path: |
            .github/scripts/model-sweep/global_models_config_detailed.json
            .github/scripts/model-sweep/global_models_config_compact.json
            .github/scripts/model-sweep/supported-models.mdx

  analyze-and-publish:
    runs-on: [self-hosted, medium]
    needs: post-process
    if: always() && needs.post-process.result != 'cancelled'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download processed artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-sweep-processed
          path: .github/scripts/model-sweep/

      - name: Get previous compact config from main branch
        working-directory: .github/scripts/model-sweep
        run: |
          # Try to fetch the previous version from main branch
          if git show main:.github/scripts/model-sweep/global_models_config_compact.json > global_models_config_compact_previous.json 2>/dev/null; then
            echo "‚úÖ Found previous config from main branch"
          else
            echo "‚ö†Ô∏è No previous config found, creating empty baseline"
            echo '{"models": {}}' > global_models_config_compact_previous.json
          fi

      - name: Check for meaningful changes
        working-directory: apps/core
        id: analyze
        run: |
          meaningful_changes=$(uv run python ../../.github/scripts/model-sweep/analyze_model_changes.py \
            global_models_config_compact.json global_models_config_compact_previous.json)
          echo "MEANINGFUL_CHANGES=$meaningful_changes" >> $GITHUB_OUTPUT

      - id: date
        if: steps.analyze.outputs.meaningful_changes == 'true'
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Create branch and PR for meaningful changes
        if: steps.analyze.outputs.meaningful_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME=model-sweep/${{ inputs.branch-name || format('{0}', steps.date.outputs.date) }}

          # Configure git
          gh auth setup-git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and switch to new branch
          git checkout -b $BRANCH_NAME

          # Stage all changes
          git add .github/scripts/model-sweep/global_models_config_compact.json
          git add .github/scripts/model-sweep/global_models_config_detailed.json
          git add apps/core/fern/pages/selfhosting/supported-models.mdx

          # Create commit
          git commit -m "chore: update model sweep results

          Meaningful changes detected in model configurations.

          ü§ñ Generated with model sweep automation"

          # Push branch
          git push origin $BRANCH_NAME

          # Create PR
          gh pr create \
            --base main \
            --head $BRANCH_NAME \
            --title "chore: update model sweep results (${{ steps.date.outputs.date }})" \
            --body "Automated PR to update model sweep results with meaningful changes detected.

          This PR includes updates to:
          - Global models configuration files (compact and detailed)
          - Documentation (supported-models.mdx)

          ü§ñ Generated with model sweep automation"

          echo '‚úÖ Created PR for branch: $BRANCH_NAME'

      - name: Skip PR creation for no meaningful changes
        if: steps.analyze.outputs.meaningful_changes != 'true'
        run: |
          echo '‚ÑπÔ∏è No meaningful changes detected. Skipping PR creation.'
          echo 'Only timestamp or non-functional changes were found.'

      - name: Upload final artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: model-sweep-final
          path: |
            .github/scripts/model-sweep/global_models_config_compact.json
            .github/scripts/model-sweep/global_models_config_detailed.json
            .github/scripts/model-sweep/supported-models.mdx
