name: Preview SDKs

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths:
      - 'apps/fern/openapi.json'
      - 'apps/fern/openapi-overrides.yml'

jobs:
  preview-typescript-sdk:
    name: Preview TypeScript SDK
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ inputs.poetry-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}

      - name: Migrate database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head

      - name: Run letta server
        working-directory: apps/core
        env:
          LETTA_PG_DB: postgres
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_HOST: localhost
          LETTA_PG_PORT: 5432
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Run server in background
          poetry run letta server &
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -s http://localhost:8283/health; do sleep 1; done'

      - name: Install Fern
        run: npm install -g fern-api

      - name: Generate TypeScript SDK Preview
        working-directory: apps
        env:
          LETTA_ENV: localhost
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        run: |
          fern generate --group ts-sdk --preview
          cd fern/.preview/fern-typescript-node-sdk
          yarn install
          yarn build
          yarn test tests/custom.test.ts

  preview-python-sdk:
    name: Preview Python SDK
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ inputs.poetry-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}

      - name: Migrate database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5433
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -p 5433 -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head

      - name: Run letta server
        working-directory: apps/core
        env:
          LETTA_PG_DB: postgres
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_HOST: localhost
          LETTA_PG_PORT: 5433
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Run server in background
          poetry run letta server &
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -s http://localhost:8283/health; do sleep 1; done'

      - name: Install Fern
        run: npm install -g fern-api

      - name: Generate Python SDK Preview
        working-directory: apps
        env:
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        run: |
          fern generate --group python-sdk --preview
          cd fern/.preview/fern-python-sdk
          poetry install
          poetry run mypy .
          poetry run pytest -rP tests/custom/test_client.py --env localhost
