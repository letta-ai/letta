name: OpenAI GPT-4 Capabilities Test

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    services:
      postgres:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: "Setup Python, Poetry and Dependencies"
      uses: packetcoders/action-setup-cache-python-poetry@main
      with:
        python-version: "3.12"
        poetry-version: "1.8.2"
        install-args: "-E dev -E external-tools"
    - name: Migrate database
      env:
        LETTA_PG_PORT: 5432
        LETTA_PG_USER: postgres
        LETTA_PG_PASSWORD: postgres
        LETTA_PG_DB: postgres
        LETTA_PG_HOST: localhost
      run: |
        psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
        poetry run alembic upgrade head

    - name: Test first message contains expected function call and inner monologue
      id: test_first_message
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_returns_valid_first_message

    - name: Test model sends message with keyword
      id: test_keyword_message
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_returns_keyword

    - name: Test model uses external tool correctly
      id: test_external_tool
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_uses_external_tool

    - name: Test model recalls chat memory
      id: test_chat_memory
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_recall_chat_memory

    - name: Test model uses 'archival_memory_search' to find secret
      id: test_archival_memory_search
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_archival_memory_retrieval

    - name: Test model uses 'archival_memory_insert' to insert archival memories
      id: test_archival_memory_insert
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_archival_memory_insert

    - name: Test model can edit core memories
      id: test_core_memory
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_openai_gpt_4_edit_core_memory

    - name: Test embedding endpoint
      id: test_embedding_endpoint
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        poetry run pytest -s -vv tests/test_endpoints.py::test_embedding_endpoint_openai
