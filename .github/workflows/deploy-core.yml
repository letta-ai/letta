name: üêçüöÄ Deploy Core

on:
  workflow_dispatch:
    inputs:
      git_hash:
        description: 'Git hash to deploy'
        required: false
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        type: string
        default: 'main'
      deploy_message:
        description: 'Deployment message'
        required: false
        type: string
        default: ''

env:
  PROJECT_ID: memgpt-428419
  REGION: us-central1
  REGISTRY_NAME: letta

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_hash || github.event.inputs.branch || github.sha }}
          submodules: recursive

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          # Add Google Cloud SDK repository and install GKE authentication plugin
          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Install just
        run: curl -LSs https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin/

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: just configure-kubectl

      - name: Build and Deploy
        env:
          TAG: ${{ github.event.inputs.git_hash || github.sha }}
          DEPLOY_MESSAGE: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}
          MEMGPT_SERVER_PASS: ${{ secrets.MEMGPT_SERVER_PASS }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          COMPOSIO_API_KEY: ${{ secrets.COMPOSIO_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
          LETTA_PG_PASSWORD: ${{ secrets.LETTA_PG_PASSWORD }}
          LETTA_PG_USER: ${{ secrets.LETTA_PG_USER }}
          LETTA_PG_DB: ${{ secrets.LETTA_PG_DB }}
          LETTA_PG_HOST: ${{ secrets.LETTA_PG_HOST }}
          LETTA_PG_PORT: ${{ vars.LETTA_PG_PORT }}
          LETTA_DISABLE_SQLALCHEMY_POOLING: ${{ secrets.LETTA_DISABLE_SQLALCHEMY_POOLING }}
          E2B_API_KEY: ${{ secrets.E2B_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          E2B_SANDBOX_TEMPLATE_ID: ${{ secrets.E2B_SANDBOX_TEMPLATE_ID }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          LETTA_LOAD_DEFAULT_EXTERNAL_TOOLS: 'True'
          LETTA_OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.LETTA_OTEL_EXPORTER_OTLP_ENDPOINT }}
          CLICKHOUSE_ENDPOINT: ${{ secrets.CLICKHOUSE_ENDPOINT }}
          CLICKHOUSE_DATABASE: ${{ secrets.CLICKHOUSE_DATABASE }}
          CLICKHOUSE_USERNAME: ${{ secrets.CLICKHOUSE_USERNAME }}
          CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD }}
          LETTA_USE_EXPERIMENTAL: ${{ secrets.LETTA_USE_EXPERIMENTAL }}
          LETTA_UVICORN_WORKERS: ${{ secrets.LETTA_UVICORN_WORKERS }}
          LETTA_PG_POOL_SIZE: ${{ secrets.LETTA_PG_POOL_SIZE }}
          LETTA_PG_MAX_OVERFLOW: ${{ secrets.LETTA_PG_MAX_OVERFLOW }}
          MCP_READ_FROM_CONFIG: false
        run: |
          just build-core deploy-core "${DEPLOY_MESSAGE}"
