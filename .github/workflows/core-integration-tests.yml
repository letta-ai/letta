name: 🐍🧪 [Core] Integration Tests

env:
  LETTA_ENABLE_BATCH_JOB_POLLING: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: changed-files
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            apps/core/**
            .github/workflows/core-integration-tests.yml
  main:
    needs: [ changed-files ]
    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        integration_test_suite:
          - "integration_test_summarizer.py"
          - "integration_test_tool_execution_sandbox.py"
          - "integration_test_async_tool_sandbox.py"
          - "integration_test_sleeptime_agent.py"
          - "integration_test_agent_tool_graph.py"
          - "integration_test_composio.py"
          - "integration_test_chat_completions.py"
          - "integration_test_multi_agent.py"
          - "integration_test_batch_api_cron_jobs.py"
          - "integration_test_batch_sdk.py"
          - "integration_test_voice_agent.py"
    services:
      qdrant:
        image: qdrant/qdrant
        ports:
          - 6333:6333
      postgres:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1.8.3
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Fern
        if: ${{ contains(needs.changed-files.outputs.all_changed_files, 'apps/core/letta/') }}
        run: npm install -g fern-api

      - name: Generate SDK with Fern
        uses: nick-fields/retry@v3
        if: ${{ contains(needs.changed-files.outputs.all_changed_files, 'apps/core/letta/') }}
        env:
          FERN_TOKEN: ${{ secrets.FERN_TOKEN }}
        with:
          max_attempts: 3
          timeout_minutes: 5
          command: |
            set -o xtrace
            cd apps
            fern generate --group python-sdk --preview
            cd fern/.preview/fern-python-sdk
            poetry install
            poetry run mypy .

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: apps/core
        run: |
          poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          poetry run pip install letta
      - name: Migrate database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head

      - name: Use SDK with on branch changes
        if: ${{ contains(needs.changed-files.outputs.all_changed_files, 'apps/core/letta/') }}
        working-directory: apps/core
        run: |
          poetry run pip install -e ../fern/.preview/fern-python-sdk/.
          poetry run pip install letta

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Install required package
          poetry run pip install google-cloud-secret-manager

          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Check if line is not empty
            if [[ -n "$line" ]]; then
              # Extract the value after the equals sign
              value=$(echo "$line" | cut -d= -f2-)
              # Mask the value so it doesn't appear in logs
              echo "::add-mask::$value"
              # Add to GitHub environment
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(poetry run python3 ../../packer/base/files/letta_secrets_helper.py --env dev --service ci)
      - name: Run core integration tests
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          LETTA_SERVER_PASS: test_server_token
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          COMPOSIO_API_KEY: ${{ env.COMPOSIO_API_KEY }}
          ANTHROPIC_API_KEY: ${{ env.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
          GROQ_API_KEY: ${{ env.GROQ_API_KEY }}
          AZURE_API_KEY: ${{ env.AZURE_API_KEY }}
          AZURE_BASE_URL: ${{ secrets.AZURE_BASE_URL }}
          E2B_API_KEY: ${{ env.E2B_API_KEY }}
          E2B_SANDBOX_TEMPLATE_ID: ${{ secrets.E2B_SANDBOX_TEMPLATE_ID }}
        run: |
          set -o xtrace
          poetry run pip show letta
          poetry run pip show letta-client
          poetry run pytest -svv tests/${{ matrix.integration_test_suite }}
