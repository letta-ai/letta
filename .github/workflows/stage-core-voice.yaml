name: 🐍🚀 Stage Core Voice

on:
  workflow_dispatch:
    inputs:
      git_hash:
        description: 'Git hash to deploy'
        required: false
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        type: string
        default: 'main'
      deploy_message:
        description: 'Deployment message'
        required: false
        type: string
        default: ''

env:
  PROJECT_ID: memgpt-428419
  REGION: us-central1
  REGISTRY_NAME: letta-dev-us-central1

jobs:
  stage-core-voice:
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_hash || github.event.inputs.branch || github.sha }}
          submodules: recursive

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # second call to letta_secrets_helper.py will overwrite variables from first call (i.e. E2B_SANDBOX_TEMPLATE_ID)
      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Install required package
          poetry run pip install google-cloud-secret-manager

          # Get 'ci' secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -n "$line" ]]; then
              value=$(echo "$line" | cut -d= -f2-)
              echo "::add-mask::$value"
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(poetry run python3 ../../packer/base/files/letta_secrets_helper.py -e dev -s memgpt-server-voice)

          # Get 'e2b' secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -n "$line" ]]; then
              value=$(echo "$line" | cut -d= -f2-)
              echo "::add-mask::$value"
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(poetry run python3 ../../packer/base/files/letta_secrets_helper.py -e dev -s e2b)

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          # Add Google Cloud SDK repository and install GKE authentication plugin
          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Install just
        run: curl -LSs https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin/

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: just configure-kubectl letta-dev-us-central1

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build and Deploy
        env:
          TAG: ${{ github.event.inputs.git_hash || github.sha }}
          DEPLOY_MESSAGE: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}
          MEMGPT_SERVER_PASS: ${{ secrets.MEMGPT_SERVER_PASS }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          TOGETHER_API_KEY: ${{ env.TOGETHER_API_KEY }}
          ANTHROPIC_API_KEY: ${{ env.ANTHROPIC_API_KEY }}
          COMPOSIO_API_KEY: ${{ env.COMPOSIO_API_KEY }}
          GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}
          GROK_API_KEY: ${{ env.GROK_API_KEY }}
          LETTA_PG_PASSWORD: ${{ secrets.LETTA_PG_PASSWORD }}
          LETTA_PG_USER: ${{ secrets.LETTA_PG_USER }}
          LETTA_PG_DB: ${{ secrets.LETTA_PG_DB }}
          LETTA_PG_HOST: 10.119.0.3
          LETTA_PG_PORT: ${{ vars.LETTA_PG_PORT }}
          LETTA_DISABLE_SQLALCHEMY_POOLING: true
          E2B_API_KEY: ${{ env.E2B_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          E2B_SANDBOX_TEMPLATE_ID: ${{ env.E2B_SANDBOX_TEMPLATE_ID }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          LETTA_LOAD_DEFAULT_EXTERNAL_TOOLS: 'True'
          LETTA_OTEL_EXPORTER_OTLP_ENDPOINT: localhost:4317
          LETTA_ENVIRONMENT: dev
          CLICKHOUSE_ENDPOINT: https://qbcxouckj0.us-central1.gcp.clickhouse.cloud:8443
          CLICKHOUSE_DATABASE: otel
          CLICKHOUSE_USERNAME: default
          CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD_DEV }}
          ENV_NAME: dev
          LETTA_USE_EXPERIMENTAL: ${{ secrets.LETTA_USE_EXPERIMENTAL }}
          LETTA_UVICORN_WORKERS: 3 # number of CPU cores * 2 + 1
          LETTA_DEFAULT_LLM_HANDLE: ${{ secrets.LETTA_DEFAULT_LLM_HANDLE }}
          LETTA_DEFAULT_EMBEDDING_HANDLE: ${{ secrets.LETTA_DEFAULT_EMBEDDING_HANDLE }}
          MCP_READ_FROM_CONFIG: false # disable MCP config
          MCP_DISABLE_STDIO: true
        run: just build-core deploy-voice "${DEPLOY_MESSAGE}"
