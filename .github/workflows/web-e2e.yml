name: 🦸️ End-to-End Tests

permissions:
  actions: read
  contents: read

on:
  push:
    branches:
      - main
    paths:
      - 'apps/web/**'
      - 'apps/core/**'
      - 'libs/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: changed-files
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .github/workflows/web-e2e.yml
            apps/web/**
            apps/core/**
            libs/**
            package.json
            package-lock.json
            tsconfig.json
  cypress-run:
    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
    needs: [changed-files]
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: self-hosted
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-web:
        image: postgres
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-core:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_hash || github.event.inputs.branch || github.sha }}
          submodules: recursive
      - name: Install python dependencies
        shell: bash
        working-directory: apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
      - name: Migrate core database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head
      - name: Turn on Letta agents on main branch
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: poetry run letta server &
      - name: Install Dependencies
        run: npm ci
      - name: Install undertaker dependencies
        run: npm ci
        working-directory: apps/credit-undertaker
      - name: Build undertaker
        run: npm run undertaker:build
      - name: Run undertake detached
        run: node dist/apps/credit-undertaker/main.js > undertaker.log 2>&1 &
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
      - name: Migrate web database
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
        run: npm run web:database:migrate
      - name: Install deps
        working-directory: apps/cloud-api
        run: just setup-cloud-api
      - name: Turn on cloud-api
        working-directory: apps/cloud-api
        run: just cloud-api > cloud-api.log 2>&1 &
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_OPTIONS: --max_old_space_size=4096
          CLOUD_API_ENDPOINT: http://localhost:3006
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_DEV_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISH_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_DEV_PUBLISH_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          LETTA_AGENTS_ENDPOINT: http://localhost:8283
          NEXT_PUBLIC_CURRENT_HOST: http://localhost:3000
          IS_CYPRESS_RUN: yes
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm run start:e2e
          project: apps/web
          wait-on: 'http://localhost:3000'
          record: true
          parallel: false
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_OPTIONS: --max_old_space_size=4096
          CYPRESS_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_GOOGLE_CLIENT_ID }}
          CYPRESS_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_GOOGLE_CLIENT_SECRET }}
          CYPRESS_GOOGLE_REFRESH_TOKEN: ${{ secrets.CYPRESS_GOOGLE_REFRESH_TOKEN }}
          CLOUD_API_ENDPOINT: http://localhost:3006
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_DEV_SECRET_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISH_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_DEV_PUBLISH_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          LETTA_AGENTS_ENDPOINT: http://localhost:8283
          NEXT_PUBLIC_CURRENT_HOST: http://localhost:3000
          IS_CYPRESS_RUN: yes
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TAG: ${{ github.sha }}
      - name: Save undertaker log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: undertaker.log
          name: undertaker-log
      - name: Save cloud-api log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: apps/cloud-api/cloud-api.log
          name: cloud-api-log
