name:  ðŸ•¸ðŸš€ Stage Web

on:
  workflow_dispatch:
    inputs:
      git_hash:
        description: 'Git hash to deploy'
        required: false
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        type: string
        default: 'main'
      deploy_message:
        description: 'Deployment message'
        required: false
        type: string
        default: ''

env:
  PROJECT_ID: memgpt-428419
  # DOCKER_REGISTRY: us-central1-docker.pkg.dev/memgpt-428419/letta
  TAG: ${{ github.sha }}
  DEPLOY_MESSAGE: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}
  DATABASE_URL: postgresql://staff:${{ secrets.DATABASE_USER_STAFF_PASSWORD }}@10.119.0.3:5432/memgpt
  GOOGLE_CLIENT_ID: 231889654562-kuff3iq6b78o7uu3n8kn0b4st5hs45de.apps.googleusercontent.com
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  GOOGLE_REDIRECT_URI: https://app.letta.com/auth/google/callback
  LETTA_AGENTS_ENDPOINT: http://memgpt-server:8083
  LETTA_ENVIRONMENT: dev
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
  NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
  POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
  NEXT_PUBLIC_STRIPE_PUBLISH_KEY: ${{ secrets.STRIPE_PUBLISH_KEY }}
  TEMPORAL_LETTUCE_API_HOST: ${{ secrets.TEMPORAL_LETTUCE_API_HOST }}
  TEMPORAL_LETTUCE_CA_PEM: ${{ secrets.TEMPORAL_LETTUCE_CA_PEM }}
  TEMPORAL_LETTUCE_CA_KEY: ${{ secrets.TEMPORAL_LETTUCE_CA_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
  WORKOS_API_KEY: ${{ secrets.WORKOS_API_KEY }}
  LAUNCH_DARKLY_SDK_KEY: ${{ secrets.LAUNCH_DARKLY_SDK_KEY }}
  HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
  AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}
  AUTH_GITHUB_REDIRECT_URI: ${{ secrets.AUTH_GITHUB_REDIRECT_URI }}
  CLICKHOUSE_ENDPOINT: ${{ secrets.CLICKHOUSE_ENDPOINT }}
  CLICKHOUSE_DATABASE: ${{ secrets.CLICKHOUSE_DATABASE }}
  CLICKHOUSE_USERNAME: ${{ secrets.CLICKHOUSE_USERNAME }}
  CLICKHOUSE_PASSWORD: ${{ secrets.CLICKHOUSE_PASSWORD }}
  TWILIO_SID: ${{ secrets.TWILIO_SID }}
  TWILIO_SECRET: ${{ secrets.TWILIO_SECRET }}
  NEXT_PUBLIC_CURRENT_HOST: 34.56.226.249
  CLOUD_API_ENDPOINT: 34.56.226.249
  REDIS_HOST: "10.219.146.68"
  REDIS_PORT: "6379"
  REGION: us-central1
  # SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  GCP_SA_EMAIL: github-actions-service-account@memgpt-428419.iam.gserviceaccount.com

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    timeout-minutes: 60
    # if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Check if line is not empty
            if [[ -n "$line" ]]; then
              # Extract the value after the equals sign
              value=$(echo "$line" | cut -d= -f2-)
              # Mask the value so it doesn't appear in logs
              echo "::add-mask::$value"
              # Add to GitHub environment
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(uvx --with google-cloud-secret-manager python3 ../../packer/base/files/letta_secrets_helper.py -e dev -s ci)

          # Get 'e2b' secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            if [[ -n "$line" ]]; then
              value=$(echo "$line" | cut -d= -f2-)
              echo "::add-mask::$value"
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(uvx --with google-cloud-secret-manager python3 ../../packer/base/files/letta_secrets_helper.py -e dev -s e2b)

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Set active project
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          # Add Google Cloud SDK repository and install GKE authentication plugin
          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Install Just
        run: sudo apt install -y just

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: just configure-kubectl letta-dev-us-central1

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Remove unnecessary files
        run: |
            sudo rm -rf /usr/share/dotnet
            sudo rm -rf "$AGENT_TOOLSDIRECTORY"
            sudo rm -rf /usr/local/share/boost
            sudo rm -rf /usr/share/swift
            sudo rm -rf /usr/local/lib/android
            sudo rm -rf /usr/local/share/chromium
            sudo rm -rf /usr/local/share/powershell
            sudo docker system prune -af --volumes
            df -h

      - name: Build
        run: just build-web-images

      - name: Extract and deploy static files to CDN
        run: |
          echo "ðŸš§ Extracting static files from Docker image..."
          # Create temporary container from the built image
          CONTAINER_ID=$(docker create us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/letta-dev-us-central1/web:${{ env.TAG }})

          # Create directory for static files
          mkdir -p ./static-files

          # Extract static files from the container
          docker cp $CONTAINER_ID:/app/apps/web/.next/static ./static-files/_next
          docker cp $CONTAINER_ID:/app/apps/web/public ./static-files/public

          # Clean up container
          docker rm $CONTAINER_ID

          echo "ðŸš§ Uploading static files to Google Cloud Storage..."
          # Set the bucket name for staging environment
          BUCKET_NAME="letta-web"

          # Upload static files to GCS with proper headers
          gsutil -m cp -r ./static-files/public/* gs://$BUCKET_NAME/
          gsutil -m cp -r ./static-files/_next/* gs://$BUCKET_NAME/_next/static

          # Set cache headers for static assets (1 year for _next, 1 hour for public)
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000, immutable" gs://$BUCKET_NAME/_next/**
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" gs://$BUCKET_NAME/**

          echo "âœ… Static files deployed to staging CDN successfully"

      - name: Deploy
        id: deploy
        env:
          E2B_API_KEY: ${{ env.E2B_API_KEY }}
          COMPOSIO_API_KEY: ${{ env.COMPOSIO_API_KEY }}
          E2B_SANDBOX_TEMPLATE_ID: ${{ env.E2B_SANDBOX_TEMPLATE_ID }}
        run: just deploy-web "${DEPLOY_MESSAGE}"

      - name: Wait for deployment rollout to complete
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: |
          echo "Waiting for Kubernetes deployment rollout to complete..."
          kubectl rollout status deployment/letta-web
          echo "Deployment rollout completed successfully"
