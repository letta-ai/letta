name: Release App

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'The version of the app to release'
        required: true
        default: '0.0.0'

jobs:
  build-exe:
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # No need to install VS Build Tools - using GitHub's pre-installed Visual Studio

      - name: Verify VC++ Tools installation
        run: |
          # Check if pre-installed VS2022 Enterprise is available
          $vcvarsPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          if (Test-Path $vcvarsPath) {
            Write-Host "Found pre-installed VS2022: $vcvarsPath"
          } else {
            Write-Host "Warning: Pre-installed VS2022 not found at expected location"
            # Check a few other common locations as fallback
            $commonPaths = @(
              "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat",
              "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
            )

            foreach ($path in $commonPaths) {
              if (Test-Path $path) {
                Write-Host "Found alternative VS installation: $path"
              }
            }
          }
        shell: powershell

      - name: Install just
        uses: taiki-e/install-action@just

      - name: Prepare desktop (postgres Windows install)
        run: |
          # Clean directory
          rm -rf "$(git rev-parse --show-toplevel)/apps/desktop-electron/resources/postgres-16-windows-x64" || true
          mkdir -p "$(git rev-parse --show-toplevel)/apps/desktop-electron/resources/postgres-16-windows-x64"

          # Download binaries
          ./scripts/desktop-builders/download-postgres-windows.sh "$(git rev-parse --show-toplevel)/apps/desktop-electron/resources/postgres-16-windows-x64"

          # Remove pgAdmin if it exists
          rm -rf "$(git rev-parse --show-toplevel)/apps/desktop-electron/resources/postgres-16-windows-x64/pgAdmin 4" || true
        shell: bash

      - name: Prepare desktop (pgvector install)
        run: |
          # Get the repository root path
          $REPO_ROOT = git rev-parse --show-toplevel

          # Set VS_PATH environment variable
          $env:VS_PATH = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          # Run the batch file directly, bypassing the problematic just recipe
          cmd /c "scripts\desktop-builders\build-pgvector-windows.bat $REPO_ROOT/apps/desktop-electron/resources/postgres-16-windows-x64"
        shell: pwsh

      - name: Upload Windows Postgres binaries
        uses: actions/upload-artifact@v4
        with:
          name: postgres-windows
          path: apps/desktop-electron/resources/postgres-16-windows-x64

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1.8.3
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Test poetry
        run: poetry --version

      - name: Build exe
        run: node scripts/desktop-builders/src/generators/build-python-app/build-python-app.js

      - uses: actions/upload-artifact@v4
        with:
          name: letta.exe
          path: apps/desktop-core/dist/letta.exe
          overwrite: true

  # Rest of the workflow remains unchanged
  build-electron:
    needs: build-exe
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: taiki-e/install-action@just

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1.8.3
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Restore node_modules cache if exist
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules-${{ env.node-version }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Restore NPM cache if exist
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-npm-${{ env.node-version }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}

      - name: Bump version
        run: npm version ${{ github.event.inputs.app_version }}
        working-directory: apps/desktop-electron

      - name: Install toDesktop
        run: npm install --location=global @todesktop/cli

      - name: Install dependencies
        run: npm install

      # TODO strip this out eventually, only used for pgvector install
      - name: Install Postgres via Homebrew
        run: |
          brew update
          brew install postgresql@16
          brew link postgresql@16 --force || true

      - name: Prepare desktop (postgres Mac)
        run: just prepare-desktop-postgres-macos

      - name: Prepare desktop (rebuild deps)
        run: just prepare-desktop

      - name: Build electron
        run: just build-desktop

      - uses: actions/download-artifact@v4
        with:
          name: letta.exe
          path: apps/desktop-electron/dist/

      - name: Verify exe
        run: |
          echo "Verifying exe"
          file apps/desktop-electron/dist/letta.exe

      - name: Download Windows Postgres binaries
        uses: actions/download-artifact@v4
        with:
          name: postgres-windows
          path: apps/desktop-electron/resources/postgres-16-windows-x64

      - name: Verify Windows Postgres binaries exist
        run: |
          echo "Listing Windows Postgres files..."
          ls -lh apps/desktop-electron/resources/postgres-16-windows-x64

      - name: Check disk usage
        run: du -sh apps/desktop-electron/resources/* || true

      - name: List all resource files
        run: find apps/desktop-electron/resources/ | wc -l

      - name: Package
        env:
          TODESKTOP_ACCESS_TOKEN: ${{ secrets.TODESKTOP_ACCESS_TOKEN }}
          TODESKTOP_EMAIL: ${{ secrets.TODESKTOP_EMAIL }}
        run: just package-desktop
