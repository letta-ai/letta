name: Release App

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'The version of the app to release'
        required: true
        default: '0.0.0'

jobs:
  build-exe:
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ inputs.poetry-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      # test poetry
      - name: Test poetry
        run: poetry --version
      - name: Build exe
        run: node scripts/desktop-builders/src/generators/build-python-app/build-python-app.js
      - uses: actions/upload-artifact@v4
        with:
          name: letta.exe
          path: apps/desktop-core/dist/letta.exe
          overwrite: true
  build-electron:
    # wait for the exe to be built
    needs: build-exe
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PostgreSQL
        uses: tj-actions/install-postgresql@v3
        with:
          postgresql-version: 17
      - uses: taiki-e/install-action@just
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ inputs.poetry-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      - name: Restore node_modules cache if exist
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules-${{ env.node-version }}
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Restore NPM cache if exist
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-npm-${{ env.node-version }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: Bump version
        run: npm version ${{ github.event.inputs.app_version }}
        working-directory: apps/desktop-electron
      - name: Install toDesktop
        run: npm install --location=global @todesktop/cli
      - name: Install glob
        run: npm install -g glob
      - name: Prepare desktop
        run: just prepare-desktop
      - name: Build electron
        run: just build-desktop
      - uses: actions/download-artifact@v4
        with:
          name: letta.exe
          path: apps/desktop-electron/dist/
      - name: Verify exe
        run: |
          echo "Verifying exe"
          file apps/desktop-electron/dist/letta.exe
      - name: Package
        env:
          TODESKTOP_ACCESS_TOKEN: ${{ secrets.TODESKTOP_ACCESS_TOKEN }}
          TODESKTOP_EMAIL: ${{ secrets.TODESKTOP_EMAIL }}
        run: just package-desktop
      - name: Release
        env:
          TODESKTOP_ACCESS_TOKEN: ${{ secrets.TODESKTOP_ACCESS_TOKEN }}
          TODESKTOP_EMAIL: ${{ secrets.TODESKTOP_EMAIL }}
        run: just release-desktop
