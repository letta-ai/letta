name:  🍃🚀 Deploy Lettuce

on:
  workflow_run:
    workflows: ["🦸️ End-to-End Tests"]
    types:
      - completed
    branches:
      - main
    paths:
      - 'apps/lettuce/**'
      - 'libs/**'
  workflow_dispatch:

env:
  PROJECT_ID: memgpt-428419
  DOCKER_REGISTRY: us-central1-docker.pkg.dev/memgpt-428419/letta
  TAG: ${{ github.sha }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  LETTA_AGENTS_ENDPOINT: http://memgpt-server:8083
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
  NEXT_PUBLIC_CURRENT_HOST: https://api.letta.com
  REDIS_HOST: "10.167.199.148"
  REDIS_PORT: "6379"
  PORT: "8080"
  REGION: us-central1
  GCP_SA_EMAIL: github-actions-service-account@memgpt-428419.iam.gserviceaccount.com
  TEMPORAL_LETTUCE_API_HOST: ${{ secrets.TEMPORAL_LETTUCE_API_HOST }}
  TEMPORAL_LETTUCE_CA_PEM: ${{ secrets.TEMPORAL_LETTUCE_CA_PEM }}
  TEMPORAL_LETTUCE_CA_KEY: ${{ secrets.TEMPORAL_LETTUCE_CA_KEY }}
  TEMPORAL_LETTUCE_NAMESPACE: "lettuce.tmhou"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set active project
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install just
        run: curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Remove unnecessary files
        run: |
            sudo rm -rf /usr/share/dotnet
            sudo rm -rf "$AGENT_TOOLSDIRECTORY"
            sudo rm -rf /usr/local/share/boost
            sudo rm -rf /usr/share/swift
            sudo rm -rf /usr/local/lib/android
            sudo rm -rf /usr/local/share/chromium
            sudo rm -rf /usr/local/share/powershell
            sudo docker system prune -af --volumes
            df -h

      - name: Configure Docker
        run: just configure-docker

      - name: Setup GCP Service Account Key
        run: echo '${{ secrets.GCP_SA_KEY }}' > ${{ github.workspace }}/gcp-key.json

      - name: Configure kubectl
        run: |
          gcloud auth activate-service-account ${{ env.GCP_SA_EMAIL }} --key-file=${{ github.workspace }}/gcp-key.json
          gcloud container clusters get-credentials letta --region ${{ env.REGION }} --project ${{ env.PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        run: just build-lettuce

      - name: Update deployment status to in_progress
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: in_progress

      - name: Deploy
        id: deploy
        run: just deploy-lettuce

      - name: Update deployment status to success
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success

      - name: Update deployment status to failure
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure

      - name: Fire alert
        if: failure()
        run: just alert "${{ github.workflow }} failed!" "${{ github.actor }}"
