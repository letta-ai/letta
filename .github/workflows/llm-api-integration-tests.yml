name: 🐍🧪 [Core] LLM API Integration Tests

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
  AZURE_BASE_URL: ${{ secrets.AZURE_BASE_URL }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  COMPOSIO_API_KEY: ${{ secrets.COMPOSIO_API_KEY }}
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT}}
  GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION}}
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY}}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: changed-files
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            apps/core/**
            .github/workflows/core-integration-tests.yml

  main:
    needs: [ changed-files ]
    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      qdrant:
        image: qdrant/qdrant
        ports:
          - 6333:6333
      postgres:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Load cached Poetry Binary
        id: cached-poetry-binary
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-1.8.3
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox -E google' }}
      - name: Migrate database
        working-directory: apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head

      - name: Test Google Vertex Basic
        working-directory: apps/core
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}" > gcp_service_account_secrets.json
          export GOOGLE_APPLICATION_CREDENTIALS=gcp_service_account_secrets.json
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m vertex_basic

      - name: Test OpenAI Basic
        working-directory: apps/core
        run: |
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m openai_basic

      - name: Test Anthropic Basic
        working-directory: apps/core
        run: |
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m anthropic_basic

      - name: Test Azure Basic
        working-directory: apps/core
        run: |
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m azure_basic

      - name: Test Gemini Basic
        working-directory: apps/core
        run: |
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m gemini_basic

      - name: Test DeepSeek Basic
        working-directory: apps/core
        run: |
          poetry run pytest -s -vv tests/test_model_letta_performance.py -m deepseek_basic
