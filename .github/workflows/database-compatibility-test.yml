name: 🦸️ Migration API Stability


permissions:
  actions: read
  contents: read

on:
  pull_request:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  changed-files:
    runs-on: ubuntu-latest
    name: changed-files
    outputs:
      all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .github/workflows/database-compatibility-test.yml
            apps/cloud-api/src/**
            apps/core/**
            libs/sdk-core/**
            libs/utils-server/**
            libs/service-database/**
            libs/config-environment-variables/**
            libs/service-redis/**
            libs/sdk-web/**
            package.json
            package-lock.json
            tsconfig.json
  migration-api-stability:
    env:
      LETTA_AGENTS_ENDPOINT: http://localhost:8283
      DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
      IS_API_STABILITY_TEST: yes
      IS_CYPRESS_RUN: yes
      NODE_OPTIONS: --max_old_space_size=6144
    needs: [changed-files]
    permissions:
      actions: read
      contents: read
      id-token: write
    if: ${{ needs.changed-files.outputs.any_changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-web:
        image: postgres
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres-core:
        image: pgvector/pgvector:pg17
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: branch-code
      - uses: actions/checkout@v4
        with:
          ref: main
          path: main-code
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install just
        run: curl -LSs https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin/
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: main-code/apps/core/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('main-code/**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('main-code/**/poetry.lock') }}
      - name: Install poetry dependencies on main branch
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: main-code/apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
      - name: Migrate database on main branch
        working-directory: main-code/apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION vector'
          poetry run alembic upgrade head
      - name: Load cached venv
        id: branch-cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: branch-code/apps/core/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('branch-code/**/poetry.lock') }}${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
          # Restore cache with this prefix if not exact match with key
          # Note cache-hit returns false in this case, so the below step will run
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('branch-code/**/poetry.lock') }}
      - name: Install poetry dependencies on branch code
        if: steps.branch-cached-poetry-dependencies.outputs.cache-hit != 'true'
        shell: bash
        working-directory: branch-code/apps/core
        run: poetry install --no-interaction --no-root ${{ inputs.install-args || '-E dev -E postgres -E external-tools -E tests -E cloud-tool-sandbox' }}
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Inject env vars into environment
        working-directory: main-code/apps/core
        run: |
          # Install required package
          poetry run pip install google-cloud-secret-manager

          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Check if line is not empty
            if [[ -n "$line" ]]; then
              # Extract the value after the equals sign
              value=$(echo "$line" | cut -d= -f2-)
              # Mask the value so it doesn't appear in logs
              echo "::add-mask::$value"
              # Add to GitHub environment
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(poetry run python3 ../../packer/base/files/letta_secrets_helper.py --env dev --service ci)
      - name: Turn on Letta agents on main branch
        working-directory: main-code/apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        run: poetry run letta server &
      - name: Cache npm dependencies
        id: cache-branch
        uses: actions/cache@v3
        with:
          path: ./branch-code/apps/cloud-api/node_modules
          key: modules-${{ hashFiles('./branch-code/apps/cloud-api/package-lock.json') }}
      - name: Cache npm dependencies
        id: cache-main
        uses: actions/cache@v3
        with:
          path: ./main-code/apps/cloud-api/node_modules
          key: modules-${{ hashFiles('./main-code/apps/cloud-api/package-lock.json') }}
      - name: Turn on letta web on main branch
        working-directory: main-code/apps/cloud-api
        run: just setup-cloud-api
      - name: Migrate Cloud DB
        working-directory: main-code
        run:
          just migrate-cloud-db
      - name: Turn on letta web on main branch
        working-directory: main-code
        run: just cloud-api > cloud-api.log 2>&1 &
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          LETTA_AGENTS_ENDPOINT: http://localhost:8283
          NEXT_PUBLIC_CURRENT_HOST: http://localhost:3006
          IS_API_STABILITY_TEST: yes
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          TEST_STAGE: main
      - name: Run database compatibility tests
        working-directory: main-code
        run: just database-compatibility
        env:
          TEST_STAGE: main
      - name: Kill Letta web
        run: kill $(pgrep -f "just cloud-api") || true
      - name: Kill Letta agents
        run: kill $(pgrep -f "poetry run letta server") || true
      - name: Migrate database on branch code
        working-directory: branch-code/apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
        run: |
          poetry run alembic upgrade head
      - name: Turn on Letta agents on branch code
        working-directory: branch-code/apps/core
        env:
          LETTA_PG_PORT: 5432
          LETTA_PG_USER: postgres
          LETTA_PG_PASSWORD: postgres
          LETTA_PG_DB: postgres
          LETTA_PG_HOST: localhost
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        # Detach
        run: poetry run letta server &
      - name: Install deps on branch code
        working-directory: branch-code/apps/cloud-api
        run: just setup-cloud-api
      - name: Migrate Cloud DB
        working-directory: branch-code
        run:
          just migrate-cloud-db
      - name: Turn on letta web on branch code
        working-directory: branch-code/apps/cloud-api
        run: just cloud-api > cloud-api.log 2>&1 &
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5433/postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NEXT_PUBLIC_CURRENT_HOST: http://localhost:3006
          IS_API_STABILITY_TEST: yes
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
          TEST_STAGE: branch
      - name: Run database stability tests on branch code
        working-directory: branch-code
        run: just database-compatibility
        env:
          TEST_STAGE: branch
      - name: Save branch code log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: branch-code/cloud-api.log
          name: cloud-api-branch-log
      - name: Save main code log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: main-code/cloud-api.log
          name: cloud-api-main0log
