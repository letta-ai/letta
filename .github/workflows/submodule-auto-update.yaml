name: ðŸ”„ Auto-Update Letta Core Submodule

on:
  repository_dispatch:
    types: [letta-main-updated]
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Specific commit SHA to update to (optional)'
        required: false
        type: string

permissions:
  contents: write
  actions: write
  checks: read
  id-token: write
  pull-requests: write

jobs:
  update-and-verify:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.update-submodule.outputs.should_skip }}
      old_sha: ${{ steps.update-submodule.outputs.old_sha }}
      new_sha: ${{ steps.update-submodule.outputs.new_sha }}
      tests_passed: ${{ steps.check-tests.outputs.all_passed }}
    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true

      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.NOTIFIER_APP_ID }}
          private-key: ${{ secrets.NOTIFIER_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          submodules: true
          fetch-depth: 0

      - name: Update submodule to latest main
        id: update-submodule
        run: |
          cd apps/core
          git fetch origin

          # Use specific commit if provided, otherwise use latest main
          if [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            TARGET_SHA="${{ github.event.inputs.commit_sha }}"
          elif [ -n "${{ github.event.client_payload.commit_sha }}" ]; then
            TARGET_SHA="${{ github.event.client_payload.commit_sha }}"
          else
            TARGET_SHA=$(git rev-parse origin/main)
          fi

          echo "Updating submodule to commit: $TARGET_SHA"
          git checkout $TARGET_SHA

          # Check if this is actually a new commit
          cd ..
          CURRENT_SHA=$(git rev-parse HEAD:apps/core)
          if [ "$CURRENT_SHA" = "$TARGET_SHA" ]; then
            echo "Submodule already at target commit $TARGET_SHA"
            echo "should_skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Updated from $CURRENT_SHA to $TARGET_SHA"
          echo "old_sha=$CURRENT_SHA" >> $GITHUB_OUTPUT
          echo "new_sha=$TARGET_SHA" >> $GITHUB_OUTPUT
          echo "should_skip=false" >> $GITHUB_OUTPUT

      - name: Install just
        if: steps.update-submodule.outputs.should_skip != 'true'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin

      - name: Setup Node.js
        if: steps.update-submodule.outputs.should_skip != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        if: steps.update-submodule.outputs.should_skip != 'true'
        run: |
          npm install
          cd apps/core
          uv sync --all-extras

      - name: Run stage-api and publish-api
        if: steps.update-submodule.outputs.should_skip != 'true'
        run: |
          echo "Running stage-api..."
          just stage-api
          echo "Running publish-api..."
          just publish-api

      - name: Commit submodule update and API changes to temporary branch
        if: steps.update-submodule.outputs.should_skip != 'true'
        run: |
          # Create a temporary branch for testing
          BRANCH_NAME="auto-update-submodule-${{ steps.update-submodule.outputs.new_sha }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b $BRANCH_NAME

          # Add submodule changes
          git add apps/core
          git commit -m "chore: update letta core submodule to ${{ steps.update-submodule.outputs.new_sha }}" --no-verify

          # Check for API changes and commit them too
          if [[ -n $(git status --porcelain) ]]; then
            echo "API changes detected, adding to the same PR..."
            git add -A
            git commit -m "chore: update API artifacts following submodule update" --no-verify
          else
            echo "No API changes detected"
          fi

          git push origin $BRANCH_NAME
          echo "TEMP_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.update-submodule.outputs.should_skip != 'true'
        id: create-pr
        run: |
          BRANCH_NAME="auto-update-submodule-${{ steps.update-submodule.outputs.new_sha }}"

          PR_URL=$(gh pr create \
            --title "chore: update letta core submodule to ${{ steps.update-submodule.outputs.new_sha }}" \
            --body "$(cat <<'EOF'
          ## Summary
          - Automated submodule update from ${{ steps.update-submodule.outputs.old_sha }} to ${{ steps.update-submodule.outputs.new_sha }}

          ## Test plan
          - [ ] End-to-End Tests pass
          - [ ] Cloud API Stability Tests pass
          - [ ] Web Lint and Unit Tests pass
          - [ ] Cloud API Integration Tests pass
          - [ ] Web Migration API Stability Tests pass

          ðŸ¤– This PR was automatically created by the submodule auto-update workflow.
          EOF
          )" \
            --head $BRANCH_NAME \
            --base main)

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "PR created: $PR_URL"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Wait for and check test results
        if: steps.update-submodule.outputs.should_skip != 'true'
        id: check-tests
        run: |
          echo "Waiting for tests to complete on PR..."

          # Define the required test contexts to monitor (partial matching patterns)
          REQUIRED_TESTS=(
            "cypress-run"
            "cloud-api-test"
            "main"
            "cloud-api-integration-tests"
            "migration-api-stability"
          )

          # Find the PR number
          BRANCH_NAME="auto-update-submodule-${{ steps.update-submodule.outputs.new_sha }}"
          PR_NUMBER=$(gh pr list --head $BRANCH_NAME --json number --jq '.[0].number')
          echo "Monitoring PR #$PR_NUMBER"
          echo "Required tests: ${REQUIRED_TESTS[@]}"

          # Wait up to 45 minutes for tests to complete
          MAX_WAIT=2700  # 45 minutes
          WAIT_TIME=0
          SLEEP_INTERVAL=60  # Check every minute

          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            echo "Checking PR status... (waited ${WAIT_TIME}s)"

            # Get PR status checks
            PR_STATUS=$(gh pr view $PR_NUMBER --json statusCheckRollup --jq '.statusCheckRollup')

            if [ "$PR_STATUS" = "null" ] || [ "$PR_STATUS" = "[]" ]; then
              echo "No status checks found yet, waiting..."
              sleep $SLEEP_INTERVAL
              WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
              continue
            fi

            # Debug: show all available status check contexts
            echo "Available status check contexts:"
            echo "$PR_STATUS" | jq -r '.[] | .context // "null"'

            # Check each required test individually
            ALL_PASSED=true
            ALL_COMPLETED=true
            FAILED_REQUIRED=()
            PENDING_REQUIRED=()
            SUCCESS_REQUIRED=()

            for test in "${REQUIRED_TESTS[@]}"; do
              # Check if this required test exists in the status checks (handle null context gracefully)
              TEST_STATUS=$(echo "$PR_STATUS" | jq -r --arg test "$test" '.[] | select(.context != null and (.context | test($test))) | .conclusion')

              if [ -z "$TEST_STATUS" ]; then
                echo "Required test '$test' not found in status checks, waiting..."
                PENDING_REQUIRED+=("$test (not started)")
                ALL_COMPLETED=false
              elif [ "$TEST_STATUS" = "FAILURE" ]; then
                echo "Required test '$test' failed!"
                FAILED_REQUIRED+=("$test")
                ALL_PASSED=false
              elif [ "$TEST_STATUS" = "SUCCESS" ]; then
                echo "Required test '$test' passed âœ“"
                SUCCESS_REQUIRED+=("$test")
              elif [ "$TEST_STATUS" = "null" ] || [ "$TEST_STATUS" = "PENDING" ] || [ "$TEST_STATUS" = "IN_PROGRESS" ]; then
                echo "Required test '$test' is still running..."
                PENDING_REQUIRED+=("$test")
                ALL_COMPLETED=false
              fi
            done

            # If any required tests failed, exit immediately
            if [ ${#FAILED_REQUIRED[@]} -gt 0 ]; then
              echo "Required tests failed:"
              printf '%s\n' "${FAILED_REQUIRED[@]}"
              echo "all_passed=false" >> $GITHUB_OUTPUT
              exit 0
            fi

            # If all required tests completed successfully, exit
            if [ "$ALL_COMPLETED" = true ] && [ "$ALL_PASSED" = true ]; then
              echo "All required tests passed!"
              echo "Successful required tests:"
              printf '%s\n' "${SUCCESS_REQUIRED[@]}"
              echo "all_passed=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            # Show pending required tests (ignore non-required ones like Vercel)
            if [ ${#PENDING_REQUIRED[@]} -gt 0 ]; then
              echo "Required tests still running:"
              printf '%s\n' "${PENDING_REQUIRED[@]}"
            fi

            # If tests are still running, wait
            sleep $SLEEP_INTERVAL
            WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
          done

          echo "Required tests did not complete within timeout"
          echo "all_passed=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

  merge-to-main:
    needs: update-and-verify
    if: needs.update-and-verify.outputs.should_skip != 'true' && needs.update-and-verify.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.NOTIFIER_APP_ID }}
          private-key: ${{ secrets.NOTIFIER_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          submodules: true
          fetch-depth: 0

      - name: Merge PR to main
        run: |
          TEMP_BRANCH="auto-update-submodule-${{ needs.update-and-verify.outputs.new_sha }}"

          # Find and merge the PR
          PR_NUMBER=$(gh pr list --head $TEMP_BRANCH --json number --jq '.[0].number')
          echo "Found PR #$PR_NUMBER for branch $TEMP_BRANCH"

          # Merge the PR
          gh pr merge $PR_NUMBER --squash --delete-branch --body "All tests passed successfully:
          âœ… End-to-End Tests
          âœ… Cloud API Stability Tests
          âœ… Web Lint and Unit Tests
          âœ… Cloud API Integration Tests
          âœ… Web Migration API Stability Tests

          Updated from ${{ needs.update-and-verify.outputs.old_sha }} to ${{ needs.update-and-verify.outputs.new_sha }}"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

  cleanup-on-failure:
    needs: update-and-verify
    if: needs.update-and-verify.outputs.should_skip != 'true' && needs.update-and-verify.outputs.tests_passed != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.NOTIFIER_APP_ID }}
          private-key: ${{ secrets.NOTIFIER_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          submodules: true

      - name: Close PR and clean up
        run: |
          TEMP_BRANCH="auto-update-submodule-${{ needs.update-and-verify.outputs.new_sha }}"

          # Find and close the PR
          PR_NUMBER=$(gh pr list --head $TEMP_BRANCH --json number --jq '.[0].number')
          if [ "$PR_NUMBER" != "null" ] && [ -n "$PR_NUMBER" ]; then
            echo "Closing PR #$PR_NUMBER for failed tests"
            gh pr close $PR_NUMBER --comment "ðŸš¨ Closing this PR because tests failed or timed out.

            Failed to update from ${{ needs.update-and-verify.outputs.old_sha }} to ${{ needs.update-and-verify.outputs.new_sha }}

            Please check the test results and update manually if needed."

            # Delete the branch
            git push origin --delete $TEMP_BRANCH || true
          else
            echo "No PR found to close"
            git push origin --delete $TEMP_BRANCH || true
          fi

          echo "ðŸš¨ Submodule update failed - tests did not pass"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
