name:  🌐🚀 Stage model-proxy

on:
  workflow_dispatch:
    inputs:
      git_hash:
        description: 'Git hash to deploy'
        required: false
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        type: string
        default: 'main'
      deploy_message:
        description: 'Deployment message'
        required: false
        type: string
        default: ''

env:
  PROJECT_ID: memgpt-428419
  DOCKER_REGISTRY: us-central1-docker.pkg.dev/memgpt-428419/letta
  TAG: ${{ github.sha }}
  PORT: "8080"
  LETTA_AGENTS_ENDPOINT: http://memgpt-server:8083
  REGION: us-central1
  GCP_SA_EMAIL: github-actions-service-account@memgpt-428419.iam.gserviceaccount.com
  SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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
  GCP_PUBSUB_PROJECT_ID: memgpt-428419
  GCP_PUBSUB_TOPIC_ID: model-proxy-prod
  LETTA_ENVIRONMENT: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    timeout-minutes: 60
    # TODO: remove this
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Inject env vars into environment
        working-directory: apps/core
        run: |
          # Get secrets and mask them before adding to environment
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Check if line is not empty
            if [[ -n "$line" ]]; then
              # Extract the value after the equals sign
              value=$(echo "$line" | cut -d= -f2-)
              # Mask the value so it doesn't appear in logs
              echo "::add-mask::$value"
              # Add to GitHub environment
              echo "$line" >> $GITHUB_ENV
            fi
          done < <(uvx --with google-cloud-secret-manager python3 ../../packer/base/files/letta_secrets_helper.py -e dev -s ci)

      # - name: Set up Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 'lts/*'

      - name: Set active project
        run: |
          gcloud config set project ${{ env.PROJECT_ID }}
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      - name: Install Just
        run: sudo apt install -y just

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install gke-gcloud-auth-plugin
        run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Remove unnecessary files
        run: |
            sudo rm -rf /usr/share/dotnet
            sudo rm -rf "$AGENT_TOOLSDIRECTORY"
            sudo rm -rf /usr/local/share/boost
            sudo rm -rf /usr/share/swift
            sudo rm -rf /usr/local/lib/android
            sudo rm -rf /usr/local/share/chromium
            sudo rm -rf /usr/local/share/powershell
            sudo docker system prune -af --volumes
            df -h

      - name: Configure Docker
        run: just configure-docker

      - name: Configure kubectl
        env:
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
        run: just configure-kubectl letta-dev-us-central1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        run: just build-model-proxy

      - name: Update deployment status to in_progress
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: in_progress

      - name: Deploy
        id: deploy
        env:
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY }}
        run: just deploy-model-proxy

      - name: Update deployment status to success
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success

      - name: Update deployment status to failure
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure
