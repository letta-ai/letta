# Default values for memgpt-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

project_id: &project_id memgpt-428419
lettaEnv: &lettaEnv dev
replicaCount: 4

image:
  repository: us-central1-docker.pkg.dev/memgpt-428419/letta-dev-us-central1/memgpt-server
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
    iam.gke.io/gcp-service-account: "memgpt-server-dev-sa@memgpt-428419.iam.gserviceaccount.com"
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "memgpt-server"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8083

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 1
    memory: 1Gi

livenessProbe:
  failureThreshold: 5
  httpGet:
    path: /v1/health/
    port: 8083
    scheme: HTTP
  initialDelaySeconds: 90
  periodSeconds: 15
  successThreshold: 1
  timeoutSeconds: 15

readinessProbe:
  failureThreshold: 3
  httpGet:
    path: /v1/health/
    port: 8083
    scheme: HTTP
  initialDelaySeconds: 90
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 15

autoscaling:
  enabled: true
  minReplicas: 8
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

env:
  # general config
  LETTA_ENVIRONMENT: *lettaEnv
  # db config
  LETTA_PG_DB: memgpt
  LETTA_PG_USER: staff
  LETTA_PG_HOST: 10.119.0.3
  LETTA_PG_PORT: 6432
  # telemetry config
  ENV_NAME: *lettaEnv
  CLICKHOUSE_USERNAME: default
  CLICKHOUSE_ENDPOINT: https://apyhgglpro.us-central1.gcp.clickhouse.cloud:8443
  CLICKHOUSE_DATABASE: otel
  LETTA_OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4317
  # feature flags
  LETTA_LOAD_DEFAULT_EXTERNAL_TOOLS: true
  LETTA_DISABLE_SQLALCHEMY_POOLING: true
  LETTA_USE_EXPERIMENTAL: true
  LETTA_UVICORN_WORKERS: 1
  # set to 10 for random reason: just need something here but in theory ignoring these parameters
  LETTA_PG_POOL_SIZE: 10
  LETTA_PG_MAX_OVERFLOW: 10
  LETTA_DEFAULT_LLM_HANDLE: openai/gpt-4.1
  LETTA_DEFAULT_EMBEDDING_HANDLE: openai/text-embedding-3-small
  MCP_READ_FROM_CONFIG: false
  PINECONE_NAMESPACE: __default__
  PINECONE_INDEX_HOST: https://test-index-p6kwg4z.svc.aped-4627-b74a.pinecone.io

secretsProvider:
  secrets:
    # connection secrets
    - LETTA_SERVER_PASS
    - LETTA_PG_PASSWORD
    - LETTA_PG_URI
    # api secrets
    - ANTHROPIC_API_KEY
    - OPENAI_API_KEY
    - TOGETHER_API_KEY
    - E2B_API_KEY
    - E2B_SANDBOX_TEMPLATE_ID
    - PINECONE_API_KEY
    # telemetry secrets
    - SENTRY_DSN
    - CLICKHOUSE_PASSWORD
