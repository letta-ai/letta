import * as fs from 'fs';
import * as path from 'path';

import { merge, isErrorResult } from 'openapi-merge';
import { Swagger } from 'atlassian-openapi';
import { RESTRICTED_ROUTE_BASE_PATHS } from '../../../libs/letta-agents-api/src/lib/constants';

const lettaWebOpenAPIPath = path.join(
  __dirname,
  '..',
  '..',
  'letta',
  'autogenerated',
  'letta-web-openapi.json'
);
const lettaAgentsAPIPath = path.join(
  __dirname,
  '..',
  '..',
  '..',
  'libs',
  'letta-agents-api',
  'letta-agents-openapi.json'
);

const lettaWebOpenAPI = JSON.parse(
  fs.readFileSync(lettaWebOpenAPIPath, 'utf8')
) as Swagger.SwaggerV3;
const lettaAgentsAPI = JSON.parse(
  fs.readFileSync(lettaAgentsAPIPath, 'utf8')
) as Swagger.SwaggerV3;

// removes any routes that are restricted
lettaAgentsAPI.paths = Object.fromEntries(
  Object.entries(lettaAgentsAPI.paths).filter(([path]) =>
    RESTRICTED_ROUTE_BASE_PATHS.every(
      (restrictedPath) => !path.startsWith(restrictedPath)
    )
  )
);

const lettaAgentsAPIWithNoEndslash = Object.keys(lettaAgentsAPI.paths).reduce(
  (acc, path) => {
    const pathWithoutSlash = path.endsWith('/')
      ? path.slice(0, path.length - 1)
      : path;
    acc[pathWithoutSlash] = lettaAgentsAPI.paths[path];
    return acc;
  },
  {} as Swagger.SwaggerV3['paths']
);

// remove duplicate paths, delete from letta-web-openapi if it exists in letta-agents-api
// some paths will have an extra / at the end, so we need to remove that as well
lettaWebOpenAPI.paths = Object.fromEntries(
  Object.entries(lettaWebOpenAPI.paths).filter(([path]) => {
    const pathWithoutSlash = path.endsWith('/')
      ? path.slice(0, path.length - 1)
      : path;
    return !lettaAgentsAPIWithNoEndslash[pathWithoutSlash];
  })
);

// go through the paths and remove "user_id" from the headers
for (const path of Object.keys(lettaAgentsAPI.paths)) {
  for (const method of Object.keys(lettaAgentsAPI.paths[path])) {
    // @ts-expect-error - a
    if (lettaAgentsAPI.paths[path][method]?.parameters) {
      // @ts-expect-error - a
      lettaAgentsAPI.paths[path][method].parameters = lettaAgentsAPI.paths[
        path
      ][method].parameters.filter(
        (param: Record<string, string>) =>
          param.in !== 'header' || param.name !== 'user_id'
      );
    }
  }
}

const result = merge([
  {
    oas: lettaAgentsAPI,
  },
  {
    oas: lettaWebOpenAPI,
  },
]);

if (isErrorResult(result)) {
  console.error(`${result.message} (${result.type})`);
  process.exit(1);
}

result.output.openapi = '3.1.0';
result.output.info = {
  title: 'Letta API',
  version: '1.0.0',
};

result.output.servers = [
  {
    url: 'https://app.letta.com',
    description: 'Letta Hosted',
  },
  {
    url: 'http://localhost:8283',
    description: 'Self Hosted',
  },
];

result.output.components = {
  ...result.output.components,
  securitySchemes: {
    bearerAuth: {
      type: 'http',
      scheme: 'bearer',
    },
  },
};

result.output.security = [
  ...(result.output.security || []),
  {
    bearerAuth: [],
  },
];

fs.writeFileSync(
  path.join(__dirname, '..', 'autogenerated', 'openapi.json'),
  JSON.stringify(result.output, null, 2)
);
