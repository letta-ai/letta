// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  AuthenticateUserApiAuthPostData,
  AuthenticateUserApiAuthPostResponse,
  GetAllUsersAdminUsersGetData,
  GetAllUsersAdminUsersGetResponse,
  CreateUserAdminUsersPostData,
  CreateUserAdminUsersPostResponse,
  DeleteUserAdminUsersDeleteData,
  DeleteUserAdminUsersDeleteResponse,
  CreateNewApiKeyAdminUsersKeysPostData,
  CreateNewApiKeyAdminUsersKeysPostResponse,
  GetApiKeysAdminUsersKeysGetData,
  GetApiKeysAdminUsersKeysGetResponse,
  DeleteApiKeyAdminUsersKeysDeleteData,
  DeleteApiKeyAdminUsersKeysDeleteResponse,
  DeleteToolAdminToolsToolNameDeleteData,
  DeleteToolAdminToolsToolNameDeleteResponse,
  GetToolAdminToolsToolNameGetData,
  GetToolAdminToolsToolNameGetResponse,
  ListAllToolsAdminToolsGetResponse,
  CreateToolAdminToolsPostData,
  CreateToolAdminToolsPostResponse,
  DeleteToolApiToolsToolIdDeleteData,
  DeleteToolApiToolsToolIdDeleteResponse,
  GetToolApiToolsToolIdGetData,
  GetToolApiToolsToolIdGetResponse,
  UpdateToolApiToolsToolIdPostData,
  UpdateToolApiToolsToolIdPostResponse,
  GetToolIdApiToolsNameToolNameGetData,
  GetToolIdApiToolsNameToolNameGetResponse,
  ListAllToolsApiToolsGetResponse,
  CreateToolApiToolsPostData,
  CreateToolApiToolsPostResponse,
  GetAllAgentsApiAdminAgentsGetResponse,
  ListAgentsApiAgentsGetResponse,
  CreateAgentApiAgentsPostData,
  CreateAgentApiAgentsPostResponse,
  UpdateAgentApiAgentsAgentIdPostData,
  UpdateAgentApiAgentsAgentIdPostResponse,
  GetAgentStateApiAgentsAgentIdGetData,
  GetAgentStateApiAgentsAgentIdGetResponse,
  DeleteAgentApiAgentsAgentIdDeleteData,
  DeleteAgentApiAgentsAgentIdDeleteResponse,
  GetAgentSourcesApiAgentsAgentIdSourcesGetData,
  GetAgentSourcesApiAgentsAgentIdSourcesGetResponse,
  GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetData,
  GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetResponse,
  GetAgentMemoryApiAgentsAgentIdMemoryGetData,
  GetAgentMemoryApiAgentsAgentIdMemoryGetResponse,
  UpdateAgentMemoryApiAgentsAgentIdMemoryPostData,
  UpdateAgentMemoryApiAgentsAgentIdMemoryPostResponse,
  GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetData,
  GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetResponse,
  GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetData,
  GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetResponse,
  GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetData,
  GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetResponse,
  InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostData,
  InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostResponse,
  DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteData,
  DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteResponse,
  GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetData,
  GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetResponse,
  GetAgentMessagesApiAgentsAgentIdMessagesGetData,
  GetAgentMessagesApiAgentsAgentIdMessagesGetResponse,
  SendMessageApiAgentsAgentIdMessagesPostData,
  SendMessageApiAgentsAgentIdMessagesPostResponse,
  ListBlocksApiBlocksGetData,
  ListBlocksApiBlocksGetResponse,
  CreateBlockApiBlocksPostData,
  CreateBlockApiBlocksPostResponse,
  UpdateBlockApiBlocksBlockIdPostData,
  UpdateBlockApiBlocksBlockIdPostResponse,
  DeleteBlockApiBlocksBlockIdDeleteData,
  DeleteBlockApiBlocksBlockIdDeleteResponse,
  GetBlockApiBlocksBlockIdGetData,
  GetBlockApiBlocksBlockIdGetResponse,
  ListJobsApiJobsGetResponse,
  ListActiveJobsApiJobsActiveGetResponse,
  GetJobApiJobsJobIdGetData,
  GetJobApiJobsJobIdGetResponse,
  ListModelsApiModelsGetResponse,
  GetSourceApiSourcesSourceIdGetData,
  GetSourceApiSourcesSourceIdGetResponse,
  UpdateSourceApiSourcesSourceIdPostData,
  UpdateSourceApiSourcesSourceIdPostResponse,
  DeleteSourceApiSourcesSourceIdDeleteData,
  DeleteSourceApiSourcesSourceIdDeleteResponse,
  GetSourceIdByNameApiSourcesNameSourceNameGetData,
  GetSourceIdByNameApiSourcesNameSourceNameGetResponse,
  ListSourcesApiSourcesGetResponse,
  CreateSourceApiSourcesPostData,
  CreateSourceApiSourcesPostResponse,
  AttachSourceToAgentApiSourcesSourceIdAttachPostData,
  AttachSourceToAgentApiSourcesSourceIdAttachPostResponse,
  DetachSourceFromAgentApiSourcesSourceIdDetachPostData,
  DetachSourceFromAgentApiSourcesSourceIdDetachPostResponse,
  GetJobApiSourcesStatusJobIdGetData,
  GetJobApiSourcesStatusJobIdGetResponse,
  UploadFileToSourceApiSourcesSourceIdUploadPostData,
  UploadFileToSourceApiSourcesSourceIdUploadPostResponse,
  ListPassagesApiSourcesSourceIdPassagesGetData,
  ListPassagesApiSourcesSourceIdPassagesGetResponse,
  ListDocumentsApiSourcesSourceIdDocumentsGetData,
  ListDocumentsApiSourcesSourceIdDocumentsGetResponse,
  GetLlmConfigsApiConfigLlmGetResponse,
  GetEmbeddingConfigsApiConfigEmbeddingGetResponse,
} from './types.gen';

export class AuthService {
  /**
   * Authenticate User
   * Authenticates the user and sends response with User related data.
   *
   * Currently, this is a placeholder that simply returns a UUID placeholder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse Successful Response
   * @throws ApiError
   */
  public static authenticateUserApiAuthPost(
    data: AuthenticateUserApiAuthPostData
  ): CancelablePromise<AuthenticateUserApiAuthPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/auth',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class AdminService {
  /**
   * Get All Users
   * Get a list of all users in the database
   * @param data The data for the request.
   * @param data.cursor
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public static getAllUsersAdminUsersGet(
    data: GetAllUsersAdminUsersGetData = {}
  ): CancelablePromise<GetAllUsersAdminUsersGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/admin/users',
      query: {
        cursor: data.cursor,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create User
   * Create a new user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static createUserAdminUsersPost(
    data: CreateUserAdminUsersPostData
  ): CancelablePromise<CreateUserAdminUsersPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/admin/users',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId The user_id key to be deleted.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static deleteUserAdminUsersDelete(
    data: DeleteUserAdminUsersDeleteData
  ): CancelablePromise<DeleteUserAdminUsersDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/admin/users',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create New Api Key
   * Create a new API key for a user
   * @param data The data for the request.
   * @param data.requestBody
   * @returns APIKey Successful Response
   * @throws ApiError
   */
  public static createNewApiKeyAdminUsersKeysPost(
    data: CreateNewApiKeyAdminUsersKeysPostData
  ): CancelablePromise<CreateNewApiKeyAdminUsersKeysPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/admin/users/keys',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Api Keys
   * Get a list of all API keys for a user
   * @param data The data for the request.
   * @param data.userId The unique identifier of the user.
   * @returns APIKey Successful Response
   * @throws ApiError
   */
  public static getApiKeysAdminUsersKeysGet(
    data: GetApiKeysAdminUsersKeysGetData
  ): CancelablePromise<GetApiKeysAdminUsersKeysGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/admin/users/keys',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Api Key
   * @param data The data for the request.
   * @param data.apiKey The API key to be deleted.
   * @returns APIKey Successful Response
   * @throws ApiError
   */
  public static deleteApiKeyAdminUsersKeysDelete(
    data: DeleteApiKeyAdminUsersKeysDeleteData
  ): CancelablePromise<DeleteApiKeyAdminUsersKeysDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/admin/users/keys',
      query: {
        api_key: data.apiKey,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ToolsService {
  /**
   * Delete Tool
   * Delete a tool by name
   * @param data The data for the request.
   * @param data.toolName
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteToolAdminToolsToolNameDelete(
    data: DeleteToolAdminToolsToolNameDeleteData
  ): CancelablePromise<DeleteToolAdminToolsToolNameDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/admin/tools/{tool_name}',
      path: {
        tool_name: data.toolName,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Tool
   * Get a tool by name
   * @param data The data for the request.
   * @param data.toolName
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static getToolAdminToolsToolNameGet(
    data: GetToolAdminToolsToolNameGetData
  ): CancelablePromise<GetToolAdminToolsToolNameGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/admin/tools/{tool_name}',
      path: {
        tool_name: data.toolName,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List All Tools
   * Get a list of all tools available to agents created by a user
   * @returns ListToolsResponse Successful Response
   * @throws ApiError
   */
  public static listAllToolsAdminToolsGet(): CancelablePromise<ListAllToolsAdminToolsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/admin/tools',
    });
  }

  /**
   * Create Tool
   * Create a new tool
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static createToolAdminToolsPost(
    data: CreateToolAdminToolsPostData
  ): CancelablePromise<CreateToolAdminToolsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/admin/tools',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Tool
   * Delete a tool by name
   * @param data The data for the request.
   * @param data.toolId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteToolApiToolsToolIdDelete(
    data: DeleteToolApiToolsToolIdDeleteData
  ): CancelablePromise<DeleteToolApiToolsToolIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Tool
   * Get a tool by name
   * @param data The data for the request.
   * @param data.toolId
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static getToolApiToolsToolIdGet(
    data: GetToolApiToolsToolIdGetData
  ): CancelablePromise<GetToolApiToolsToolIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Tool
   * Update an existing tool
   * @param data The data for the request.
   * @param data.toolId
   * @param data.requestBody
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static updateToolApiToolsToolIdPost(
    data: UpdateToolApiToolsToolIdPostData
  ): CancelablePromise<UpdateToolApiToolsToolIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Tool Id
   * Get a tool by name
   * @param data The data for the request.
   * @param data.toolName
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getToolIdApiToolsNameToolNameGet(
    data: GetToolIdApiToolsNameToolNameGetData
  ): CancelablePromise<GetToolIdApiToolsNameToolNameGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/tools/name/{tool_name}',
      path: {
        tool_name: data.toolName,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List All Tools
   * Get a list of all tools available to agents created by a user
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static listAllToolsApiToolsGet(): CancelablePromise<ListAllToolsApiToolsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/tools',
    });
  }

  /**
   * Create Tool
   * Create a new tool
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Tool_Output Successful Response
   * @throws ApiError
   */
  public static createToolApiToolsPost(
    data: CreateToolApiToolsPostData
  ): CancelablePromise<CreateToolApiToolsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/tools',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class AgentsService {
  /**
   * Get All Agents
   * Get a list of all agents in the database
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static getAllAgentsApiAdminAgentsGet(): CancelablePromise<GetAllAgentsApiAdminAgentsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/admin/agents',
    });
  }

  /**
   * List Agents
   * List all agents associated with a given user.
   *
   * This endpoint retrieves a list of all agents and their configurations associated with the specified user ID.
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static listAgentsApiAgentsGet(): CancelablePromise<ListAgentsApiAgentsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents',
    });
  }

  /**
   * Create Agent
   * Create a new agent with the specified configuration.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static createAgentApiAgentsPost(
    data: CreateAgentApiAgentsPostData
  ): CancelablePromise<CreateAgentApiAgentsPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/agents',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent
   * Update an exsiting agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static updateAgentApiAgentsAgentIdPost(
    data: UpdateAgentApiAgentsAgentIdPostData
  ): CancelablePromise<UpdateAgentApiAgentsAgentIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent State
   * Get the state of the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static getAgentStateApiAgentsAgentIdGet(
    data: GetAgentStateApiAgentsAgentIdGetData
  ): CancelablePromise<GetAgentStateApiAgentsAgentIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent
   * Delete an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteAgentApiAgentsAgentIdDelete(
    data: DeleteAgentApiAgentsAgentIdDeleteData
  ): CancelablePromise<DeleteAgentApiAgentsAgentIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Sources
   * Get the sources associated with an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static getAgentSourcesApiAgentsAgentIdSourcesGet(
    data: GetAgentSourcesApiAgentsAgentIdSourcesGetData
  ): CancelablePromise<GetAgentSourcesApiAgentsAgentIdSourcesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/sources',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent In Context Messages
   * Retrieve the messages in the context of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns memgpt__schemas__message__Message Successful Response
   * @throws ApiError
   */
  public static getAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGet(
    data: GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetData
  ): CancelablePromise<GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/memory/messages',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Memory
   * Retrieve the memory state of a specific agent.
   *
   * This endpoint fetches the current memory state of the agent identified by the user ID and agent ID.
   * @param data The data for the request.
   * @param data.agentId
   * @returns Memory Successful Response
   * @throws ApiError
   */
  public static getAgentMemoryApiAgentsAgentIdMemoryGet(
    data: GetAgentMemoryApiAgentsAgentIdMemoryGetData
  ): CancelablePromise<GetAgentMemoryApiAgentsAgentIdMemoryGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/memory',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Agent Memory
   * Update the core memory of a specific agent.
   *
   * This endpoint accepts new memory contents (human and persona) and updates the core memory of the agent identified by the user ID and agent ID.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns Memory Successful Response
   * @throws ApiError
   */
  public static updateAgentMemoryApiAgentsAgentIdMemoryPost(
    data: UpdateAgentMemoryApiAgentsAgentIdMemoryPostData
  ): CancelablePromise<UpdateAgentMemoryApiAgentsAgentIdMemoryPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/agents/{agent_id}/memory',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Recall Memory Summary
   * Retrieve the summary of the recall memory of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns RecallMemorySummary Successful Response
   * @throws ApiError
   */
  public static getAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGet(
    data: GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetData
  ): CancelablePromise<GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/memory/recall',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Archival Memory Summary
   * Retrieve the summary of the archival memory of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @returns ArchivalMemorySummary Successful Response
   * @throws ApiError
   */
  public static getAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGet(
    data: GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetData
  ): CancelablePromise<GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/memory/archival',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Archival Memory
   * Retrieve the memories in an agent's archival memory store (paginated query).
   * @param data The data for the request.
   * @param data.agentId
   * @param data.after Unique ID of the memory to start the query range at.
   * @param data.before Unique ID of the memory to end the query range at.
   * @param data.limit How many results to include in the response.
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static getAgentArchivalMemoryApiAgentsAgentIdArchivalGet(
    data: GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetData
  ): CancelablePromise<GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/archival',
      path: {
        agent_id: data.agentId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Insert Agent Archival Memory
   * Insert a memory into an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static insertAgentArchivalMemoryApiAgentsAgentIdArchivalPost(
    data: InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostData
  ): CancelablePromise<InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/agents/{agent_id}/archival',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Agent Archival Memory
   * Delete a memory from an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.memoryId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDelete(
    data: DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteData
  ): CancelablePromise<DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/agents/{agent_id}/archival/{memory_id}',
      path: {
        agent_id: data.agentId,
        memory_id: data.memoryId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Messages In Context
   * Retrieve the in-context messages of a specific agent. Paginated, provide start and count to iterate.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.start Message index to start on (reverse chronological).
   * @param data.count How many messages to retrieve.
   * @returns memgpt__schemas__message__Message Successful Response
   * @throws ApiError
   */
  public static getAgentMessagesInContextApiAgentsAgentIdMessagesContextGet(
    data: GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetData
  ): CancelablePromise<GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/messages/context/',
      path: {
        agent_id: data.agentId,
      },
      query: {
        start: data.start,
        count: data.count,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Agent Messages
   * Retrieve message history for an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.before Message before which to retrieve the returned messages.
   * @param data.limit Maximum number of messages to retrieve.
   * @returns memgpt__schemas__message__Message Successful Response
   * @throws ApiError
   */
  public static getAgentMessagesApiAgentsAgentIdMessagesGet(
    data: GetAgentMessagesApiAgentsAgentIdMessagesGetData
  ): CancelablePromise<GetAgentMessagesApiAgentsAgentIdMessagesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      query: {
        before: data.before,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Send Message
   * Process a user message and return the agent's response.
   *
   * This endpoint accepts a message from a user and processes it through the agent.
   * It can optionally stream the response if 'stream' is set to True.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns MemGPTResponse Successful Response
   * @throws ApiError
   */
  public static sendMessageApiAgentsAgentIdMessagesPost(
    data: SendMessageApiAgentsAgentIdMessagesPostData
  ): CancelablePromise<SendMessageApiAgentsAgentIdMessagesPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class BlockService {
  /**
   * List Blocks
   * @param data The data for the request.
   * @param data.label Labels to include (e.g. human, persona)
   * @param data.templatesOnly Whether to include only templates
   * @param data.name Name of the block
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static listBlocksApiBlocksGet(
    data: ListBlocksApiBlocksGetData = {}
  ): CancelablePromise<ListBlocksApiBlocksGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/blocks',
      query: {
        label: data.label,
        templates_only: data.templatesOnly,
        name: data.name,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Create Block
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static createBlockApiBlocksPost(
    data: CreateBlockApiBlocksPostData
  ): CancelablePromise<CreateBlockApiBlocksPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/blocks',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.requestBody
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static updateBlockApiBlocksBlockIdPost(
    data: UpdateBlockApiBlocksBlockIdPostData
  ): CancelablePromise<UpdateBlockApiBlocksBlockIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Block
   * @param data The data for the request.
   * @param data.blockId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static deleteBlockApiBlocksBlockIdDelete(
    data: DeleteBlockApiBlocksBlockIdDeleteData
  ): CancelablePromise<DeleteBlockApiBlocksBlockIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Block
   * @param data The data for the request.
   * @param data.blockId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static getBlockApiBlocksBlockIdGet(
    data: GetBlockApiBlocksBlockIdGetData
  ): CancelablePromise<GetBlockApiBlocksBlockIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class JobsService {
  /**
   * List Jobs
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listJobsApiJobsGet(): CancelablePromise<ListJobsApiJobsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/jobs',
    });
  }

  /**
   * List Active Jobs
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listActiveJobsApiJobsActiveGet(): CancelablePromise<ListActiveJobsApiJobsActiveGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/jobs/active',
    });
  }

  /**
   * Get Job
   * @param data The data for the request.
   * @param data.jobId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static getJobApiJobsJobIdGet(
    data: GetJobApiJobsJobIdGetData
  ): CancelablePromise<GetJobApiJobsJobIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/jobs/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ModelsService {
  /**
   * List Models
   * @returns ListModelsResponse Successful Response
   * @throws ApiError
   */
  public static listModelsApiModelsGet(): CancelablePromise<ListModelsApiModelsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/models',
    });
  }
}

export class SourcesService {
  /**
   * Get Source
   * Get all sources
   * @param data The data for the request.
   * @param data.sourceId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static getSourceApiSourcesSourceIdGet(
    data: GetSourceApiSourcesSourceIdGetData
  ): CancelablePromise<GetSourceApiSourcesSourceIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Update Source
   * Update the name or documentation of an existing data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.requestBody
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static updateSourceApiSourcesSourceIdPost(
    data: UpdateSourceApiSourcesSourceIdPostData
  ): CancelablePromise<UpdateSourceApiSourcesSourceIdPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Delete Source
   * Delete a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteSourceApiSourcesSourceIdDelete(
    data: DeleteSourceApiSourcesSourceIdDeleteData
  ): CancelablePromise<DeleteSourceApiSourcesSourceIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/api/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Source Id By Name
   * Get a source by name
   * @param data The data for the request.
   * @param data.sourceName
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getSourceIdByNameApiSourcesNameSourceNameGet(
    data: GetSourceIdByNameApiSourcesNameSourceNameGetData
  ): CancelablePromise<GetSourceIdByNameApiSourcesNameSourceNameGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources/name/{source_name}',
      path: {
        source_name: data.sourceName,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Sources
   * List all data sources created by a user.
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static listSourcesApiSourcesGet(): CancelablePromise<ListSourcesApiSourcesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources',
    });
  }

  /**
   * Create Source
   * Create a new data source.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static createSourceApiSourcesPost(
    data: CreateSourceApiSourcesPostData
  ): CancelablePromise<CreateSourceApiSourcesPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/sources',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Attach Source To Agent
   * Attach a data source to an existing agent.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.agentId The unique identifier of the agent to attach the source to.
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static attachSourceToAgentApiSourcesSourceIdAttachPost(
    data: AttachSourceToAgentApiSourcesSourceIdAttachPostData
  ): CancelablePromise<AttachSourceToAgentApiSourcesSourceIdAttachPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/sources/{source_id}/attach',
      path: {
        source_id: data.sourceId,
      },
      query: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Detach Source From Agent
   * Detach a data source from an existing agent.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.agentId The unique identifier of the agent to detach the source from.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static detachSourceFromAgentApiSourcesSourceIdDetachPost(
    data: DetachSourceFromAgentApiSourcesSourceIdDetachPostData
  ): CancelablePromise<DetachSourceFromAgentApiSourcesSourceIdDetachPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/sources/{source_id}/detach',
      path: {
        source_id: data.sourceId,
      },
      query: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Get Job
   * Get the status of a job.
   * @param data The data for the request.
   * @param data.jobId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static getJobApiSourcesStatusJobIdGet(
    data: GetJobApiSourcesStatusJobIdGetData
  ): CancelablePromise<GetJobApiSourcesStatusJobIdGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources/status/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * Upload File To Source
   * Upload a file to a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.formData
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static uploadFileToSourceApiSourcesSourceIdUploadPost(
    data: UploadFileToSourceApiSourcesSourceIdUploadPostData
  ): CancelablePromise<UploadFileToSourceApiSourcesSourceIdUploadPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/api/sources/{source_id}/upload',
      path: {
        source_id: data.sourceId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Passages
   * List all passages associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static listPassagesApiSourcesSourceIdPassagesGet(
    data: ListPassagesApiSourcesSourceIdPassagesGetData
  ): CancelablePromise<ListPassagesApiSourcesSourceIdPassagesGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources/{source_id}/passages ',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }

  /**
   * List Documents
   * List all documents associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @returns Document Successful Response
   * @throws ApiError
   */
  public static listDocumentsApiSourcesSourceIdDocumentsGet(
    data: ListDocumentsApiSourcesSourceIdDocumentsGetData
  ): CancelablePromise<ListDocumentsApiSourcesSourceIdDocumentsGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/sources/{source_id}/documents',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
    });
  }
}

export class ConfigService {
  /**
   * Get Llm Configs
   * Retrieve the base configuration for the server.
   * @returns LLMConfig Successful Response
   * @throws ApiError
   */
  public static getLlmConfigsApiConfigLlmGet(): CancelablePromise<GetLlmConfigsApiConfigLlmGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/config/llm',
    });
  }

  /**
   * Get Embedding Configs
   * Retrieve the base configuration for the server.
   * @returns EmbeddingConfig Successful Response
   * @throws ApiError
   */
  public static getEmbeddingConfigsApiConfigEmbeddingGet(): CancelablePromise<GetEmbeddingConfigsApiConfigEmbeddingGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/api/config/embedding',
    });
  }
}
