// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  DeleteToolData,
  DeleteToolResponse,
  RetrieveToolData,
  RetrieveToolResponse,
  ModifyToolData,
  ModifyToolResponse,
  ListToolsData,
  ListToolsResponse,
  CreateToolData,
  CreateToolResponse,
  UpsertToolData,
  UpsertToolResponse,
  AddBaseToolsData,
  AddBaseToolsResponse,
  RunToolFromSourceData,
  RunToolFromSourceResponse,
  ListComposioAppsData,
  ListComposioAppsResponse,
  ListComposioActionsByAppData,
  ListComposioActionsByAppResponse,
  AddComposioToolData,
  AddComposioToolResponse,
  RetrieveSourceData,
  RetrieveSourceResponse,
  ModifySourceData,
  ModifySourceResponse,
  DeleteSourceData,
  DeleteSourceResponse,
  GetSourceIdByNameData,
  GetSourceIdByNameResponse,
  ListSourcesData,
  ListSourcesResponse,
  CreateSourceData,
  CreateSourceResponse,
  UploadFileToSourceData,
  UploadFileToSourceResponse,
  ListSourcePassagesData,
  ListSourcePassagesResponse,
  ListSourceFilesData,
  ListSourceFilesResponse,
  DeleteFileFromSourceData,
  DeleteFileFromSourceResponse,
  ListAgentsData,
  ListAgentsResponse,
  CreateAgentData,
  CreateAgentResponse,
  RetrieveAgentContextWindowData,
  RetrieveAgentContextWindowResponse,
  ModifyAgentData,
  ModifyAgentResponse,
  RetrieveAgentData,
  RetrieveAgentResponse,
  DeleteAgentData,
  DeleteAgentResponse,
  ListAgentToolsData,
  ListAgentToolsResponse,
  AttachToolData,
  AttachToolResponse,
  DetachToolData,
  DetachToolResponse,
  AttachSourceToAgentData,
  AttachSourceToAgentResponse,
  DetachSourceFromAgentData,
  DetachSourceFromAgentResponse,
  ListAgentSourcesData,
  ListAgentSourcesResponse,
  RetrieveAgentMemoryData,
  RetrieveAgentMemoryResponse,
  RetrieveCoreMemoryBlockData,
  RetrieveCoreMemoryBlockResponse,
  ModifyCoreMemoryBlockData,
  ModifyCoreMemoryBlockResponse,
  ListCoreMemoryBlocksData,
  ListCoreMemoryBlocksResponse,
  AttachCoreMemoryBlockData,
  AttachCoreMemoryBlockResponse,
  DetachCoreMemoryBlockData,
  DetachCoreMemoryBlockResponse,
  ListArchivalMemoryData,
  ListArchivalMemoryResponse,
  CreateArchivalMemoryData,
  CreateArchivalMemoryResponse,
  DeleteArchivalMemoryData,
  DeleteArchivalMemoryResponse,
  ListMessagesData,
  ListMessagesResponse,
  SendMessageData,
  SendMessageResponse,
  ModifyMessageData,
  ModifyMessageResponse,
  CreateAgentMessageStreamData,
  CreateAgentMessageStreamResponse,
  CreateAgentMessageAsyncData,
  CreateAgentMessageAsyncResponse,
  ResetMessagesData,
  ResetMessagesResponse,
  ListModelsResponse,
  ListEmbeddingModelsResponse,
  ListBlocksData,
  ListBlocksResponse,
  CreateBlockData,
  CreateBlockResponse,
  ModifyBlockData,
  ModifyBlockResponse,
  DeleteBlockData,
  DeleteBlockResponse,
  RetrieveBlockData,
  RetrieveBlockResponse,
  ListAgentsForBlockData,
  ListAgentsForBlockResponse,
  ListJobsData,
  ListJobsResponse,
  ListActiveJobsData,
  ListActiveJobsResponse,
  RetrieveJobData,
  RetrieveJobResponse,
  DeleteJobData,
  DeleteJobResponse,
  HealthCheckResponse,
  CreateSandboxConfigV1SandboxConfigPostData,
  CreateSandboxConfigV1SandboxConfigPostResponse,
  ListSandboxConfigsV1SandboxConfigGetData,
  ListSandboxConfigsV1SandboxConfigGetResponse,
  CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostData,
  CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostResponse,
  CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostData,
  CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostResponse,
  UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchData,
  UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchResponse,
  DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteData,
  DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteResponse,
  CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostData,
  CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostResponse,
  ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetData,
  ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetResponse,
  UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchData,
  UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchResponse,
  DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteData,
  DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteResponse,
  ListProvidersData,
  ListProvidersResponse,
  CreateProviderData,
  CreateProviderResponse,
  ModifyProviderData,
  ModifyProviderResponse,
  DeleteProviderData,
  DeleteProviderResponse,
  ListRunsData,
  ListRunsResponse,
  ListActiveRunsData,
  ListActiveRunsResponse,
  RetrieveRunData,
  RetrieveRunResponse,
  DeleteRunData,
  DeleteRunResponse,
  ListRunMessagesData,
  ListRunMessagesResponse,
  RetrieveRunUsageData,
  RetrieveRunUsageResponse,
  ListTagsData,
  ListTagsResponse,
  ListUsersData,
  ListUsersResponse,
  CreateUserData,
  CreateUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserResponse,
  ListOrgsData,
  ListOrgsResponse,
  CreateOrganizationData,
  CreateOrganizationResponse,
  DeleteOrganizationByIdData,
  DeleteOrganizationByIdResponse,
  AuthenticateUserV1AuthPostData,
  AuthenticateUserV1AuthPostResponse,
} from './types.gen';

export class ToolsService {
  /**
   * Delete Tool
   * Delete a tool by name
   * @param data The data for the request.
   * @param data.toolId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteTool(
    data: DeleteToolData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteToolResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Tool
   * Get a tool by ID
   * @param data The data for the request.
   * @param data.toolId
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static retrieveTool(
    data: RetrieveToolData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveToolResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Tool
   * Update an existing tool
   * @param data The data for the request.
   * @param data.toolId
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static modifyTool(
    data: ModifyToolData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Tools
   * Get a list of all tools available to agents belonging to the org of the user
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static listTools(
    data: ListToolsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListToolsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Tool
   * Create a new tool
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static createTool(
    data: CreateToolData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateToolResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Tool
   * Create or update a tool
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static upsertTool(
    data: UpsertToolData,
    headers?: { user_id: string },
  ): CancelablePromise<UpsertToolResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/tools/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Base Tools
   * Upsert base tools
   * @param data The data for the request.
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static addBaseTools(
    data: AddBaseToolsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<AddBaseToolsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/add-base-tools',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Run Tool From Source
   * Attempt to build a tool from source, then run it on the provided arguments
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns ToolReturnMessage Successful Response
   * @throws ApiError
   */
  public static runToolFromSource(
    data: RunToolFromSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<RunToolFromSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/run',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Composio Apps
   * Get a list of all Composio apps
   * @param data The data for the request.
   * @param data.userId
   * @returns AppModel Successful Response
   * @throws ApiError
   */
  public static listComposioApps(
    data: ListComposioAppsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListComposioAppsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/composio/apps',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Composio Actions By App
   * Get a list of all Composio actions for a specific app
   * @param data The data for the request.
   * @param data.composioAppName
   * @param data.userId
   * @returns ActionModel Successful Response
   * @throws ApiError
   */
  public static listComposioActionsByApp(
    data: ListComposioActionsByAppData,
    headers?: { user_id: string },
  ): CancelablePromise<ListComposioActionsByAppResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/composio/apps/{composio_app_name}/actions',
      path: {
        composio_app_name: data.composioAppName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Add Composio Tool
   * Add a new Composio tool by action name (Composio refers to each tool as an `Action`)
   * @param data The data for the request.
   * @param data.composioActionName
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static addComposioTool(
    data: AddComposioToolData,
    headers?: { user_id: string },
  ): CancelablePromise<AddComposioToolResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/composio/{composio_action_name}',
      path: {
        composio_action_name: data.composioActionName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class SourcesService {
  /**
   * Retrieve Source
   * Get all sources
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static retrieveSource(
    data: RetrieveSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveSourceResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Source
   * Update the name or documentation of an existing data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.requestBody
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static modifySource(
    data: ModifySourceData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifySourceResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Source
   * Delete a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteSource(
    data: DeleteSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSourceResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get Source Id By Name
   * Get a source by name
   * @param data The data for the request.
   * @param data.sourceName
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getSourceIdByName(
    data: GetSourceIdByNameData,
    headers?: { user_id: string },
  ): CancelablePromise<GetSourceIdByNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/name/{source_name}',
      path: {
        source_name: data.sourceName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sources
   * List all data sources created by a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static listSources(
    data: ListSourcesData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListSourcesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Source
   * Create a new data source.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static createSource(
    data: CreateSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sources/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upload File To Source
   * Upload a file to a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.formData
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static uploadFileToSource(
    data: UploadFileToSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<UploadFileToSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sources/{source_id}/upload',
      path: {
        source_id: data.sourceId,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Source Passages
   * List all passages associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static listSourcePassages(
    data: ListSourcePassagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSourcePassagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/passages',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Source Files
   * List paginated files associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.limit Number of files to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.userId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public static listSourceFiles(
    data: ListSourceFilesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSourceFilesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/files',
      path: {
        source_id: data.sourceId,
      },
      query: {
        limit: data.limit,
        after: data.after,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete File From Source
   * Delete a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.fileId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteFileFromSource(
    data: DeleteFileFromSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteFileFromSourceResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sources/{source_id}/{file_id}',
      path: {
        source_id: data.sourceId,
        file_id: data.fileId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AgentsService {
  /**
   * List Agents
   * List all agents associated with a given user.
   * This endpoint retrieves a list of all agents and their configurations associated with the specified user ID.
   * @param data The data for the request.
   * @param data.name Name of the agent
   * @param data.tags List of tags to filter agents by
   * @param data.matchAllTags If True, only returns agents that match ALL given tags. Otherwise, return agents that have ANY of the passed in tags.
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Limit for pagination
   * @param data.queryText Search agents by name
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static listAgents(
    data: ListAgentsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/',
      query: {
        name: data.name,
        tags: data.tags,
        match_all_tags: data.matchAllTags,
        before: data.before,
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Agent
   * Create a new agent with the specified configuration.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static createAgent(
    data: CreateAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent Context Window
   * Retrieve the context window of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns ContextWindowOverview Successful Response
   * @throws ApiError
   */
  public static retrieveAgentContextWindow(
    data: RetrieveAgentContextWindowData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentContextWindowResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/context',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Agent
   * Update an existing agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static modifyAgent(
    data: ModifyAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent
   * Get the state of the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static retrieveAgent(
    data: RetrieveAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Agent
   * Delete an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteAgent(
    data: DeleteAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteAgentResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agent Tools
   * Get tools from an existing agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static listAgentTools(
    data: ListAgentToolsData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentToolsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/tools',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Tool
   * Attach a tool to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachTool(
    data: AttachToolData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/tools/attach/{tool_id}',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Tool
   * Detach a tool from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachTool(
    data: DetachToolData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/tools/detach/{tool_id}',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Source
   * Attach a source to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.sourceId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachSourceToAgent(
    data: AttachSourceToAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachSourceToAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/sources/attach/{source_id}',
      path: {
        agent_id: data.agentId,
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Source
   * Detach a source from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.sourceId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachSourceFromAgent(
    data: DetachSourceFromAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachSourceFromAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/sources/detach/{source_id}',
      path: {
        agent_id: data.agentId,
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agent Sources
   * Get the sources associated with an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static listAgentSources(
    data: ListAgentSourcesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentSourcesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/sources',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent Memory
   * Retrieve the memory state of a specific agent.
   * This endpoint fetches the current memory state of the agent identified by the user ID and agent ID.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Memory Successful Response
   * @throws ApiError
   */
  public static retrieveAgentMemory(
    data: RetrieveAgentMemoryData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentMemoryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Core Memory Block
   * Retrieve a memory block from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockLabel
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static retrieveCoreMemoryBlock(
    data: RetrieveCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory/blocks/{block_label}',
      path: {
        agent_id: data.agentId,
        block_label: data.blockLabel,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Core Memory Block
   * Updates a memory block of an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockLabel
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static modifyCoreMemoryBlock(
    data: ModifyCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/{block_label}',
      path: {
        agent_id: data.agentId,
        block_label: data.blockLabel,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Core Memory Blocks
   * Retrieve the memory blocks of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static listCoreMemoryBlocks(
    data: ListCoreMemoryBlocksData,
    headers?: { user_id: string },
  ): CancelablePromise<ListCoreMemoryBlocksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory/blocks',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Core Memory Block
   * Attach a block to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachCoreMemoryBlock(
    data: AttachCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/attach/{block_id}',
      path: {
        agent_id: data.agentId,
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Core Memory Block
   * Detach a block from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachCoreMemoryBlock(
    data: DetachCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/detach/{block_id}',
      path: {
        agent_id: data.agentId,
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Archival Memory
   * Retrieve the memories in an agent's archival memory store (paginated query).
   * @param data The data for the request.
   * @param data.agentId
   * @param data.after Unique ID of the memory to start the query range at.
   * @param data.before Unique ID of the memory to end the query range at.
   * @param data.limit How many results to include in the response.
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static listArchivalMemory(
    data: ListArchivalMemoryData,
    headers?: { user_id: string },
  ): CancelablePromise<ListArchivalMemoryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/archival-memory',
      path: {
        agent_id: data.agentId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Archival Memory
   * Insert a memory into an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static createArchivalMemory(
    data: CreateArchivalMemoryData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateArchivalMemoryResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/archival-memory',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Archival Memory
   * Delete a memory from an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.memoryId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteArchivalMemory(
    data: DeleteArchivalMemoryData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteArchivalMemoryResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/agents/{agent_id}/archival-memory/{memory_id}',
      path: {
        agent_id: data.agentId,
        memory_id: data.memoryId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Messages
   * Retrieve message history for an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.after Message after which to retrieve the returned messages.
   * @param data.before Message before which to retrieve the returned messages.
   * @param data.limit Maximum number of messages to retrieve.
   * @param data.msgObject If true, returns Message objects. If false, return LettaMessage objects.
   * @param data.config Configuration options for the LettaRequest.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static listMessages(
    data: ListMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
        msg_object: data.msgObject,
        config: data.config,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message
   * Process a user message and return the agent's response.
   * This endpoint accepts a message from a user and processes it through the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns LettaResponse Successful Response
   * @throws ApiError
   */
  public static sendMessage(
    data: SendMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<SendMessageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Message
   * Update the details of a message associated with an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.messageId
   * @param data.requestBody
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static modifyMessage(
    data: ModifyMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyMessageResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/messages/{message_id}',
      path: {
        agent_id: data.agentId,
        message_id: data.messageId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message Streaming
   * Process a user message and return the agent's response.
   * This endpoint accepts a message from a user and processes it through the agent.
   * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful response
   * @throws ApiError
   */
  public static createAgentMessageStream(
    data: CreateAgentMessageStreamData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentMessageStreamResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/stream',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message Async
   * Asynchronously process a user message and return a run object.
   * The actual processing happens in the background, and the status can be checked using the run ID.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static createAgentMessageAsync(
    data: CreateAgentMessageAsyncData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentMessageAsyncResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/async',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Reset Messages
   * Resets the messages for an agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.addDefaultInitialMessages If true, adds the default initial messages after resetting.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static resetMessages(
    data: ResetMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ResetMessagesResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/reset-messages',
      path: {
        agent_id: data.agentId,
      },
      query: {
        add_default_initial_messages: data.addDefaultInitialMessages,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class ModelsService {
  /**
   * List Llm Backends
   * @returns LLMConfig Successful Response
   * @throws ApiError
   */
  public static listModels(headers?: {
    user_id: string;
  }): CancelablePromise<ListModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/',
      headers,
    });
  }

  /**
   * List Embedding Backends
   * @returns EmbeddingConfig Successful Response
   * @throws ApiError
   */
  public static listEmbeddingModels(headers?: {
    user_id: string;
  }): CancelablePromise<ListEmbeddingModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/embedding',
      headers,
    });
  }
}

export class LlmsService {
  /**
   * List Llm Backends
   * @returns LLMConfig Successful Response
   * @throws ApiError
   */
  public static listModels(headers?: {
    user_id: string;
  }): CancelablePromise<ListModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/',
      headers,
    });
  }

  /**
   * List Embedding Backends
   * @returns EmbeddingConfig Successful Response
   * @throws ApiError
   */
  public static listEmbeddingModels(headers?: {
    user_id: string;
  }): CancelablePromise<ListEmbeddingModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/embedding',
      headers,
    });
  }
}

export class BlocksService {
  /**
   * List Blocks
   * @param data The data for the request.
   * @param data.label Labels to include (e.g. human, persona)
   * @param data.templatesOnly Whether to include only templates
   * @param data.name Name of the block
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static listBlocks(
    data: ListBlocksData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListBlocksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/',
      query: {
        label: data.label,
        templates_only: data.templatesOnly,
        name: data.name,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Block
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static createBlock(
    data: CreateBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateBlockResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/blocks/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static modifyBlock(
    data: ModifyBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static deleteBlock(
    data: DeleteBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteBlockResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static retrieveBlock(
    data: RetrieveBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agents For Block
   * Retrieves all agents associated with the specified block.
   * Raises a 404 if the block does not exist.
   * @param data The data for the request.
   * @param data.blockId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static listAgentsForBlock(
    data: ListAgentsForBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentsForBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/{block_id}/agents',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class JobsService {
  /**
   * List Jobs
   * List all jobs.
   * @param data The data for the request.
   * @param data.sourceId Only list jobs associated with the source.
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listJobs(
    data: ListJobsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListJobsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/',
      query: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Active Jobs
   * List all active jobs.
   * @param data The data for the request.
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listActiveJobs(
    data: ListActiveJobsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListActiveJobsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/active',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Job
   * Get the status of a job.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static retrieveJob(
    data: RetrieveJobData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveJobResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Job
   * Delete a job by its job_id.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static deleteJob(
    data: DeleteJobData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteJobResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/jobs/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class HealthService {
  /**
   * Health Check
   * @returns Health Successful Response
   * @throws ApiError
   */
  public static healthCheck(headers?: {
    user_id: string;
  }): CancelablePromise<HealthCheckResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/health/',
      headers,
    });
  }
}

export class SandboxConfigService {
  /**
   * Create Sandbox Config
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createSandboxConfigV1SandboxConfigPost(
    data: CreateSandboxConfigV1SandboxConfigPostData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSandboxConfigV1SandboxConfigPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sandbox Configs
   * @param data The data for the request.
   * @param data.limit Number of results to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.sandboxType Filter for this specific sandbox type
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static listSandboxConfigsV1SandboxConfigGet(
    data: ListSandboxConfigsV1SandboxConfigGetData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListSandboxConfigsV1SandboxConfigGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sandbox-config/',
      query: {
        limit: data.limit,
        after: data.after,
        sandbox_type: data.sandboxType,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Default E2B Sandbox Config
   * @param data The data for the request.
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPost(
    data: CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/e2b/default',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Default Local Sandbox Config
   * @param data The data for the request.
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPost(
    data: CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/local/default',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Sandbox Config
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static updateSandboxConfigV1SandboxConfigSandboxConfigIdPatch(
    data: UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sandbox-config/{sandbox_config_id}',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Sandbox Config
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteSandboxConfigV1SandboxConfigSandboxConfigIdDelete(
    data: DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sandbox-config/{sandbox_config_id}',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Sandbox Env Var
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static createSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePost(
    data: CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/{sandbox_config_id}/environment-variable',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sandbox Env Vars
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.limit Number of results to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static listSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGet(
    data: ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sandbox-config/{sandbox_config_id}/environment-variable',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      query: {
        limit: data.limit,
        after: data.after,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Sandbox Env Var
   * @param data The data for the request.
   * @param data.envVarId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static updateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatch(
    data: UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sandbox-config/environment-variable/{env_var_id}',
      path: {
        env_var_id: data.envVarId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Sandbox Env Var
   * @param data The data for the request.
   * @param data.envVarId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDelete(
    data: DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sandbox-config/environment-variable/{env_var_id}',
      path: {
        env_var_id: data.envVarId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class ProvidersService {
  /**
   * List Providers
   * Get a list of all custom providers in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static listProviders(
    data: ListProvidersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListProvidersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/providers/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Provider
   * Create a new custom provider
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static createProvider(
    data: CreateProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateProviderResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/providers/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Provider
   * Update an existing custom provider
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static modifyProvider(
    data: ModifyProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyProviderResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/providers/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Provider
   * Delete an existing custom provider
   * @param data The data for the request.
   * @param data.providerId The provider_id key to be deleted.
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteProvider(
    data: DeleteProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteProviderResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/providers/',
      query: {
        provider_id: data.providerId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class RunsService {
  /**
   * List Runs
   * List all runs.
   * @param data The data for the request.
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static listRuns(
    data: ListRunsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Active Runs
   * List all active runs.
   * @param data The data for the request.
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static listActiveRuns(
    data: ListActiveRunsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListActiveRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/active',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Run
   * Get the status of a run.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static retrieveRun(
    data: RetrieveRunData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveRunResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Run
   * Delete a run by its run_id.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static deleteRun(
    data: DeleteRunData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteRunResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/runs/{run_id}',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Run Messages
   * Get messages associated with a run with filtering options.
   *
   * Args:
   * run_id: ID of the run
   * before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   * after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   * limit: Maximum number of messages to return
   * order: Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   * role: Filter by role (user/assistant/system/tool)
   * return_message_object: Whether to return Message objects or LettaMessage objects
   * user_id: ID of the user making the request
   *
   * Returns:
   * A list of messages associated with the run. Default is List[LettaMessage].
   * @param data The data for the request.
   * @param data.runId
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Maximum number of messages to return
   * @param data.order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   * @param data.role Filter by role
   * @param data.userId
   * @returns LettaMessageUnion Successful Response
   * @throws ApiError
   */
  public static listRunMessages(
    data: ListRunMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListRunMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}/messages',
      path: {
        run_id: data.runId,
      },
      query: {
        before: data.before,
        after: data.after,
        limit: data.limit,
        order: data.order,
        role: data.role,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Run Usage
   * Get usage statistics for a run.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns UsageStatistics Successful Response
   * @throws ApiError
   */
  public static retrieveRunUsage(
    data: RetrieveRunUsageData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveRunUsageResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}/usage',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class TagService {
  /**
   * List Tags
   * Get a list of all tags in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.queryText
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static listTags(
    data: ListTagsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tags/',
      query: {
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AdminService {
  /**
   * List Tags
   * Get a list of all tags in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.queryText
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static listTags(
    data: ListTagsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tags/',
      query: {
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Users
   * Get a list of all users in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public static listUsers(
    data: ListUsersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/users/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create User
   * Create a new user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update User
   * Update a user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId The user_id key to be deleted.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/users/',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get All Orgs
   * Get a list of all orgs in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static listOrgs(
    data: ListOrgsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListOrgsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/orgs/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Org
   * Create a new org in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static createOrganization(
    data: CreateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/orgs/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be deleted.
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static deleteOrganizationById(
    data: DeleteOrganizationByIdData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class UsersService {
  /**
   * List Users
   * Get a list of all users in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public static listUsers(
    data: ListUsersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/users/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create User
   * Create a new user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update User
   * Update a user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId The user_id key to be deleted.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/users/',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class OrganizationService {
  /**
   * Get All Orgs
   * Get a list of all orgs in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static listOrgs(
    data: ListOrgsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListOrgsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/orgs/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Org
   * Create a new org in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static createOrganization(
    data: CreateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/orgs/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be deleted.
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static deleteOrganizationById(
    data: DeleteOrganizationByIdData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AuthService {
  /**
   * Authenticate User
   * Authenticates the user and sends response with User related data.
   *
   * Currently, this is a placeholder that simply returns a UUID placeholder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse Successful Response
   * @throws ApiError
   */
  public static authenticateUserV1AuthPost(
    data: AuthenticateUserV1AuthPostData,
    headers?: { user_id: string },
  ): CancelablePromise<AuthenticateUserV1AuthPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/auth',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}
