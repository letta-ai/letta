// This file is auto-generated by @hey-api/openapi-ts

export type APIKey = {
  /**
   * The human-friendly ID of the Sk
   */
  id?: string;
  /**
   * The unique identifier of the user associated with the token.
   */
  user_id: string;
  /**
   * The key value.
   */
  key: string;
  /**
   * Name of the token.
   */
  name: string;
};

export type APIKeyCreate = {
  /**
   * The unique identifier of the user associated with the token.
   */
  user_id: string;
  /**
   * Name of the token.
   */
  name?: string | null;
};

/**
 * Representation of an agent's state.
 */
export type AgentState = {
  /**
   * The description of the agent.
   */
  description?: string | null;
  /**
   * The metadata of the agent.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The user id of the agent.
   */
  user_id?: string | null;
  /**
   * The human-friendly ID of the Agent
   */
  id?: string;
  /**
   * The name of the agent.
   */
  name: string;
  /**
   * The datetime the agent was created.
   */
  created_at?: string;
  /**
   * The ids of the messages in the agent's in-context memory.
   */
  message_ids?: Array<string> | null;
  /**
   * The in-context memory of the agent.
   */
  memory?: Memory;
  /**
   * The tools used by the agent.
   */
  tools: Array<string>;
  /**
   * The system prompt used by the agent.
   */
  system: string;
  /**
   * The LLM configuration used by the agent.
   */
  llm_config: LLMConfig;
  /**
   * The embedding configuration used by the agent.
   */
  embedding_config: EmbeddingConfig;
};

export type ArchivalMemorySummary = {
  /**
   * Number of rows in archival memory
   */
  size: number;
};

export type AssistantFile = {
  /**
   * The unique identifier of the file.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the file was created.
   */
  created_at: number;
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
};

export type AssistantMessage_Input = {
  content?: string | null;
  role?: string;
  name?: string | null;
  tool_calls?: Array<memgpt__schemas__openai__chat_completion_request__ToolCall> | null;
};

export type AssistantMessage_Output = {
  id: string;
  date: string;
  assistant_message: string;
};

export type AuthRequest = {
  /**
   * Admin password provided when starting the MemGPT server
   */
  password?: string;
};

export type AuthResponse = {
  /**
   * UUID of the user
   */
  uuid: string;
  /**
   * Whether the user is an admin
   */
  is_admin?: boolean | null;
};

/**
 * Block of the LLM context
 */
export type Block = {
  /**
   * Value of the block.
   */
  value: string;
  /**
   * Character limit of the block.
   */
  limit?: number;
  /**
   * Name of the block.
   */
  name?: string | null;
  /**
   * Whether the block is a template (e.g. saved human/persona options).
   */
  template?: boolean;
  /**
   * Label of the block (e.g. 'human', 'persona').
   */
  label?: string | null;
  /**
   * Description of the block.
   */
  description?: string | null;
  /**
   * Metadata of the block.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The unique identifier of the user associated with the block.
   */
  user_id?: string | null;
  /**
   * The human-friendly ID of the Block
   */
  id?: string;
};

export type Body_upload_file_to_source_api_sources__source_id__upload_post = {
  file: Blob | File;
};

/**
 * https://platform.openai.com/docs/api-reference/chat/create
 */
export type ChatCompletionRequest = {
  model: string;
  messages: Array<
    SystemMessage | UserMessage | AssistantMessage_Input | ToolMessage
  >;
  frequency_penalty?: number | null;
  logit_bias?: {
    [key: string]: number;
  } | null;
  logprobs?: boolean | null;
  top_logprobs?: number | null;
  max_tokens?: number | null;
  n?: number | null;
  presence_penalty?: number | null;
  response_format?: ResponseFormat | null;
  seed?: number | null;
  stop?: string | Array<string> | null;
  stream?: boolean | null;
  temperature?: number | null;
  top_p?: number | null;
  user?: string | null;
  tools?: Array<Tool_Input> | null;
  tool_choice?: 'none' | 'auto' | ToolFunctionChoice | null;
  functions?: Array<FunctionSchema> | null;
  function_call?: 'none' | 'auto' | FunctionCall_Input | null;
};

/**
 * https://platform.openai.com/docs/api-reference/chat/object
 */
export type ChatCompletionResponse = {
  id: string;
  choices: Array<Choice>;
  created: string;
  model?: string | null;
  system_fingerprint?: string | null;
  object?: 'chat.completion';
  usage: UsageStatistics;
};

export type Choice = {
  finish_reason: string;
  index: number;
  message: memgpt__schemas__openai__chat_completion_response__Message;
  logprobs?: {
    [key: string]: Array<MessageContentLogProb> | null;
  } | null;
};

export type CreateAgent = {
  /**
   * The description of the agent.
   */
  description?: string | null;
  /**
   * The metadata of the agent.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The user id of the agent.
   */
  user_id?: string | null;
  /**
   * The name of the agent.
   */
  name?: string | null;
  /**
   * The ids of the messages in the agent's in-context memory.
   */
  message_ids?: Array<string> | null;
  /**
   * The in-context memory of the agent.
   */
  memory?: Memory | null;
  /**
   * The tools used by the agent.
   */
  tools?: Array<string> | null;
  /**
   * The system prompt used by the agent.
   */
  system?: string | null;
  /**
   * The LLM configuration used by the agent.
   */
  llm_config?: LLMConfig | null;
  /**
   * The embedding configuration used by the agent.
   */
  embedding_config?: EmbeddingConfig | null;
};

export type CreateArchivalMemory = {
  /**
   * Text to write to archival memory.
   */
  text: string;
};

export type CreateAssistantFileRequest = {
  /**
   * The unique identifier of the file.
   */
  file_id: string;
};

export type CreateAssistantRequest = {
  /**
   * The model to use for the assistant.
   */
  model: string;
  /**
   * The name of the assistant.
   */
  name: string;
  /**
   * The description of the assistant.
   */
  description?: string;
  /**
   * The instructions for the assistant.
   */
  instructions: string;
  /**
   * The tools used by the assistant.
   */
  tools?: Array<string>;
  /**
   * List of file IDs associated with the assistant.
   */
  file_ids?: Array<string>;
  /**
   * Metadata associated with the assistant.
   */
  metadata?: {
    [key: string]: unknown;
  };
  /**
   * The model to use for the assistant.
   */
  embedding_model?: string;
};

/**
 * Create a block
 */
export type CreateBlock = {
  /**
   * Value of the block.
   */
  value?: Array<string> | string | null;
  /**
   * Character limit of the block.
   */
  limit?: number;
  /**
   * Name of the block.
   */
  name?: string | null;
  template?: boolean;
  /**
   * Label of the block.
   */
  label: string;
  /**
   * Description of the block.
   */
  description?: string | null;
  /**
   * Metadata of the block.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The unique identifier of the user associated with the block.
   */
  user_id?: string | null;
};

export type CreateMessageRequest = {
  /**
   * Role of the message sender (either 'user' or 'system')
   */
  role: string;
  /**
   * The message content to be processed by the agent.
   */
  content: string;
  /**
   * List of file IDs associated with the message.
   */
  file_ids?: Array<string> | null;
  /**
   * Metadata associated with the message.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type CreateRunRequest = {
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
  /**
   * The model used by the run.
   */
  model?: string | null;
  /**
   * The instructions for the run.
   */
  instructions: string;
  /**
   * Additional instructions for the run.
   */
  additional_instructions?: string | null;
  /**
   * The tools used by the run (overrides assistant).
   */
  tools?: Array<memgpt__schemas__openai__openai__ToolCall> | null;
  /**
   * Metadata associated with the run.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type CreateThreadRequest = {
  /**
   * List of message IDs associated with the thread.
   */
  messages?: Array<string> | null;
  /**
   * Metadata associated with the thread.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
  /**
   * The name of the assistant (i.e. MemGPT preset)
   */
  assistant_name?: string | null;
};

export type CreateThreadRunRequest = {
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
  /**
   * The thread to run.
   */
  thread: OpenAIThread;
  /**
   * The model used by the run.
   */
  model: string;
  /**
   * The instructions for the run.
   */
  instructions: string;
  /**
   * The tools used by the run (overrides assistant).
   */
  tools?: Array<memgpt__schemas__openai__openai__ToolCall> | null;
  /**
   * Metadata associated with the run.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type CreateToolRequest = {
  /**
   * JSON schema of the tool.
   */
  json_schema: {
    [key: string]: unknown;
  };
  /**
   * The source code of the function.
   */
  source_code: string;
  /**
   * The type of the source code.
   */
  source_type?: 'python' | null;
  /**
   * Metadata tags.
   */
  tags?: Array<string> | null;
};

export type DeleteAssistantFileResponse = {
  /**
   * The unique identifier of the file.
   */
  id: string;
  object?: string;
  /**
   * Whether the file was deleted.
   */
  deleted: boolean;
};

export type DeleteAssistantResponse = {
  /**
   * The unique identifier of the agent.
   */
  id: string;
  object?: string;
  /**
   * Whether the agent was deleted.
   */
  deleted: boolean;
};

export type DeleteThreadResponse = {
  /**
   * The unique identifier of the agent.
   */
  id: string;
  object?: string;
  /**
   * Whether the agent was deleted.
   */
  deleted: boolean;
};

/**
 * Representation of a single document (broken up into `Passage` objects)
 */
export type Document = {
  /**
   * The human-friendly ID of the Doc
   */
  id?: string;
  /**
   * The text of the document.
   */
  text: string;
  /**
   * The unique identifier of the source associated with the document.
   */
  source_id: string;
  /**
   * The unique identifier of the user associated with the document.
   */
  user_id: string;
  /**
   * The metadata of the document.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
};

/**
 * Embedding model configuration
 */
export type EmbeddingConfig = {
  /**
   * The endpoint type for the model.
   */
  embedding_endpoint_type: string;
  /**
   * The endpoint for the model (`None` if local).
   */
  embedding_endpoint?: string | null;
  /**
   * The model for the embedding.
   */
  embedding_model: string;
  /**
   * The dimension of the embedding.
   */
  embedding_dim: number;
  /**
   * The chunk size of the embedding.
   */
  embedding_chunk_size?: number | null;
  /**
   * The Azure endpoint for the model.
   */
  azure_endpoint?: string | null;
  /**
   * The Azure version for the model.
   */
  azure_version?: string | null;
  /**
   * The Azure deployment for the model.
   */
  azure_deployment?: string | null;
};

export type Function = {
  /**
   * The name of the function.
   */
  name: string;
  /**
   * The arguments of the function.
   */
  arguments: string;
};

export type FunctionCall_Input = {
  name: string;
};

export type FunctionCallDelta = {
  name: string | null;
  arguments: string | null;
};

/**
 * {
 * "function_call": {
 * "name": function_call.function.name,
 * "arguments": function_call.function.arguments,
 * },
 * "id": str(msg_obj.id),
 * "date": msg_obj.created_at.isoformat(),
 * }
 */
export type FunctionCallMessage = {
  id: string;
  date: string;
  function_call:
    | memgpt__schemas__memgpt_message__FunctionCall
    | FunctionCallDelta;
};

/**
 * {
 * "function_return": msg,
 * "status": "success" or "error",
 * "id": str(msg_obj.id),
 * "date": msg_obj.created_at.isoformat(),
 * }
 */
export type FunctionReturn = {
  id: string;
  date: string;
  function_return: string;
  status: 'success' | 'error';
};

export type status = 'success' | 'error';

export type FunctionSchema = {
  name: string;
  description?: string | null;
  parameters?: {
    [key: string]: unknown;
  } | null;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type ImageFile = {
  type?: string;
  file_id: string;
};

/**
 * {
 * "internal_monologue": msg,
 * "date": msg_obj.created_at.isoformat() if msg_obj is not None else get_utc_time().isoformat(),
 * "id": str(msg_obj.id) if msg_obj is not None else None,
 * }
 */
export type InternalMonologue = {
  id: string;
  date: string;
  internal_monologue: string;
};

/**
 * Representation of offline jobs.
 */
export type Job = {
  /**
   * The metadata of the job.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The human-friendly ID of the Job
   */
  id?: string;
  /**
   * The status of the job.
   */
  status?: JobStatus;
  /**
   * The unix timestamp of when the job was created.
   */
  created_at?: string;
  /**
   * The unix timestamp of when the job was completed.
   */
  completed_at?: string | null;
  /**
   * The unique identifier of the user associated with the job.
   */
  user_id: string;
};

export type JobStatus =
  | 'created'
  | 'running'
  | 'completed'
  | 'failed'
  | 'pending';

export type LLMConfig = {
  /**
   * LLM model name.
   */
  model: string;
  /**
   * The endpoint type for the model.
   */
  model_endpoint_type: string;
  /**
   * The endpoint for the model.
   */
  model_endpoint: string;
  /**
   * The wrapper for the model.
   */
  model_wrapper?: string | null;
  /**
   * The context window size for the model.
   */
  context_window: number;
};

export type LegacyFunctionCallMessage = {
  id: string;
  date: string;
  function_call: string;
};

export type ListMessagesResponse = {
  /**
   * List of message objects.
   */
  messages: Array<OpenAIMessage>;
};

export type ListModelsResponse = {
  /**
   * List of model configurations.
   */
  models: Array<LLMConfig>;
};

export type ListToolsResponse = {
  /**
   * List of tools (functions).
   */
  tools: Array<Tool_Output>;
};

export type LogProbToken = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
};

export type MemGPTRequest = {
  /**
   * The messages to be sent to the agent.
   */
  messages: Array<MessageCreate>;
  /**
   * Whether to asynchronously send the messages to the agent.
   */
  run_async?: boolean;
  /**
   * Flag to determine if the response should be streamed. Set to True for streaming agent steps.
   */
  stream_steps?: boolean;
  /**
   * Flag to determine if individual tokens should be streamed. Set to True for token streaming (requires stream_steps = True).
   */
  stream_tokens?: boolean;
  /**
   * Set True to return the raw Message object. Set False to return the Message in the format of the MemGPT API.
   */
  return_message_object?: boolean;
};

export type MemGPTResponse = {
  /**
   * The messages returned by the agent.
   */
  messages:
    | Array<memgpt__schemas__message__Message>
    | Array<InternalMonologue | FunctionCallMessage | FunctionReturn>
    | Array<
        | InternalMonologue
        | AssistantMessage_Output
        | LegacyFunctionCallMessage
        | FunctionReturn
      >;
  /**
   * The usage statistics of the agent.
   */
  usage: MemGPTUsageStatistics;
};

export type MemGPTUsageStatistics = {
  /**
   * The number of tokens generated by the agent.
   */
  completion_tokens?: number;
  /**
   * The number of tokens in the prompt.
   */
  prompt_tokens?: number;
  /**
   * The total number of tokens processed by the agent.
   */
  total_tokens?: number;
  /**
   * The number of steps taken by the agent.
   */
  step_count?: number;
};

/**
 * Represents the in-context memory of the agent
 */
export type Memory = {
  /**
   * Mapping from memory block section to memory block.
   */
  memory?: {
    [key: string]: Block;
  };
};

export type MessageContentLogProb = {
  token: string;
  logprob: number;
  bytes: Array<number> | null;
  top_logprobs: Array<LogProbToken> | null;
};

/**
 * Request to create a message
 */
export type MessageCreate = {
  /**
   * The role of the participant.
   */
  role: MessageRole;
  /**
   * The text of the message.
   */
  text: string;
  /**
   * The name of the participant.
   */
  name?: string | null;
};

export type MessageFile = {
  /**
   * The unique identifier of the file.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the file was created.
   */
  created_at: number;
  /**
   * The unique identifier of the message.
   */
  message_id: string;
};

export type MessageRole = 'assistant' | 'user' | 'tool' | 'function' | 'system';

export type ModifyMessageRequest = {
  /**
   * Metadata associated with the message.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type ModifyRunRequest = {
  /**
   * Metadata associated with the run.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type ModifyThreadRequest = {
  /**
   * Metadata associated with the thread.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

/**
 * Represents an OpenAI assistant (equivalent to MemGPT preset)
 */
export type OpenAIAssistant = {
  /**
   * The unique identifier of the assistant.
   */
  id: string;
  /**
   * The name of the assistant.
   */
  name: string;
  object?: string;
  /**
   * The description of the assistant.
   */
  description?: string | null;
  /**
   * The unix timestamp of when the assistant was created.
   */
  created_at: number;
  /**
   * The model used by the assistant.
   */
  model: string;
  /**
   * The instructions for the assistant.
   */
  instructions: string;
  /**
   * The tools used by the assistant.
   */
  tools?: Array<string> | null;
  /**
   * List of file IDs associated with the assistant.
   */
  file_ids?: Array<string> | null;
  /**
   * Metadata associated with the assistant.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type OpenAIError = {
  /**
   * The error code.
   */
  code: string;
  /**
   * The error message.
   */
  message: string;
};

export type OpenAIMessage = {
  /**
   * The unique identifier of the message.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the message was created.
   */
  created_at: number;
  /**
   * The unique identifier of the thread.
   */
  thread_id: string;
  /**
   * Role of the message sender (either 'user' or 'system')
   */
  role: string;
  /**
   * The message content to be processed by the agent.
   */
  content?: Array<Text | ImageFile>;
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
  /**
   * The unique identifier of the run.
   */
  run_id?: string | null;
  /**
   * List of file IDs associated with the message.
   */
  file_ids?: Array<string> | null;
  /**
   * Metadata associated with the message.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type OpenAIMessageCreationStep = {
  type?: string;
  /**
   * The unique identifier of the message.
   */
  message_id: string;
};

export type OpenAIRun = {
  /**
   * The unique identifier of the run.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the run was created.
   */
  created_at: number;
  /**
   * The unique identifier of the thread.
   */
  thread_id: string;
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
  /**
   * The status of the run.
   */
  status: string;
  /**
   * The required action of the run.
   */
  required_action?: RequiredAction | null;
  /**
   * The last error of the run.
   */
  last_error?: OpenAIError | null;
  /**
   * The unix timestamp of when the run expires.
   */
  expires_at: number;
  /**
   * The unix timestamp of when the run started.
   */
  started_at?: number | null;
  /**
   * The unix timestamp of when the run was cancelled.
   */
  cancelled_at?: number | null;
  /**
   * The unix timestamp of when the run failed.
   */
  failed_at?: number | null;
  /**
   * The unix timestamp of when the run completed.
   */
  completed_at?: number | null;
  /**
   * The model used by the run.
   */
  model: string;
  /**
   * The instructions for the run.
   */
  instructions: string;
  /**
   * The tools used by the run.
   */
  tools?: Array<memgpt__schemas__openai__openai__ToolCall> | null;
  /**
   * List of file IDs associated with the run.
   */
  file_ids?: Array<string> | null;
  /**
   * Metadata associated with the run.
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
  /**
   * The usage of the run.
   */
  usage?: OpenAIUsage | null;
};

export type OpenAIRunStep = {
  /**
   * The unique identifier of the run step.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the run step was created.
   */
  created_at: number;
  /**
   * The unique identifier of the assistant.
   */
  assistant_id: string;
  /**
   * The unique identifier of the thread.
   */
  thread_id: string;
  /**
   * The unique identifier of the run.
   */
  run_id: string;
  /**
   * The type of the run step.
   */
  type: string;
  /**
   * The status of the run step.
   */
  status: string;
  /**
   * The step defaults.
   */
  step_defaults: OpenAIToolCallsStep | OpenAIMessageCreationStep;
  /**
   * The last error of the run step.
   */
  last_error?: OpenAIError | null;
  /**
   * The unix timestamp of when the run step expired.
   */
  expired_at?: number | null;
  /**
   * The unix timestamp of when the run failed.
   */
  failed_at?: number | null;
  /**
   * The unix timestamp of when the run completed.
   */
  completed_at?: number | null;
  /**
   * The usage of the run.
   */
  usage?: OpenAIUsage | null;
};

/**
 * Represents an OpenAI thread (equivalent to MemGPT agent)
 */
export type OpenAIThread = {
  /**
   * The unique identifier of the thread.
   */
  id: string;
  object?: string;
  /**
   * The unix timestamp of when the thread was created.
   */
  created_at: number;
  /**
   * Metadata associated with the thread.
   */
  metadata?: {
    [key: string]: unknown;
  };
};

export type OpenAIToolCallsStep = {
  type?: string;
  /**
   * The tool calls.
   */
  tool_calls: Array<memgpt__schemas__openai__openai__ToolCall>;
};

export type OpenAIUsage = {
  /**
   * The number of tokens used for the run.
   */
  completion_tokens: number;
  /**
   * The number of tokens used for the prompt.
   */
  prompt_tokens: number;
  /**
   * The total number of tokens used for the run.
   */
  total_tokens: number;
};

export type Passage = {
  /**
   * The unique identifier of the user associated with the passage.
   */
  user_id?: string | null;
  /**
   * The unique identifier of the agent associated with the passage.
   */
  agent_id?: string | null;
  /**
   * The data source of the passage.
   */
  source_id?: string | null;
  /**
   * The unique identifier of the document associated with the passage.
   */
  doc_id?: string | null;
  /**
   * The metadata of the passage.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The human-friendly ID of the Passage
   */
  id?: string;
  /**
   * The text of the passage.
   */
  text: string;
  /**
   * The embedding of the passage.
   */
  embedding: Array<number> | null;
  /**
   * The embedding configuration used by the passage.
   */
  embedding_config: EmbeddingConfig | null;
  /**
   * The creation date of the passage.
   */
  created_at?: string;
};

export type RecallMemorySummary = {
  /**
   * Number of rows in recall memory
   */
  size: number;
};

export type RequiredAction = {
  type?: string;
  submit_tool_outputs: Array<memgpt__schemas__openai__openai__ToolCall>;
};

export type ResponseFormat = {
  type?: string;
};

export type Source = {
  /**
   * The description of the source.
   */
  description?: string | null;
  /**
   * The embedding configuration used by the source.
   */
  embedding_config: EmbeddingConfig;
  /**
   * Metadata associated with the source.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The human-friendly ID of the Source
   */
  id?: string;
  /**
   * The name of the source.
   */
  name: string;
  /**
   * The creation date of the source.
   */
  created_at?: string;
  /**
   * The ID of the user that created the source.
   */
  user_id: string;
};

export type SourceCreate = {
  /**
   * The description of the source.
   */
  description?: string | null;
  /**
   * The embedding configuration used by the passage.
   */
  embedding_config?: EmbeddingConfig | null;
  /**
   * Metadata associated with the source.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The name of the source.
   */
  name: string;
};

export type SourceUpdate = {
  /**
   * The description of the source.
   */
  description?: string | null;
  /**
   * The embedding configuration used by the passage.
   */
  embedding_config?: EmbeddingConfig | null;
  /**
   * Metadata associated with the source.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The ID of the source.
   */
  id: string;
  /**
   * The name of the source.
   */
  name?: string | null;
};

export type SubmitToolOutputsToRunRequest = {
  /**
   * The tool outputs to submit.
   */
  tools_outputs: Array<ToolCallOutput>;
};

export type SystemMessage = {
  content: string;
  role?: string;
  name?: string | null;
};

export type Text = {
  object?: string;
  /**
   * The text content to be processed by the agent.
   */
  text: string;
};

export type Tool_Input = {
  type?: 'function';
  function: FunctionSchema;
};

export type type = 'function';

export type Tool_Output = {
  /**
   * The description of the tool.
   */
  description?: string | null;
  /**
   * The type of the source code.
   */
  source_type?: string | null;
  /**
   * The module of the function.
   */
  module?: string | null;
  /**
   * The unique identifier of the user associated with the function.
   */
  user_id?: string | null;
  /**
   * The human-friendly ID of the Tool
   */
  id?: string;
  /**
   * The name of the function.
   */
  name: string;
  /**
   * Metadata tags.
   */
  tags: Array<string>;
  /**
   * The source code of the function.
   */
  source_code: string;
  /**
   * The JSON schema of the function.
   */
  json_schema?: {
    [key: string]: unknown;
  };
};

export type ToolCallFunction_Input = {
  name: string;
  arguments: string;
};

export type ToolCallFunction_Output = {
  /**
   * The name of the function to call
   */
  name: string;
  /**
   * The arguments to pass to the function (JSON dump)
   */
  arguments: string;
};

export type ToolCallOutput = {
  /**
   * The unique identifier of the tool call.
   */
  tool_call_id: string;
  /**
   * The output of the tool call.
   */
  output: string;
};

export type ToolCreate = {
  /**
   * The description of the tool.
   */
  description?: string | null;
  /**
   * The type of the source code.
   */
  source_type?: string | null;
  /**
   * The module of the function.
   */
  module?: string | null;
  /**
   * The unique identifier of the user associated with the function.
   */
  user_id?: string | null;
  /**
   * The name of the function (auto-generated from source_code if not provided).
   */
  name?: string | null;
  /**
   * Metadata tags.
   */
  tags: Array<string>;
  /**
   * The source code of the function.
   */
  source_code: string;
  /**
   * The JSON schema of the function (auto-generated from source_code if not provided)
   */
  json_schema?: {
    [key: string]: unknown;
  } | null;
};

export type ToolFunctionChoice = {
  type?: 'function';
  function: FunctionCall_Input;
};

export type ToolMessage = {
  content: string;
  role?: string;
  tool_call_id: string;
};

export type ToolUpdate = {
  /**
   * The description of the tool.
   */
  description?: string | null;
  /**
   * The type of the source code.
   */
  source_type?: string | null;
  /**
   * The module of the function.
   */
  module?: string | null;
  /**
   * The unique identifier of the user associated with the function.
   */
  user_id?: string | null;
  /**
   * The name of the function.
   */
  name?: string | null;
  /**
   * Metadata tags.
   */
  tags?: Array<string> | null;
  /**
   * The source code of the function.
   */
  source_code?: string | null;
  /**
   * The JSON schema of the function.
   */
  json_schema?: {
    [key: string]: unknown;
  } | null;
  /**
   * The unique identifier of the tool.
   */
  id: string;
};

export type UpdateAgentState = {
  /**
   * The description of the agent.
   */
  description?: string | null;
  /**
   * The metadata of the agent.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The user id of the agent.
   */
  user_id?: string | null;
  /**
   * The id of the agent.
   */
  id: string;
  /**
   * The name of the agent.
   */
  name?: string | null;
  /**
   * The tools used by the agent.
   */
  tools?: Array<string> | null;
  /**
   * The system prompt used by the agent.
   */
  system?: string | null;
  /**
   * The LLM configuration used by the agent.
   */
  llm_config?: LLMConfig | null;
  /**
   * The embedding configuration used by the agent.
   */
  embedding_config?: EmbeddingConfig | null;
  /**
   * The ids of the messages in the agent's in-context memory.
   */
  message_ids?: Array<string> | null;
  /**
   * The in-context memory of the agent.
   */
  memory?: Memory | null;
};

/**
 * Update a block
 */
export type UpdateBlock = {
  /**
   * Value of the block.
   */
  value?: Array<string> | string | null;
  /**
   * Character limit of the block.
   */
  limit?: number | null;
  /**
   * Name of the block.
   */
  name?: string | null;
  /**
   * Whether the block is a template (e.g. saved human/persona options).
   */
  template?: boolean;
  /**
   * Label of the block (e.g. 'human', 'persona').
   */
  label?: string | null;
  /**
   * Description of the block.
   */
  description?: string | null;
  /**
   * Metadata of the block.
   */
  metadata_?: {
    [key: string]: unknown;
  } | null;
  /**
   * The unique identifier of the user associated with the block.
   */
  user_id?: string | null;
  /**
   * The unique identifier of the block.
   */
  id: string;
};

export type UsageStatistics = {
  completion_tokens?: number;
  prompt_tokens?: number;
  total_tokens?: number;
};

export type User = {
  /**
   * The human-friendly ID of the User
   */
  id?: string;
  /**
   * The name of the user.
   */
  name: string;
  /**
   * The creation date of the user.
   */
  created_at?: string;
};

export type UserCreate = {
  /**
   * The name of the user.
   */
  name?: string | null;
};

export type UserMessage = {
  content: string | Array<string>;
  role?: string;
  name?: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type memgpt__schemas__memgpt_message__FunctionCall = {
  name: string;
  arguments: string;
};

/**
 * Representation of a message sent.
 *
 * Messages can be:
 * - agent->user (role=='agent')
 * - user->agent and system->agent (role=='user')
 * - or function/tool call returns (role=='function'/'tool').
 */
export type memgpt__schemas__message__Message = {
  /**
   * The human-friendly ID of the Message
   */
  id?: string;
  /**
   * The role of the participant.
   */
  role: MessageRole;
  /**
   * The text of the message.
   */
  text?: string | null;
  /**
   * The unique identifier of the user.
   */
  user_id?: string | null;
  /**
   * The unique identifier of the agent.
   */
  agent_id?: string | null;
  /**
   * The model used to make the function call.
   */
  model?: string | null;
  /**
   * The name of the participant.
   */
  name?: string | null;
  /**
   * The time the message was created.
   */
  created_at?: string;
  /**
   * The list of tool calls requested.
   */
  tool_calls?: Array<memgpt__schemas__openai__chat_completions__ToolCall> | null;
  /**
   * The id of the tool call.
   */
  tool_call_id?: string | null;
};

export type memgpt__schemas__openai__chat_completion_request__ToolCall = {
  id: string;
  type?: 'function';
  function: ToolCallFunction_Input;
};

export type memgpt__schemas__openai__chat_completion_response__FunctionCall = {
  arguments: string;
  name: string;
};

export type memgpt__schemas__openai__chat_completion_response__Message = {
  content?: string | null;
  tool_calls?: Array<memgpt__schemas__openai__chat_completion_response__ToolCall> | null;
  role: string;
  function_call?: memgpt__schemas__openai__chat_completion_response__FunctionCall | null;
};

export type memgpt__schemas__openai__chat_completion_response__ToolCall = {
  id: string;
  type?: 'function';
  function: memgpt__schemas__openai__chat_completion_response__FunctionCall;
};

export type memgpt__schemas__openai__chat_completions__ToolCall = {
  /**
   * The ID of the tool call
   */
  id: string;
  type?: string;
  /**
   * The arguments and name for the function
   */
  function: ToolCallFunction_Output;
};

export type memgpt__schemas__openai__openai__ToolCall = {
  /**
   * The unique identifier of the tool call.
   */
  id: string;
  type?: string;
  /**
   * The function call.
   */
  function: Function;
};

export type AuthenticateUserApiAuthPostData = {
  requestBody: AuthRequest;
};

export type AuthenticateUserApiAuthPostResponse = AuthResponse;

export type GetAllUsersAdminUsersGetData = {
  cursor?: string | null;
  limit?: number | null;
};

export type GetAllUsersAdminUsersGetResponse = Array<User>;

export type CreateUserAdminUsersPostData = {
  requestBody: UserCreate;
};

export type CreateUserAdminUsersPostResponse = User;

export type DeleteUserAdminUsersDeleteData = {
  /**
   * The user_id key to be deleted.
   */
  userId: string;
};

export type DeleteUserAdminUsersDeleteResponse = User;

export type CreateNewApiKeyAdminUsersKeysPostData = {
  requestBody: APIKeyCreate;
};

export type CreateNewApiKeyAdminUsersKeysPostResponse = APIKey;

export type GetApiKeysAdminUsersKeysGetData = {
  /**
   * The unique identifier of the user.
   */
  userId: string;
};

export type GetApiKeysAdminUsersKeysGetResponse = Array<APIKey>;

export type DeleteApiKeyAdminUsersKeysDeleteData = {
  /**
   * The API key to be deleted.
   */
  apiKey: string;
};

export type DeleteApiKeyAdminUsersKeysDeleteResponse = APIKey;

export type DeleteToolAdminToolsToolNameDeleteData = {
  toolName: string;
};

export type DeleteToolAdminToolsToolNameDeleteResponse = unknown;

export type GetToolAdminToolsToolNameGetData = {
  toolName: string;
};

export type GetToolAdminToolsToolNameGetResponse = Tool_Output;

export type ListAllToolsAdminToolsGetResponse = ListToolsResponse;

export type CreateToolAdminToolsPostData = {
  requestBody: CreateToolRequest;
};

export type CreateToolAdminToolsPostResponse = Tool_Output;

export type DeleteToolApiToolsToolIdDeleteData = {
  toolId: string;
};

export type DeleteToolApiToolsToolIdDeleteResponse = unknown;

export type GetToolApiToolsToolIdGetData = {
  toolId: string;
};

export type GetToolApiToolsToolIdGetResponse = Tool_Output;

export type UpdateToolApiToolsToolIdPostData = {
  requestBody: ToolUpdate;
  toolId: string;
};

export type UpdateToolApiToolsToolIdPostResponse = Tool_Output;

export type GetToolIdApiToolsNameToolNameGetData = {
  toolName: string;
};

export type GetToolIdApiToolsNameToolNameGetResponse = string;

export type ListAllToolsApiToolsGetResponse = Array<Tool_Output>;

export type CreateToolApiToolsPostData = {
  requestBody: ToolCreate;
};

export type CreateToolApiToolsPostResponse = Tool_Output;

export type GetAllAgentsApiAdminAgentsGetResponse = Array<AgentState>;

export type ListAgentsApiAgentsGetResponse = Array<AgentState>;

export type CreateAgentApiAgentsPostData = {
  requestBody: CreateAgent;
};

export type CreateAgentApiAgentsPostResponse = AgentState;

export type UpdateAgentApiAgentsAgentIdPostData = {
  agentId: string;
  requestBody: UpdateAgentState;
};

export type UpdateAgentApiAgentsAgentIdPostResponse = AgentState;

export type GetAgentStateApiAgentsAgentIdGetData = {
  agentId: string;
};

export type GetAgentStateApiAgentsAgentIdGetResponse = AgentState;

export type DeleteAgentApiAgentsAgentIdDeleteData = {
  agentId: string;
};

export type DeleteAgentApiAgentsAgentIdDeleteResponse = unknown;

export type GetAgentSourcesApiAgentsAgentIdSourcesGetData = {
  agentId: string;
};

export type GetAgentSourcesApiAgentsAgentIdSourcesGetResponse = Array<Source>;

export type GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetData = {
  agentId: string;
};

export type GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetResponse =
  Array<memgpt__schemas__message__Message>;

export type GetAgentMemoryApiAgentsAgentIdMemoryGetData = {
  agentId: string;
};

export type GetAgentMemoryApiAgentsAgentIdMemoryGetResponse = Memory;

export type UpdateAgentMemoryApiAgentsAgentIdMemoryPostData = {
  agentId: string;
  requestBody: {
    [key: string]: unknown;
  };
};

export type UpdateAgentMemoryApiAgentsAgentIdMemoryPostResponse = Memory;

export type GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetData = {
  agentId: string;
};

export type GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetResponse =
  RecallMemorySummary;

export type GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetData =
  {
    agentId: string;
  };

export type GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetResponse =
  ArchivalMemorySummary;

export type GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetData = {
  /**
   * Unique ID of the memory to start the query range at.
   */
  after?: number | null;
  agentId: string;
  /**
   * Unique ID of the memory to end the query range at.
   */
  before?: number | null;
  /**
   * How many results to include in the response.
   */
  limit?: number | null;
};

export type GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetResponse =
  Array<Passage>;

export type InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostData = {
  agentId: string;
  requestBody: CreateArchivalMemory;
};

export type InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostResponse =
  Array<Passage>;

export type DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteData =
  {
    agentId: string;
    memoryId: string;
  };

export type DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteResponse =
  unknown;

export type GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetData = {
  agentId: string;
  /**
   * How many messages to retrieve.
   */
  count: number;
  /**
   * Message index to start on (reverse chronological).
   */
  start: number;
};

export type GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetResponse =
  Array<memgpt__schemas__message__Message>;

export type GetAgentMessagesApiAgentsAgentIdMessagesGetData = {
  agentId: string;
  /**
   * Message before which to retrieve the returned messages.
   */
  before?: string | null;
  /**
   * Maximum number of messages to retrieve.
   */
  limit?: number;
};

export type GetAgentMessagesApiAgentsAgentIdMessagesGetResponse =
  Array<memgpt__schemas__message__Message>;

export type SendMessageApiAgentsAgentIdMessagesPostData = {
  agentId: string;
  requestBody: MemGPTRequest;
};

export type SendMessageApiAgentsAgentIdMessagesPostResponse = MemGPTResponse;

export type ListBlocksApiBlocksGetData = {
  /**
   * Labels to include (e.g. human, persona)
   */
  label?: string | null;
  /**
   * Name of the block
   */
  name?: string | null;
  /**
   * Whether to include only templates
   */
  templatesOnly?: boolean;
};

export type ListBlocksApiBlocksGetResponse = Array<Block>;

export type CreateBlockApiBlocksPostData = {
  requestBody: CreateBlock;
};

export type CreateBlockApiBlocksPostResponse = Block;

export type UpdateBlockApiBlocksBlockIdPostData = {
  blockId: string;
  requestBody: UpdateBlock;
};

export type UpdateBlockApiBlocksBlockIdPostResponse = Block;

export type DeleteBlockApiBlocksBlockIdDeleteData = {
  blockId: string;
};

export type DeleteBlockApiBlocksBlockIdDeleteResponse = Block;

export type GetBlockApiBlocksBlockIdGetData = {
  blockId: string;
};

export type GetBlockApiBlocksBlockIdGetResponse = Block;

export type ListJobsApiJobsGetResponse = Array<Job>;

export type ListActiveJobsApiJobsActiveGetResponse = Array<Job>;

export type GetJobApiJobsJobIdGetData = {
  jobId: string;
};

export type GetJobApiJobsJobIdGetResponse = Job;

export type ListModelsApiModelsGetResponse = ListModelsResponse;

export type GetSourceApiSourcesSourceIdGetData = {
  sourceId: string;
};

export type GetSourceApiSourcesSourceIdGetResponse = Source;

export type UpdateSourceApiSourcesSourceIdPostData = {
  requestBody: SourceUpdate;
  sourceId: string;
};

export type UpdateSourceApiSourcesSourceIdPostResponse = Source;

export type DeleteSourceApiSourcesSourceIdDeleteData = {
  sourceId: string;
};

export type DeleteSourceApiSourcesSourceIdDeleteResponse = unknown;

export type GetSourceIdByNameApiSourcesNameSourceNameGetData = {
  sourceName: string;
};

export type GetSourceIdByNameApiSourcesNameSourceNameGetResponse = string;

export type ListSourcesApiSourcesGetResponse = Array<Source>;

export type CreateSourceApiSourcesPostData = {
  requestBody: SourceCreate;
};

export type CreateSourceApiSourcesPostResponse = Source;

export type AttachSourceToAgentApiSourcesSourceIdAttachPostData = {
  /**
   * The unique identifier of the agent to attach the source to.
   */
  agentId: string;
  sourceId: string;
};

export type AttachSourceToAgentApiSourcesSourceIdAttachPostResponse = Source;

export type DetachSourceFromAgentApiSourcesSourceIdDetachPostData = {
  /**
   * The unique identifier of the agent to detach the source from.
   */
  agentId: string;
  sourceId: string;
};

export type DetachSourceFromAgentApiSourcesSourceIdDetachPostResponse = unknown;

export type GetJobApiSourcesStatusJobIdGetData = {
  jobId: string;
};

export type GetJobApiSourcesStatusJobIdGetResponse = Job;

export type UploadFileToSourceApiSourcesSourceIdUploadPostData = {
  formData: Body_upload_file_to_source_api_sources__source_id__upload_post;
  sourceId: string;
};

export type UploadFileToSourceApiSourcesSourceIdUploadPostResponse = Job;

export type ListPassagesApiSourcesSourceIdPassagesGetData = {
  sourceId: string;
};

export type ListPassagesApiSourcesSourceIdPassagesGetResponse = Array<Passage>;

export type ListDocumentsApiSourcesSourceIdDocumentsGetData = {
  sourceId: string;
};

export type ListDocumentsApiSourcesSourceIdDocumentsGetResponse =
  Array<Document>;

export type GetLlmConfigsApiConfigLlmGetResponse = Array<LLMConfig>;

export type GetEmbeddingConfigsApiConfigEmbeddingGetResponse =
  Array<EmbeddingConfig>;

export type $OpenApiTs = {
  '/api/auth': {
    post: {
      req: AuthenticateUserApiAuthPostData;
      res: {
        /**
         * Successful Response
         */
        200: AuthResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/admin/users': {
    get: {
      req: GetAllUsersAdminUsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<User>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateUserAdminUsersPostData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteUserAdminUsersDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: User;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/admin/users/keys': {
    post: {
      req: CreateNewApiKeyAdminUsersKeysPostData;
      res: {
        /**
         * Successful Response
         */
        200: APIKey;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetApiKeysAdminUsersKeysGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<APIKey>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteApiKeyAdminUsersKeysDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: APIKey;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/admin/tools/{tool_name}': {
    delete: {
      req: DeleteToolAdminToolsToolNameDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetToolAdminToolsToolNameGetData;
      res: {
        /**
         * Successful Response
         */
        200: Tool_Output;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/admin/tools': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: ListToolsResponse;
      };
    };
    post: {
      req: CreateToolAdminToolsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Tool_Output;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/tools/{tool_id}': {
    delete: {
      req: DeleteToolApiToolsToolIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetToolApiToolsToolIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Tool_Output;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: UpdateToolApiToolsToolIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: Tool_Output;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/tools/name/{tool_name}': {
    get: {
      req: GetToolIdApiToolsNameToolNameGetData;
      res: {
        /**
         * Successful Response
         */
        200: string;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/tools': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Tool_Output>;
      };
    };
    post: {
      req: CreateToolApiToolsPostData;
      res: {
        /**
         * Successful Response
         */
        200: Tool_Output;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/admin/agents': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentState>;
      };
    };
  };
  '/api/agents': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<AgentState>;
      };
    };
    post: {
      req: CreateAgentApiAgentsPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentState;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}': {
    post: {
      req: UpdateAgentApiAgentsAgentIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: AgentState;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetAgentStateApiAgentsAgentIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: AgentState;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAgentApiAgentsAgentIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/sources': {
    get: {
      req: GetAgentSourcesApiAgentsAgentIdSourcesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Source>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/memory/messages': {
    get: {
      req: GetAgentInContextMessagesApiAgentsAgentIdMemoryMessagesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<memgpt__schemas__message__Message>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/memory': {
    get: {
      req: GetAgentMemoryApiAgentsAgentIdMemoryGetData;
      res: {
        /**
         * Successful Response
         */
        200: Memory;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: UpdateAgentMemoryApiAgentsAgentIdMemoryPostData;
      res: {
        /**
         * Successful Response
         */
        200: Memory;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/memory/recall': {
    get: {
      req: GetAgentRecallMemorySummaryApiAgentsAgentIdMemoryRecallGetData;
      res: {
        /**
         * Successful Response
         */
        200: RecallMemorySummary;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/memory/archival': {
    get: {
      req: GetAgentArchivalMemorySummaryApiAgentsAgentIdMemoryArchivalGetData;
      res: {
        /**
         * Successful Response
         */
        200: ArchivalMemorySummary;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/archival': {
    get: {
      req: GetAgentArchivalMemoryApiAgentsAgentIdArchivalGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Passage>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: InsertAgentArchivalMemoryApiAgentsAgentIdArchivalPostData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Passage>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/archival/{memory_id}': {
    delete: {
      req: DeleteAgentArchivalMemoryApiAgentsAgentIdArchivalMemoryIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/messages/context/': {
    get: {
      req: GetAgentMessagesInContextApiAgentsAgentIdMessagesContextGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<memgpt__schemas__message__Message>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/agents/{agent_id}/messages': {
    get: {
      req: GetAgentMessagesApiAgentsAgentIdMessagesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<memgpt__schemas__message__Message>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: SendMessageApiAgentsAgentIdMessagesPostData;
      res: {
        /**
         * Successful Response
         */
        200: MemGPTResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/blocks': {
    get: {
      req: ListBlocksApiBlocksGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Block>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateBlockApiBlocksPostData;
      res: {
        /**
         * Successful Response
         */
        200: Block;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/blocks/{block_id}': {
    post: {
      req: UpdateBlockApiBlocksBlockIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: Block;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteBlockApiBlocksBlockIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: Block;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetBlockApiBlocksBlockIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Block;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/jobs': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Job>;
      };
    };
  };
  '/api/jobs/active': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Job>;
      };
    };
  };
  '/api/jobs/{job_id}': {
    get: {
      req: GetJobApiJobsJobIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Job;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/models': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: ListModelsResponse;
      };
    };
  };
  '/api/sources/{source_id}': {
    get: {
      req: GetSourceApiSourcesSourceIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Source;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: UpdateSourceApiSourcesSourceIdPostData;
      res: {
        /**
         * Successful Response
         */
        200: Source;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteSourceApiSourcesSourceIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/name/{source_name}': {
    get: {
      req: GetSourceIdByNameApiSourcesNameSourceNameGetData;
      res: {
        /**
         * Successful Response
         */
        200: string;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<Source>;
      };
    };
    post: {
      req: CreateSourceApiSourcesPostData;
      res: {
        /**
         * Successful Response
         */
        200: Source;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/{source_id}/attach': {
    post: {
      req: AttachSourceToAgentApiSourcesSourceIdAttachPostData;
      res: {
        /**
         * Successful Response
         */
        200: Source;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/{source_id}/detach': {
    post: {
      req: DetachSourceFromAgentApiSourcesSourceIdDetachPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/status/{job_id}': {
    get: {
      req: GetJobApiSourcesStatusJobIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: Job;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/{source_id}/upload': {
    post: {
      req: UploadFileToSourceApiSourcesSourceIdUploadPostData;
      res: {
        /**
         * Successful Response
         */
        200: Job;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/{source_id}/passages ': {
    get: {
      req: ListPassagesApiSourcesSourceIdPassagesGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Passage>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/sources/{source_id}/documents': {
    get: {
      req: ListDocumentsApiSourcesSourceIdDocumentsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<Document>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  '/api/config/llm': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<LLMConfig>;
      };
    };
  };
  '/api/config/embedding': {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<EmbeddingConfig>;
      };
    };
  };
};
