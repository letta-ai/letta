'use client';
import React, { useContext } from 'react';
import { OpenAPI } from '../_autogenerated/requests';
import { createContext, useEffect } from 'react';
import { useResetAllLettaAgentsQueryKeys } from '../hooks/useResetAllLettaAgentsQueryKeys/useResetAllLettaAgentsQueryKeys';

OpenAPI.BASE = '';
OpenAPI.HEADERS = {
  'Content-Type': 'application/json',
  'Cache-Control': 'no-cache',
};

interface LettaAgentsAPIWrapperProps {
  children: React.ReactNode;
  baseUrl: string;
  password?: string;
}

let currentBaseUrl = '';

interface LettaAgentsAPIContextData {
  baseUrl: string;
  password?: string;
}

const LettaAgentsAPIContext = createContext<LettaAgentsAPIContextData>({
  baseUrl: '',
});

export function useLettaAgentsAPI() {
  return useContext(LettaAgentsAPIContext);
}

export function LettaAgentsAPIWrapper({
  children,
  baseUrl,
  password,
}: LettaAgentsAPIWrapperProps) {
  const { resetAllLettaAgentsQueryKeys } = useResetAllLettaAgentsQueryKeys();

  useEffect(() => {
    if (currentBaseUrl !== baseUrl) {
      currentBaseUrl = baseUrl;

      resetAllLettaAgentsQueryKeys();
    }

    OpenAPI.interceptors.request.use((config) => {
      config.baseURL = baseUrl;

      if (password) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        config.headers['X-BARE-PASSWORD'] = `password ${password}`;
      }

      return config;
    });
  }, [baseUrl, password]);

  return React.createElement(
    LettaAgentsAPIContext.Provider,
    { value: { baseUrl, password } },
    children
  );
}
