'use client';
import { OpenAPI } from '../_autogenerated/requests';
import { useEffect, useRef } from 'react';
import { useQueryClient } from '@tanstack/react-query';

OpenAPI.BASE = '';
OpenAPI.HEADERS = {
  'Content-Type': 'application/json',
  'Cache-Control': 'no-cache',
};

interface LettaAgentsAPIWrapperProps {
  children: React.ReactNode;
  baseUrl: string;
  password?: string;
}

let currentBaseUrl = '';

export function LettaAgentsAPIWrapper({
  children,
  baseUrl,
  password,
}: LettaAgentsAPIWrapperProps) {
  const queryClient = useQueryClient();

  useEffect(() => {
    if (currentBaseUrl !== baseUrl) {
      currentBaseUrl = baseUrl;

      /* Resets all query keys that have to do with "Service", as that is the common query key name for all letta-agents queries */
      Array.from(queryClient.getQueryCache().getAll().values())
        .filter((query) => query.queryHash.includes('Service'))
        .forEach((query) => {
          void queryClient.resetQueries({
            queryKey: query.queryKey,
          });
        });
    }

    OpenAPI.interceptors.request.use((config) => {
      config.baseURL = baseUrl;

      if (password) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        config.headers['X-BARE-PASSWORD'] = `password ${password}`;
      }

      return config;
    });
  }, [baseUrl, password]);

  return children;
}
