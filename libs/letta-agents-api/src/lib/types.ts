import { z } from 'zod';
import { jsonrepair } from 'jsonrepair';
import type { ToZod } from '@letta-web/helpful-client-utils';
import type { LLMConfig } from './_autogenerated/requests';

export interface AttachedAgent {
  id: string;
  name: string;
}

export interface SourceMetadata {
  num_documents: number;
  num_passages: number;
  attached_agents: AttachedAgent[];
}

export const SystemMessageSchema = z.object({
  message_type: z.literal('system_message'),
  message: z.string(),
  date: z.string(),
  id: z.string(),
});

export const SystemAlertSchema = z.object({
  type: z.literal('system_alert'),
  message: z.string(),
  time: z.string(),
});

// this is the message schema if you parse `message` from UseMessageSchema
export const UserMessageMessageSchema = z.object({
  type: z.literal('user_message'),
  message: z.string(),
  time: z.string(),
});

export const UserMessageSchema = z.object({
  message_type: z.literal('user_message'),
  formattedMessage: z.record(z.unknown()).optional(),
  message: z.string(),
  date: z.string(),
  id: z.string(),
});

export const InternalMonologueSchema = z.object({
  message_type: z.literal('internal_monologue'),
  internal_monologue: z.string(),
  date: z.string(),
  id: z.string(),
});

export const SendMessageFunctionCallSchema = z.object({
  message: z.string(),
});

export const FunctionCallSchema = z.object({
  message_type: z.literal('function_call'),
  function_call: z.object({
    message_type: z.literal('function_call').optional(),
    type: z.literal('function_call').optional(),
    name: z.string().optional(),
    function_call_id: z.string().optional(),
    arguments: z.string().optional(),
    formattedArguments: z.record(z.unknown()).optional(),
  }),
  date: z.string(),
  id: z.string(),
});

export const FunctionReturnSchema = z.object({
  message_type: z.literal('function_return'),
  function_return: z.string(),
  function_call_id: z.string(),
  status: z.string(),
  date: z.string(),
  id: z.string(),
});

export const AgentMessageSchema = z.discriminatedUnion('message_type', [
  FunctionReturnSchema,
  FunctionCallSchema,
  InternalMonologueSchema,
  UserMessageSchema,
  SystemMessageSchema,
]);

const ErrorCodeSchema = z.enum([
  'INTERNAL_SERVER_ERROR',
  'CONTEXT_WINDOW_EXCEEDED',
  'RATE_LIMIT_EXCEEDED',
]);

export const ErrorMessageSchema = z.object({
  error: z.string(),
  code: ErrorCodeSchema.optional(),
});

export const AgentMessageTypeSchema = z.enum([
  'function_return',
  'function_call',
  'internal_monologue',
  'user_message',
  'system_message',
]);

export function safeParseArguments(message: string): Record<string, any> {
  try {
    return JSON.parse(jsonrepair(message));
  } catch (_e) {
    return {};
  }
}

export type AgentMessage = z.infer<typeof AgentMessageSchema>;

const modelEndpointTypesSchema = z.enum([
  'openai',
  'anthropic',
  'cohere',
  'google_ai',
  'azure',
  'groq',
  'ollama',
  'webui',
  'webui-legacy',
  'lmstudio',
  'lmstudio-legacy',
  'llamacpp',
  'koboldcpp',
  'vllm',
  'hugging-face',
  'mistral',
  'together',
]);

// matches LLMConfig but enum is broken with ToZod
export const LLMConfigSchema = z.object({
  model: z.string(),
  model_endpoint_type: modelEndpointTypesSchema,
  model_endpoint: z.string().optional().nullable(),
  model_wrapper: z.string().nullable().optional(),
  context_window: z.number(),
});

export const EmbeddingConfigSchema = z.object({
  embedding_endpoint_type: modelEndpointTypesSchema,
  embedding_endpoint: z.string().optional().nullable(),
  embedding_model: z.string(),
  embedding_dim: z.number(),
  embedding_chunk_size: z.number().optional().nullable(),
  azure_endpoint: z.string().optional().nullable(),
  azure_version: z.string().optional().nullable(),
  azure_deployment: z.string().optional().nullable(),
});
