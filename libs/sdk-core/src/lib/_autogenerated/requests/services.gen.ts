// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  DeleteToolData,
  DeleteToolResponse,
  RetrieveToolData,
  RetrieveToolResponse,
  ModifyToolData,
  ModifyToolResponse,
  CountToolsData,
  CountToolsResponse,
  ListToolsData,
  ListToolsResponse,
  CreateToolData,
  CreateToolResponse,
  UpsertToolData,
  UpsertToolResponse,
  AddBaseToolsData,
  AddBaseToolsResponse,
  RunToolFromSourceData,
  RunToolFromSourceResponse,
  ListComposioAppsData,
  ListComposioAppsResponse,
  ListComposioActionsByAppData,
  ListComposioActionsByAppResponse,
  AddComposioToolData,
  AddComposioToolResponse,
  ListMcpServersData,
  ListMcpServersResponse,
  AddMcpServerData,
  AddMcpServerResponse,
  ListMcpToolsByServerData,
  ListMcpToolsByServerResponse,
  AddMcpToolData,
  AddMcpToolResponse,
  UpdateMcpServerData,
  UpdateMcpServerResponse,
  DeleteMcpServerData,
  DeleteMcpServerResponse,
  TestMcpServerData,
  TestMcpServerResponse,
  GenerateJsonSchemaData,
  GenerateJsonSchemaResponse,
  CountSourcesData,
  CountSourcesResponse,
  RetrieveSourceData,
  RetrieveSourceResponse,
  ModifySourceData,
  ModifySourceResponse,
  DeleteSourceData,
  DeleteSourceResponse,
  GetSourceIdByNameData,
  GetSourceIdByNameResponse,
  GetSourcesMetadataData,
  GetSourcesMetadataResponse,
  ListSourcesData,
  ListSourcesResponse,
  CreateSourceData,
  CreateSourceResponse,
  UploadFileToSourceData,
  UploadFileToSourceResponse,
  GetAgentsForSourceData,
  GetAgentsForSourceResponse,
  ListSourcePassagesData,
  ListSourcePassagesResponse,
  ListSourceFilesData,
  ListSourceFilesResponse,
  GetFileMetadataData,
  GetFileMetadataResponse,
  DeleteFileFromSourceData,
  DeleteFileFromSourceResponse,
  ListAgentsData,
  ListAgentsResponse,
  CreateAgentData,
  CreateAgentResponse,
  CountAgentsData,
  CountAgentsResponse,
  ExportAgentSerializedData,
  ExportAgentSerializedResponse,
  ImportAgentSerializedData,
  ImportAgentSerializedResponse,
  RetrieveAgentContextWindowData,
  RetrieveAgentContextWindowResponse,
  ModifyAgentData,
  ModifyAgentResponse,
  RetrieveAgentData,
  RetrieveAgentResponse,
  DeleteAgentData,
  DeleteAgentResponse,
  ListAgentToolsData,
  ListAgentToolsResponse,
  AttachToolData,
  AttachToolResponse,
  DetachToolData,
  DetachToolResponse,
  AttachSourceToAgentData,
  AttachSourceToAgentResponse,
  DetachSourceFromAgentData,
  DetachSourceFromAgentResponse,
  CloseAllOpenFilesData,
  CloseAllOpenFilesResponse,
  ListAgentSourcesData,
  ListAgentSourcesResponse,
  RetrieveAgentMemoryData,
  RetrieveAgentMemoryResponse,
  RetrieveCoreMemoryBlockData,
  RetrieveCoreMemoryBlockResponse,
  ModifyCoreMemoryBlockData,
  ModifyCoreMemoryBlockResponse,
  ListCoreMemoryBlocksData,
  ListCoreMemoryBlocksResponse,
  AttachCoreMemoryBlockData,
  AttachCoreMemoryBlockResponse,
  DetachCoreMemoryBlockData,
  DetachCoreMemoryBlockResponse,
  ListPassagesData,
  ListPassagesResponse,
  CreatePassageData,
  CreatePassageResponse,
  ModifyPassageData,
  ModifyPassageResponse,
  DeletePassageData,
  DeletePassageResponse,
  ListMessagesData,
  ListMessagesResponse,
  SendMessageData,
  SendMessageResponse,
  ModifyMessageData,
  ModifyMessageResponse,
  CreateAgentMessageStreamData,
  CreateAgentMessageStreamResponse,
  CancelAgentRunData,
  CancelAgentRunResponse,
  CreateAgentMessageAsyncData,
  CreateAgentMessageAsyncResponse,
  ResetMessagesData,
  ResetMessagesResponse,
  ListAgentGroupsData,
  ListAgentGroupsResponse,
  PreviewRawPayloadData,
  PreviewRawPayloadResponse,
  SummarizeAgentConversationData,
  SummarizeAgentConversationResponse,
  ListGroupsData,
  ListGroupsResponse,
  CreateGroupData,
  CreateGroupResponse,
  CountGroupsData,
  CountGroupsResponse,
  RetrieveGroupData,
  RetrieveGroupResponse,
  ModifyGroupData,
  ModifyGroupResponse,
  DeleteGroupData,
  DeleteGroupResponse,
  SendGroupMessageData,
  SendGroupMessageResponse,
  ListGroupMessagesData,
  ListGroupMessagesResponse,
  SendGroupMessageStreamingData,
  SendGroupMessageStreamingResponse,
  ModifyGroupMessageData,
  ModifyGroupMessageResponse,
  ResetGroupMessagesData,
  ResetGroupMessagesResponse,
  ListIdentitiesData,
  ListIdentitiesResponse,
  CreateIdentityData,
  CreateIdentityResponse,
  UpsertIdentityData,
  UpsertIdentityResponse,
  CountIdentitiesData,
  CountIdentitiesResponse,
  RetrieveIdentityData,
  RetrieveIdentityResponse,
  UpdateIdentityData,
  UpdateIdentityResponse,
  DeleteIdentityData,
  DeleteIdentityResponse,
  UpsertIdentityPropertiesData,
  UpsertIdentityPropertiesResponse,
  ListModelsData,
  ListModelsResponse,
  ListEmbeddingModelsData,
  ListEmbeddingModelsResponse,
  ListBlocksData,
  ListBlocksResponse,
  CreateBlockData,
  CreateBlockResponse,
  CountBlocksData,
  CountBlocksResponse,
  ModifyBlockData,
  ModifyBlockResponse,
  DeleteBlockData,
  DeleteBlockResponse,
  RetrieveBlockData,
  RetrieveBlockResponse,
  ListAgentsForBlockData,
  ListAgentsForBlockResponse,
  ListJobsData,
  ListJobsResponse,
  ListActiveJobsData,
  ListActiveJobsResponse,
  RetrieveJobData,
  RetrieveJobResponse,
  DeleteJobData,
  DeleteJobResponse,
  CancelJobData,
  CancelJobResponse,
  HealthCheckResponse,
  CreateSandboxConfigV1SandboxConfigPostData,
  CreateSandboxConfigV1SandboxConfigPostResponse,
  ListSandboxConfigsV1SandboxConfigGetData,
  ListSandboxConfigsV1SandboxConfigGetResponse,
  CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostData,
  CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostResponse,
  CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostData,
  CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostResponse,
  CreateCustomLocalSandboxConfigV1SandboxConfigLocalPostData,
  CreateCustomLocalSandboxConfigV1SandboxConfigLocalPostResponse,
  UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchData,
  UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchResponse,
  DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteData,
  DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteResponse,
  ForceRecreateLocalSandboxVenvV1SandboxConfigLocalRecreateVenvPostData,
  ForceRecreateLocalSandboxVenvV1SandboxConfigLocalRecreateVenvPostResponse,
  CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostData,
  CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostResponse,
  ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetData,
  ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetResponse,
  UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchData,
  UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchResponse,
  DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteData,
  DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteResponse,
  ListProvidersData,
  ListProvidersResponse,
  CreateProviderData,
  CreateProviderResponse,
  ModifyProviderData,
  ModifyProviderResponse,
  DeleteProviderData,
  DeleteProviderResponse,
  CheckProviderData,
  CheckProviderResponse,
  ListRunsData,
  ListRunsResponse,
  ListActiveRunsData,
  ListActiveRunsResponse,
  RetrieveRunData,
  RetrieveRunResponse,
  DeleteRunData,
  DeleteRunResponse,
  ListRunMessagesData,
  ListRunMessagesResponse,
  RetrieveRunUsageData,
  RetrieveRunUsageResponse,
  ListRunStepsData,
  ListRunStepsResponse,
  ListStepsData,
  ListStepsResponse,
  RetrieveStepData,
  RetrieveStepResponse,
  AddFeedbackData,
  AddFeedbackResponse,
  UpdateStepTransactionIdData,
  UpdateStepTransactionIdResponse,
  ListTagsData,
  ListTagsResponse,
  ListUsersData,
  ListUsersResponse,
  CreateUserData,
  CreateUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserResponse,
  ListOrgsData,
  ListOrgsResponse,
  CreateOrganizationData,
  CreateOrganizationResponse,
  DeleteOrganizationByIdData,
  DeleteOrganizationByIdResponse,
  UpdateOrganizationData,
  UpdateOrganizationResponse,
  RetrieveProviderTraceData,
  RetrieveProviderTraceResponse,
  CreateMessagesBatchData,
  CreateMessagesBatchResponse,
  ListBatchRunsData,
  ListBatchRunsResponse,
  RetrieveBatchRunData,
  RetrieveBatchRunResponse,
  ListBatchMessagesData,
  ListBatchMessagesResponse,
  CancelBatchRunData,
  CancelBatchRunResponse,
  CreateVoiceChatCompletionsData,
  CreateVoiceChatCompletionsResponse,
  GetTotalStorageSizeData,
  GetTotalStorageSizeResponse,
  AuthenticateUserV1AuthPostData,
  AuthenticateUserV1AuthPostResponse,
} from './types.gen';

export class ToolsService {
  /**
   * Delete Tool
   * Delete a tool by name
   * @param data The data for the request.
   * @param data.toolId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteTool(
    data: DeleteToolData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteToolResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Tool
   * Get a tool by ID
   * @param data The data for the request.
   * @param data.toolId
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static retrieveTool(
    data: RetrieveToolData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveToolResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Tool
   * Update an existing tool
   * @param data The data for the request.
   * @param data.toolId
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static modifyTool(
    data: ModifyToolData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/tools/{tool_id}',
      path: {
        tool_id: data.toolId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Count Tools
   * Get a count of all tools available to agents belonging to the org of the user.
   * @param data The data for the request.
   * @param data.includeBaseTools Include built-in Letta tools in the count
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countTools(
    data: CountToolsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountToolsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/count',
      query: {
        include_base_tools: data.includeBaseTools,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Tools
   * Get a list of all tools available to agents belonging to the org of the user
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.name
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static listTools(
    data: ListToolsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListToolsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/',
      query: {
        after: data.after,
        limit: data.limit,
        name: data.name,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Tool
   * Create a new tool
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static createTool(
    data: CreateToolData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateToolResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Tool
   * Create or update a tool
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static upsertTool(
    data: UpsertToolData,
    headers?: { user_id: string },
  ): CancelablePromise<UpsertToolResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/tools/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Base Tools
   * Upsert base tools
   * @param data The data for the request.
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static addBaseTools(
    data: AddBaseToolsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<AddBaseToolsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/add-base-tools',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Run Tool From Source
   * Attempt to build a tool from source, then run it on the provided arguments
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns ToolReturnMessage Successful Response
   * @throws ApiError
   */
  public static runToolFromSource(
    data: RunToolFromSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<RunToolFromSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/run',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Composio Apps
   * Get a list of all Composio apps
   * @param data The data for the request.
   * @param data.userId
   * @returns AppModel Successful Response
   * @throws ApiError
   */
  public static listComposioApps(
    data: ListComposioAppsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListComposioAppsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/composio/apps',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Composio Actions By App
   * Get a list of all Composio actions for a specific app
   * @param data The data for the request.
   * @param data.composioAppName
   * @param data.userId
   * @returns ActionModel Successful Response
   * @throws ApiError
   */
  public static listComposioActionsByApp(
    data: ListComposioActionsByAppData,
    headers?: { user_id: string },
  ): CancelablePromise<ListComposioActionsByAppResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/composio/apps/{composio_app_name}/actions',
      path: {
        composio_app_name: data.composioAppName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Add Composio Tool
   * Add a new Composio tool by action name (Composio refers to each tool as an `Action`)
   * @param data The data for the request.
   * @param data.composioActionName
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static addComposioTool(
    data: AddComposioToolData,
    headers?: { user_id: string },
  ): CancelablePromise<AddComposioToolResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/composio/{composio_action_name}',
      path: {
        composio_action_name: data.composioActionName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Mcp Servers
   * Get a list of all configured MCP servers
   * @param data The data for the request.
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static listMcpServers(
    data: ListMcpServersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListMcpServersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/mcp/servers',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Add Mcp Server To Config
   * Add a new MCP server to the Letta MCP server config
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static addMcpServer(
    data: AddMcpServerData,
    headers?: { user_id: string },
  ): CancelablePromise<AddMcpServerResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/tools/mcp/servers',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Mcp Tools By Server
   * Get a list of all tools for a specific MCP server
   * @param data The data for the request.
   * @param data.mcpServerName
   * @param data.userId
   * @returns MCPTool Successful Response
   * @throws ApiError
   */
  public static listMcpToolsByServer(
    data: ListMcpToolsByServerData,
    headers?: { user_id: string },
  ): CancelablePromise<ListMcpToolsByServerResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tools/mcp/servers/{mcp_server_name}/tools',
      path: {
        mcp_server_name: data.mcpServerName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Add Mcp Tool
   * Register a new MCP tool as a Letta server by MCP server + tool name
   * @param data The data for the request.
   * @param data.mcpServerName
   * @param data.mcpToolName
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static addMcpTool(
    data: AddMcpToolData,
    headers?: { user_id: string },
  ): CancelablePromise<AddMcpToolResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/mcp/servers/{mcp_server_name}/{mcp_tool_name}',
      path: {
        mcp_server_name: data.mcpServerName,
        mcp_tool_name: data.mcpToolName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Mcp Server
   * Update an existing MCP server configuration
   * @param data The data for the request.
   * @param data.mcpServerName
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static updateMcpServer(
    data: UpdateMcpServerData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateMcpServerResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/tools/mcp/servers/{mcp_server_name}',
      path: {
        mcp_server_name: data.mcpServerName,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Mcp Server From Config
   * Add a new MCP server to the Letta MCP server config
   * @param data The data for the request.
   * @param data.mcpServerName
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteMcpServer(
    data: DeleteMcpServerData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteMcpServerResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/tools/mcp/servers/{mcp_server_name}',
      path: {
        mcp_server_name: data.mcpServerName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Test Mcp Server
   * Test connection to an MCP server without adding it.
   * Returns the list of available tools if successful.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns MCPTool Successful Response
   * @throws ApiError
   */
  public static testMcpServer(
    data: TestMcpServerData,
    headers?: { user_id: string },
  ): CancelablePromise<TestMcpServerResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/mcp/servers/test',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Generate Json Schema
   * Generate a JSON schema from the given Python source code defining a function or class.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static generateJsonSchema(
    data: GenerateJsonSchemaData,
    headers?: { user_id: string },
  ): CancelablePromise<GenerateJsonSchemaResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tools/generate-schema',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class SourcesService {
  /**
   * Count Sources
   * Count all data sources created by a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countSources(
    data: CountSourcesData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountSourcesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/count',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Source
   * Get all sources
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static retrieveSource(
    data: RetrieveSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveSourceResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Source
   * Update the name or documentation of an existing data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.requestBody
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static modifySource(
    data: ModifySourceData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifySourceResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Source
   * Delete a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteSource(
    data: DeleteSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSourceResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sources/{source_id}',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get Source Id By Name
   * Get a source by name
   * @param data The data for the request.
   * @param data.sourceName
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getSourceIdByName(
    data: GetSourceIdByNameData,
    headers?: { user_id: string },
  ): CancelablePromise<GetSourceIdByNameResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/name/{source_name}',
      path: {
        source_name: data.sourceName,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get Sources Metadata
   * Get aggregated metadata for all sources in an organization.
   *
   * Returns structured metadata including:
   * - Total number of sources
   * - Total number of files across all sources
   * - Total size of all files
   * - Per-source breakdown with file details (file_name, file_size per file) if include_detailed_per_source_metadata is True
   * @param data The data for the request.
   * @param data.includeDetailedPerSourceMetadata
   * @param data.userId
   * @returns OrganizationSourcesStats Successful Response
   * @throws ApiError
   */
  public static getSourcesMetadata(
    data: GetSourcesMetadataData = {},
    headers?: { user_id: string },
  ): CancelablePromise<GetSourcesMetadataResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/metadata',
      query: {
        include_detailed_per_source_metadata:
          data.includeDetailedPerSourceMetadata,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sources
   * List all data sources created by a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static listSources(
    data: ListSourcesData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListSourcesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Source
   * Create a new data source.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static createSource(
    data: CreateSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sources/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upload File To Source
   * Upload a file to a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.formData
   * @param data.duplicateHandling How to handle duplicate filenames
   * @param data.userId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public static uploadFileToSource(
    data: UploadFileToSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<UploadFileToSourceResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sources/{source_id}/upload',
      path: {
        source_id: data.sourceId,
      },
      query: {
        duplicate_handling: data.duplicateHandling,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get Agents For Source
   * Get all agent IDs that have the specified source attached.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static getAgentsForSource(
    data: GetAgentsForSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<GetAgentsForSourceResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/agents',
      path: {
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Source Passages
   * List all passages associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.after Message after which to retrieve the returned messages.
   * @param data.before Message before which to retrieve the returned messages.
   * @param data.limit Maximum number of messages to retrieve.
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static listSourcePassages(
    data: ListSourcePassagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSourcePassagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/passages',
      path: {
        source_id: data.sourceId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Source Files
   * List paginated files associated with a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.limit Number of files to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.includeContent Whether to include full file content
   * @param data.userId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public static listSourceFiles(
    data: ListSourceFilesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSourceFilesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/files',
      path: {
        source_id: data.sourceId,
      },
      query: {
        limit: data.limit,
        after: data.after,
        include_content: data.includeContent,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get File Metadata
   * Retrieve metadata for a specific file by its ID.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.fileId
   * @param data.includeContent Whether to include full file content
   * @param data.userId
   * @returns FileMetadata Successful Response
   * @throws ApiError
   */
  public static getFileMetadata(
    data: GetFileMetadataData,
    headers?: { user_id: string },
  ): CancelablePromise<GetFileMetadataResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sources/{source_id}/files/{file_id}',
      path: {
        source_id: data.sourceId,
        file_id: data.fileId,
      },
      query: {
        include_content: data.includeContent,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete File From Source
   * Delete a data source.
   * @param data The data for the request.
   * @param data.sourceId
   * @param data.fileId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteFileFromSource(
    data: DeleteFileFromSourceData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteFileFromSourceResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sources/{source_id}/{file_id}',
      path: {
        source_id: data.sourceId,
        file_id: data.fileId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AgentsService {
  /**
   * List Agents
   * List all agents associated with a given user.
   *
   * This endpoint retrieves a list of all agents and their configurations
   * associated with the specified user ID.
   * @param data The data for the request.
   * @param data.name Name of the agent
   * @param data.tags List of tags to filter agents by
   * @param data.matchAllTags If True, only returns agents that match ALL given tags. Otherwise, return agents that have ANY of the passed-in tags.
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Limit for pagination
   * @param data.queryText Search agents by name
   * @param data.projectId Search agents by project ID
   * @param data.templateId Search agents by template ID
   * @param data.baseTemplateId Search agents by base template ID
   * @param data.identityId Search agents by identity ID
   * @param data.identifierKeys Search agents by identifier keys
   * @param data.includeRelationships Specify which relational fields (e.g., 'tools', 'sources', 'memory') to include in the response. If not provided, all relationships are loaded by default. Using this can optimize performance by reducing unnecessary joins.
   * @param data.ascending Whether to sort agents oldest to newest (True) or newest to oldest (False, default)
   * @param data.sortBy Field to sort by. Options: 'created_at' (default), 'last_run_completion'
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static listAgents(
    data: ListAgentsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/',
      query: {
        name: data.name,
        tags: data.tags,
        match_all_tags: data.matchAllTags,
        before: data.before,
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
        project_id: data.projectId,
        template_id: data.templateId,
        base_template_id: data.baseTemplateId,
        identity_id: data.identityId,
        identifier_keys: data.identifierKeys,
        include_relationships: data.includeRelationships,
        ascending: data.ascending,
        sort_by: data.sortBy,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Agent
   * Create a new agent with the specified configuration.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @param data.xProject The project slug to associate with the agent (cloud only).
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static createAgent(
    data: CreateAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Count Agents
   * Get the count of all agents associated with a given user.
   * @param data The data for the request.
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countAgents(
    data: CountAgentsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountAgentsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/count',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Export Agent Serialized
   * Export the serialized JSON representation of an agent, formatted with indentation.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @param data.requestBody
   * @returns string Successful Response
   * @throws ApiError
   */
  public static exportAgentSerialized(
    data: ExportAgentSerializedData,
    headers?: { user_id: string },
  ): CancelablePromise<ExportAgentSerializedResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/export',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Import Agent Serialized
   * Import a serialized agent file and recreate the agent in the system.
   * @param data The data for the request.
   * @param data.formData
   * @param data.appendCopySuffix If set to True, appends "_copy" to the end of the agent name.
   * @param data.overrideExistingTools If set to True, existing tools can get their source code overwritten by the uploaded tool definitions. Note that Letta core tools can never be updated externally.
   * @param data.projectId The project ID to associate the uploaded agent with.
   * @param data.stripMessages If set to True, strips all messages from the agent before importing.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static importAgentSerialized(
    data: ImportAgentSerializedData,
    headers?: { user_id: string },
  ): CancelablePromise<ImportAgentSerializedResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/import',
      query: {
        append_copy_suffix: data.appendCopySuffix,
        override_existing_tools: data.overrideExistingTools,
        project_id: data.projectId,
        strip_messages: data.stripMessages,
      },
      formData: data.formData,
      mediaType: 'multipart/form-data',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent Context Window
   * Retrieve the context window of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns ContextWindowOverview Successful Response
   * @throws ApiError
   */
  public static retrieveAgentContextWindow(
    data: RetrieveAgentContextWindowData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentContextWindowResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/context',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Agent
   * Update an existing agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static modifyAgent(
    data: ModifyAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent
   * Get the state of the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.includeRelationships Specify which relational fields (e.g., 'tools', 'sources', 'memory') to include in the response. If not provided, all relationships are loaded by default. Using this can optimize performance by reducing unnecessary joins.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static retrieveAgent(
    data: RetrieveAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      query: {
        include_relationships: data.includeRelationships,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Agent
   * Delete an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteAgent(
    data: DeleteAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteAgentResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/agents/{agent_id}',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agent Tools
   * Get tools from an existing agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Tool Successful Response
   * @throws ApiError
   */
  public static listAgentTools(
    data: ListAgentToolsData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentToolsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/tools',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Tool
   * Attach a tool to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachTool(
    data: AttachToolData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/tools/attach/{tool_id}',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Tool
   * Detach a tool from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.toolId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachTool(
    data: DetachToolData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachToolResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/tools/detach/{tool_id}',
      path: {
        agent_id: data.agentId,
        tool_id: data.toolId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Source
   * Attach a source to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.sourceId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachSourceToAgent(
    data: AttachSourceToAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachSourceToAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/sources/attach/{source_id}',
      path: {
        agent_id: data.agentId,
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Source
   * Detach a source from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.sourceId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachSourceFromAgent(
    data: DetachSourceFromAgentData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachSourceFromAgentResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/sources/detach/{source_id}',
      path: {
        agent_id: data.agentId,
        source_id: data.sourceId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Close All Open Files
   * Closes all currently open files for a given agent.
   *
   * This endpoint updates the file state for the agent so that no files are marked as open.
   * Typically used to reset the working memory view for the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static closeAllOpenFiles(
    data: CloseAllOpenFilesData,
    headers?: { user_id: string },
  ): CancelablePromise<CloseAllOpenFilesResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/files/close-all',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agent Sources
   * Get the sources associated with an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Source Successful Response
   * @throws ApiError
   */
  public static listAgentSources(
    data: ListAgentSourcesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentSourcesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/sources',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Agent Memory
   * Retrieve the memory state of a specific agent.
   * This endpoint fetches the current memory state of the agent identified by the user ID and agent ID.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Memory Successful Response
   * @throws ApiError
   */
  public static retrieveAgentMemory(
    data: RetrieveAgentMemoryData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveAgentMemoryResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Block
   * Retrieve a core memory block from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockLabel
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static retrieveCoreMemoryBlock(
    data: RetrieveCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory/blocks/{block_label}',
      path: {
        agent_id: data.agentId,
        block_label: data.blockLabel,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Block
   * Updates a core memory block of an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockLabel
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static modifyCoreMemoryBlock(
    data: ModifyCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/{block_label}',
      path: {
        agent_id: data.agentId,
        block_label: data.blockLabel,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Blocks
   * Retrieve the core memory blocks of a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static listCoreMemoryBlocks(
    data: ListCoreMemoryBlocksData,
    headers?: { user_id: string },
  ): CancelablePromise<ListCoreMemoryBlocksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/core-memory/blocks',
      path: {
        agent_id: data.agentId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Attach Block
   * Attach a core memory block to an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static attachCoreMemoryBlock(
    data: AttachCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<AttachCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/attach/{block_id}',
      path: {
        agent_id: data.agentId,
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Detach Block
   * Detach a core memory block from an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.blockId
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static detachCoreMemoryBlock(
    data: DetachCoreMemoryBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<DetachCoreMemoryBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/core-memory/blocks/detach/{block_id}',
      path: {
        agent_id: data.agentId,
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Passages
   * Retrieve the memories in an agent's archival memory store (paginated query).
   * @param data The data for the request.
   * @param data.agentId
   * @param data.after Unique ID of the memory to start the query range at.
   * @param data.before Unique ID of the memory to end the query range at.
   * @param data.limit How many results to include in the response.
   * @param data.search Search passages by text
   * @param data.ascending Whether to sort passages oldest to newest (True, default) or newest to oldest (False)
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static listPassages(
    data: ListPassagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListPassagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/archival-memory',
      path: {
        agent_id: data.agentId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
        search: data.search,
        ascending: data.ascending,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Passage
   * Insert a memory into an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static createPassage(
    data: CreatePassageData,
    headers?: { user_id: string },
  ): CancelablePromise<CreatePassageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/archival-memory',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Passage
   * Modify a memory in the agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.memoryId
   * @param data.requestBody
   * @param data.userId
   * @returns Passage Successful Response
   * @throws ApiError
   */
  public static modifyPassage(
    data: ModifyPassageData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyPassageResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/archival-memory/{memory_id}',
      path: {
        agent_id: data.agentId,
        memory_id: data.memoryId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Passage
   * Delete a memory from an agent's archival memory store.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.memoryId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deletePassage(
    data: DeletePassageData,
    headers?: { user_id: string },
  ): CancelablePromise<DeletePassageResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/agents/{agent_id}/archival-memory/{memory_id}',
      path: {
        agent_id: data.agentId,
        memory_id: data.memoryId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Messages
   * Retrieve message history for an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.after Message after which to retrieve the returned messages.
   * @param data.before Message before which to retrieve the returned messages.
   * @param data.limit Maximum number of messages to retrieve.
   * @param data.groupId Group ID to filter messages by.
   * @param data.useAssistantMessage Whether to use assistant messages
   * @param data.assistantMessageToolName The name of the designated message tool.
   * @param data.assistantMessageToolKwarg The name of the message argument.
   * @param data.userId
   * @returns LettaMessageUnion Successful Response
   * @throws ApiError
   */
  public static listMessages(
    data: ListMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
        group_id: data.groupId,
        use_assistant_message: data.useAssistantMessage,
        assistant_message_tool_name: data.assistantMessageToolName,
        assistant_message_tool_kwarg: data.assistantMessageToolKwarg,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message
   * Process a user message and return the agent's response.
   * This endpoint accepts a message from a user and processes it through the agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns LettaResponse Successful Response
   * @throws ApiError
   */
  public static sendMessage(
    data: SendMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<SendMessageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Message
   * Update the details of a message associated with an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.messageId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static modifyMessage(
    data: ModifyMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyMessageResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/messages/{message_id}',
      path: {
        agent_id: data.agentId,
        message_id: data.messageId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message Streaming
   * Process a user message and return the agent's response.
   * This endpoint accepts a message from a user and processes it through the agent.
   * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful response
   * @throws ApiError
   */
  public static createAgentMessageStream(
    data: CreateAgentMessageStreamData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentMessageStreamResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/stream',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Cancel Agent Run
   * Cancel runs associated with an agent. If run_ids are passed in, cancel those in particular.
   *
   * Note to cancel active runs associated with an agent, redis is required.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.userId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static cancelAgentRun(
    data: CancelAgentRunData,
    headers?: { user_id: string },
  ): CancelablePromise<CancelAgentRunResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/cancel',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Message Async
   * Asynchronously process a user message and return a run object.
   * The actual processing happens in the background, and the status can be checked using the run ID.
   *
   * This is "asynchronous" in the sense that it's a background job and explicitly must be fetched by the run ID.
   * This is more like `send_message_job`
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static createAgentMessageAsync(
    data: CreateAgentMessageAsyncData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateAgentMessageAsyncResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/async',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Reset Messages
   * Resets the messages for an agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.addDefaultInitialMessages If true, adds the default initial messages after resetting.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static resetMessages(
    data: ResetMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ResetMessagesResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/agents/{agent_id}/reset-messages',
      path: {
        agent_id: data.agentId,
      },
      query: {
        add_default_initial_messages: data.addDefaultInitialMessages,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agent Groups
   * Lists the groups for an agent
   * @param data The data for the request.
   * @param data.agentId
   * @param data.managerType Manager type to filter groups by
   * @param data.userId
   * @returns Group Successful Response
   * @throws ApiError
   */
  public static listAgentGroups(
    data: ListAgentGroupsData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentGroupsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/agents/{agent_id}/groups',
      path: {
        agent_id: data.agentId,
      },
      query: {
        manager_type: data.managerType,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Preview Raw Payload
   * Inspect the raw LLM request payload without sending it.
   *
   * This endpoint processes the message through the agent loop up until
   * the LLM request, then returns the raw request payload that would
   * be sent to the LLM provider. Useful for debugging and inspection.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static previewRawPayload(
    data: PreviewRawPayloadData,
    headers?: { user_id: string },
  ): CancelablePromise<PreviewRawPayloadResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/messages/preview-raw-payload',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Summarize Agent Conversation
   * Summarize an agent's conversation history to a target message length.
   *
   * This endpoint summarizes the current message history for a given agent,
   * truncating and compressing it down to the specified `max_message_length`.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.maxMessageLength Maximum number of messages to retain after summarization.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static summarizeAgentConversation(
    data: SummarizeAgentConversationData,
    headers?: { user_id: string },
  ): CancelablePromise<SummarizeAgentConversationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/agents/{agent_id}/summarize',
      path: {
        agent_id: data.agentId,
      },
      query: {
        max_message_length: data.maxMessageLength,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class GroupsService {
  /**
   * List Groups
   * Fetch all multi-agent groups matching query.
   * @param data The data for the request.
   * @param data.managerType Search groups by manager type
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Limit for pagination
   * @param data.projectId Search groups by project id
   * @param data.userId
   * @returns Group Successful Response
   * @throws ApiError
   */
  public static listGroups(
    data: ListGroupsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListGroupsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/groups/',
      query: {
        manager_type: data.managerType,
        before: data.before,
        after: data.after,
        limit: data.limit,
        project_id: data.projectId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Group
   * Create a new multi-agent group with the specified configuration.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @param data.xProject The project slug to associate with the group (cloud only).
   * @returns Group Successful Response
   * @throws ApiError
   */
  public static createGroup(
    data: CreateGroupData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateGroupResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/groups/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Count Groups
   * Get the count of all groups associated with a given user.
   * @param data The data for the request.
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countGroups(
    data: CountGroupsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountGroupsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/groups/count',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Group
   * Retrieve the group by id.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.userId
   * @returns Group Successful Response
   * @throws ApiError
   */
  public static retrieveGroup(
    data: RetrieveGroupData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveGroupResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Group
   * Create a new multi-agent group with the specified configuration.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.requestBody
   * @param data.userId
   * @param data.xProject The project slug to associate with the group (cloud only).
   * @returns Group Successful Response
   * @throws ApiError
   */
  public static modifyGroup(
    data: ModifyGroupData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyGroupResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Group
   * Delete a multi-agent group.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteGroup(
    data: DeleteGroupData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteGroupResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/groups/{group_id}',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Group Message
   * Process a user message and return the group's response.
   * This endpoint accepts a message from a user and processes it through through agents in the group based on the specified pattern
   * @param data The data for the request.
   * @param data.groupId
   * @param data.requestBody
   * @param data.userId
   * @returns LettaResponse Successful Response
   * @throws ApiError
   */
  public static sendGroupMessage(
    data: SendGroupMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<SendGroupMessageResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/groups/{group_id}/messages',
      path: {
        group_id: data.groupId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Group Messages
   * Retrieve message history for an agent.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.after Message after which to retrieve the returned messages.
   * @param data.before Message before which to retrieve the returned messages.
   * @param data.limit Maximum number of messages to retrieve.
   * @param data.useAssistantMessage Whether to use assistant messages
   * @param data.assistantMessageToolName The name of the designated message tool.
   * @param data.assistantMessageToolKwarg The name of the message argument.
   * @param data.userId
   * @returns LettaMessageUnion Successful Response
   * @throws ApiError
   */
  public static listGroupMessages(
    data: ListGroupMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListGroupMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/groups/{group_id}/messages',
      path: {
        group_id: data.groupId,
      },
      query: {
        after: data.after,
        before: data.before,
        limit: data.limit,
        use_assistant_message: data.useAssistantMessage,
        assistant_message_tool_name: data.assistantMessageToolName,
        assistant_message_tool_kwarg: data.assistantMessageToolKwarg,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Send Group Message Streaming
   * Process a user message and return the group's responses.
   * This endpoint accepts a message from a user and processes it through agents in the group based on the specified pattern.
   * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful response
   * @throws ApiError
   */
  public static sendGroupMessageStreaming(
    data: SendGroupMessageStreamingData,
    headers?: { user_id: string },
  ): CancelablePromise<SendGroupMessageStreamingResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/groups/{group_id}/messages/stream',
      path: {
        group_id: data.groupId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Group Message
   * Update the details of a message associated with an agent.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.messageId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static modifyGroupMessage(
    data: ModifyGroupMessageData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyGroupMessageResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/groups/{group_id}/messages/{message_id}',
      path: {
        group_id: data.groupId,
        message_id: data.messageId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Reset Group Messages
   * Delete the group messages for all agents that are part of the multi-agent group.
   * @param data The data for the request.
   * @param data.groupId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static resetGroupMessages(
    data: ResetGroupMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ResetGroupMessagesResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/groups/{group_id}/reset-messages',
      path: {
        group_id: data.groupId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class IdentitiesService {
  /**
   * List Identities
   * Get a list of all identities in the database
   * @param data The data for the request.
   * @param data.name
   * @param data.projectId
   * @param data.identifierKey
   * @param data.identityType
   * @param data.before
   * @param data.after
   * @param data.limit
   * @param data.userId
   * @returns Identity Successful Response
   * @throws ApiError
   */
  public static listIdentities(
    data: ListIdentitiesData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/identities/',
      query: {
        name: data.name,
        project_id: data.projectId,
        identifier_key: data.identifierKey,
        identity_type: data.identityType,
        before: data.before,
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Identity
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @param data.xProject The project slug to associate with the identity (cloud only).
   * @returns Identity Successful Response
   * @throws ApiError
   */
  public static createIdentity(
    data: CreateIdentityData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/identities/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Identity
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @param data.xProject The project slug to associate with the identity (cloud only).
   * @returns Identity Successful Response
   * @throws ApiError
   */
  public static upsertIdentity(
    data: UpsertIdentityData,
    headers?: { user_id: string },
  ): CancelablePromise<UpsertIdentityResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/identities/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Count Identities
   * Get count of all identities for a user
   * @param data The data for the request.
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countIdentities(
    data: CountIdentitiesData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountIdentitiesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/identities/count',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Identity
   * @param data The data for the request.
   * @param data.identityId
   * @param data.userId
   * @returns Identity Successful Response
   * @throws ApiError
   */
  public static retrieveIdentity(
    data: RetrieveIdentityData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveIdentityResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/identities/{identity_id}',
      path: {
        identity_id: data.identityId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Identity
   * @param data The data for the request.
   * @param data.identityId
   * @param data.requestBody
   * @param data.userId
   * @returns Identity Successful Response
   * @throws ApiError
   */
  public static updateIdentity(
    data: UpdateIdentityData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateIdentityResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/identities/{identity_id}',
      path: {
        identity_id: data.identityId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Identity
   * Delete an identity by its identifier key
   * @param data The data for the request.
   * @param data.identityId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteIdentity(
    data: DeleteIdentityData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteIdentityResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/identities/{identity_id}',
      path: {
        identity_id: data.identityId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Upsert Identity Properties
   * @param data The data for the request.
   * @param data.identityId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static upsertIdentityProperties(
    data: UpsertIdentityPropertiesData,
    headers?: { user_id: string },
  ): CancelablePromise<UpsertIdentityPropertiesResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/identities/{identity_id}/properties',
      path: {
        identity_id: data.identityId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class ModelsService {
  /**
   * List Llm Models
   * List available LLM models using the asynchronous implementation for improved performance
   * @param data The data for the request.
   * @param data.providerCategory
   * @param data.providerName
   * @param data.providerType
   * @param data.userId
   * @returns LLMConfig Successful Response
   * @throws ApiError
   */
  public static listModels(
    data: ListModelsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/',
      query: {
        provider_category: data.providerCategory,
        provider_name: data.providerName,
        provider_type: data.providerType,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Embedding Models
   * List available embedding models using the asynchronous implementation for improved performance
   * @param data The data for the request.
   * @param data.userId
   * @returns EmbeddingConfig Successful Response
   * @throws ApiError
   */
  public static listEmbeddingModels(
    data: ListEmbeddingModelsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListEmbeddingModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/embedding',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class LlmsService {
  /**
   * List Llm Models
   * List available LLM models using the asynchronous implementation for improved performance
   * @param data The data for the request.
   * @param data.providerCategory
   * @param data.providerName
   * @param data.providerType
   * @param data.userId
   * @returns LLMConfig Successful Response
   * @throws ApiError
   */
  public static listModels(
    data: ListModelsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/',
      query: {
        provider_category: data.providerCategory,
        provider_name: data.providerName,
        provider_type: data.providerType,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Embedding Models
   * List available embedding models using the asynchronous implementation for improved performance
   * @param data The data for the request.
   * @param data.userId
   * @returns EmbeddingConfig Successful Response
   * @throws ApiError
   */
  public static listEmbeddingModels(
    data: ListEmbeddingModelsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListEmbeddingModelsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/models/embedding',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class BlocksService {
  /**
   * List Blocks
   * @param data The data for the request.
   * @param data.label Labels to include (e.g. human, persona)
   * @param data.templatesOnly Whether to include only templates
   * @param data.name Name of the block
   * @param data.identityId Search agents by identifier id
   * @param data.identifierKeys Search agents by identifier keys
   * @param data.limit Number of blocks to return
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static listBlocks(
    data: ListBlocksData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListBlocksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/',
      query: {
        label: data.label,
        templates_only: data.templatesOnly,
        name: data.name,
        identity_id: data.identityId,
        identifier_keys: data.identifierKeys,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Block
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static createBlock(
    data: CreateBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateBlockResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/blocks/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Count Blocks
   * Count all blocks created by a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns number Successful Response
   * @throws ApiError
   */
  public static countBlocks(
    data: CountBlocksData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CountBlocksResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/count',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.requestBody
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static modifyBlock(
    data: ModifyBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyBlockResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static deleteBlock(
    data: DeleteBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteBlockResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Block
   * @param data The data for the request.
   * @param data.blockId
   * @param data.userId
   * @returns Block Successful Response
   * @throws ApiError
   */
  public static retrieveBlock(
    data: RetrieveBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/{block_id}',
      path: {
        block_id: data.blockId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Agents For Block
   * Retrieves all agents associated with the specified block.
   * Raises a 404 if the block does not exist.
   * @param data The data for the request.
   * @param data.blockId
   * @param data.includeRelationships Specify which relational fields (e.g., 'tools', 'sources', 'memory') to include in the response. If not provided, all relationships are loaded by default. Using this can optimize performance by reducing unnecessary joins.
   * @param data.userId
   * @returns AgentState Successful Response
   * @throws ApiError
   */
  public static listAgentsForBlock(
    data: ListAgentsForBlockData,
    headers?: { user_id: string },
  ): CancelablePromise<ListAgentsForBlockResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/blocks/{block_id}/agents',
      path: {
        block_id: data.blockId,
      },
      query: {
        include_relationships: data.includeRelationships,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class JobsService {
  /**
   * List Jobs
   * List all jobs.
   * TODO (cliandy): implementation for pagination
   * @param data The data for the request.
   * @param data.sourceId Only list jobs associated with the source.
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Limit for pagination
   * @param data.ascending Whether to sort jobs oldest to newest (True, default) or newest to oldest (False)
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listJobs(
    data: ListJobsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListJobsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/',
      query: {
        source_id: data.sourceId,
        before: data.before,
        after: data.after,
        limit: data.limit,
        ascending: data.ascending,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Active Jobs
   * List all active jobs.
   * @param data The data for the request.
   * @param data.sourceId Only list jobs associated with the source.
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Limit for pagination
   * @param data.ascending Whether to sort jobs oldest to newest (True, default) or newest to oldest (False)
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static listActiveJobs(
    data: ListActiveJobsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListActiveJobsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/active',
      query: {
        source_id: data.sourceId,
        before: data.before,
        after: data.after,
        limit: data.limit,
        ascending: data.ascending,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Job
   * Get the status of a job.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static retrieveJob(
    data: RetrieveJobData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveJobResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/jobs/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Job
   * Delete a job by its job_id.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static deleteJob(
    data: DeleteJobData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteJobResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/jobs/{job_id}',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Cancel Job
   * Cancel a job by its job_id.
   *
   * This endpoint marks a job as cancelled, which will cause any associated
   * agent execution to terminate as soon as possible.
   * @param data The data for the request.
   * @param data.jobId
   * @param data.userId
   * @returns Job Successful Response
   * @throws ApiError
   */
  public static cancelJob(
    data: CancelJobData,
    headers?: { user_id: string },
  ): CancelablePromise<CancelJobResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/jobs/{job_id}/cancel',
      path: {
        job_id: data.jobId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class HealthService {
  /**
   * Health Check
   * @returns Health Successful Response
   * @throws ApiError
   */
  public static healthCheck(headers?: {
    user_id: string;
  }): CancelablePromise<HealthCheckResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/health/',
      headers,
    });
  }
}

export class SandboxConfigService {
  /**
   * Create Sandbox Config
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createSandboxConfigV1SandboxConfigPost(
    data: CreateSandboxConfigV1SandboxConfigPostData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSandboxConfigV1SandboxConfigPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sandbox Configs
   * @param data The data for the request.
   * @param data.limit Number of results to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.sandboxType Filter for this specific sandbox type
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static listSandboxConfigsV1SandboxConfigGet(
    data: ListSandboxConfigsV1SandboxConfigGetData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListSandboxConfigsV1SandboxConfigGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sandbox-config/',
      query: {
        limit: data.limit,
        after: data.after,
        sandbox_type: data.sandboxType,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Default E2B Sandbox Config
   * @param data The data for the request.
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPost(
    data: CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CreateDefaultE2bSandboxConfigV1SandboxConfigE2bDefaultPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/e2b/default',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Default Local Sandbox Config
   * @param data The data for the request.
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPost(
    data: CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostData = {},
    headers?: { user_id: string },
  ): CancelablePromise<CreateDefaultLocalSandboxConfigV1SandboxConfigLocalDefaultPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/local/default',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Custom Local Sandbox Config
   * Create or update a custom LocalSandboxConfig, including pip_requirements.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static createCustomLocalSandboxConfigV1SandboxConfigLocalPost(
    data: CreateCustomLocalSandboxConfigV1SandboxConfigLocalPostData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateCustomLocalSandboxConfigV1SandboxConfigLocalPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/local',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Sandbox Config
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static updateSandboxConfigV1SandboxConfigSandboxConfigIdPatch(
    data: UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateSandboxConfigV1SandboxConfigSandboxConfigIdPatchResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sandbox-config/{sandbox_config_id}',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Sandbox Config
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteSandboxConfigV1SandboxConfigSandboxConfigIdDelete(
    data: DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSandboxConfigV1SandboxConfigSandboxConfigIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sandbox-config/{sandbox_config_id}',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Force Recreate Local Sandbox Venv
   * Forcefully recreate the virtual environment for the local sandbox.
   * Deletes and recreates the venv, then reinstalls required dependencies.
   * @param data The data for the request.
   * @param data.userId
   * @returns SandboxConfig Successful Response
   * @throws ApiError
   */
  public static forceRecreateLocalSandboxVenvV1SandboxConfigLocalRecreateVenvPost(
    data: ForceRecreateLocalSandboxVenvV1SandboxConfigLocalRecreateVenvPostData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ForceRecreateLocalSandboxVenvV1SandboxConfigLocalRecreateVenvPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/local/recreate-venv',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Sandbox Env Var
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static createSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePost(
    data: CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateSandboxEnvVarV1SandboxConfigSandboxConfigIdEnvironmentVariablePostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/sandbox-config/{sandbox_config_id}/environment-variable',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Sandbox Env Vars
   * @param data The data for the request.
   * @param data.sandboxConfigId
   * @param data.limit Number of results to return
   * @param data.after Pagination cursor to fetch the next set of results
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static listSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGet(
    data: ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetData,
    headers?: { user_id: string },
  ): CancelablePromise<ListSandboxEnvVarsV1SandboxConfigSandboxConfigIdEnvironmentVariableGetResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/sandbox-config/{sandbox_config_id}/environment-variable',
      path: {
        sandbox_config_id: data.sandboxConfigId,
      },
      query: {
        limit: data.limit,
        after: data.after,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Sandbox Env Var
   * @param data The data for the request.
   * @param data.envVarId
   * @param data.requestBody
   * @param data.userId
   * @returns SandboxEnvironmentVariable Successful Response
   * @throws ApiError
   */
  public static updateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatch(
    data: UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdPatchResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/sandbox-config/environment-variable/{env_var_id}',
      path: {
        env_var_id: data.envVarId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Sandbox Env Var
   * @param data The data for the request.
   * @param data.envVarId
   * @param data.userId
   * @returns void Successful Response
   * @throws ApiError
   */
  public static deleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDelete(
    data: DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteSandboxEnvVarV1SandboxConfigEnvironmentVariableEnvVarIdDeleteResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/sandbox-config/environment-variable/{env_var_id}',
      path: {
        env_var_id: data.envVarId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class ProvidersService {
  /**
   * List Providers
   * Get a list of all custom providers in the database
   * @param data The data for the request.
   * @param data.name
   * @param data.providerType
   * @param data.after
   * @param data.limit
   * @param data.userId
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static listProviders(
    data: ListProvidersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListProvidersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/providers/',
      query: {
        name: data.name,
        provider_type: data.providerType,
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Provider
   * Create a new custom provider
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static createProvider(
    data: CreateProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateProviderResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/providers/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Modify Provider
   * Update an existing custom provider
   * @param data The data for the request.
   * @param data.providerId
   * @param data.requestBody
   * @param data.userId
   * @returns Provider Successful Response
   * @throws ApiError
   */
  public static modifyProvider(
    data: ModifyProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<ModifyProviderResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/providers/{provider_id}',
      path: {
        provider_id: data.providerId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Provider
   * Delete an existing custom provider
   * @param data The data for the request.
   * @param data.providerId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static deleteProvider(
    data: DeleteProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteProviderResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/providers/{provider_id}',
      path: {
        provider_id: data.providerId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Check Provider
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static checkProvider(
    data: CheckProviderData,
    headers?: { user_id: string },
  ): CancelablePromise<CheckProviderResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/providers/check',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class RunsService {
  /**
   * List Runs
   * List all runs.
   * @param data The data for the request.
   * @param data.agentIds The unique identifier of the agent associated with the run.
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static listRuns(
    data: ListRunsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/',
      query: {
        agent_ids: data.agentIds,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Active Runs
   * List all active runs.
   * @param data The data for the request.
   * @param data.agentIds The unique identifier of the agent associated with the run.
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static listActiveRuns(
    data: ListActiveRunsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListActiveRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/active',
      query: {
        agent_ids: data.agentIds,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Run
   * Get the status of a run.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static retrieveRun(
    data: RetrieveRunData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveRunResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Run
   * Delete a run by its run_id.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns Run Successful Response
   * @throws ApiError
   */
  public static deleteRun(
    data: DeleteRunData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteRunResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/runs/{run_id}',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Run Messages
   * Get messages associated with a run with filtering options.
   *
   * Args:
   * run_id: ID of the run
   * before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   * after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   * limit: Maximum number of messages to return
   * order: Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   * role: Filter by role (user/assistant/system/tool)
   * return_message_object: Whether to return Message objects or LettaMessage objects
   * user_id: ID of the user making the request
   *
   * Returns:
   * A list of messages associated with the run. Default is List[LettaMessage].
   * @param data The data for the request.
   * @param data.runId
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Maximum number of messages to return
   * @param data.order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   * @param data.role Filter by role
   * @param data.userId
   * @returns LettaMessageUnion Successful Response
   * @throws ApiError
   */
  public static listRunMessages(
    data: ListRunMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListRunMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}/messages',
      path: {
        run_id: data.runId,
      },
      query: {
        before: data.before,
        after: data.after,
        limit: data.limit,
        order: data.order,
        role: data.role,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Run Usage
   * Get usage statistics for a run.
   * @param data The data for the request.
   * @param data.runId
   * @param data.userId
   * @returns UsageStatistics Successful Response
   * @throws ApiError
   */
  public static retrieveRunUsage(
    data: RetrieveRunUsageData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveRunUsageResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}/usage',
      path: {
        run_id: data.runId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Run Steps
   * Get messages associated with a run with filtering options.
   *
   * Args:
   * run_id: ID of the run
   * before: A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   * after: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   * limit: Maximum number of steps to return
   * order: Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   *
   * Returns:
   * A list of steps associated with the run.
   * @param data The data for the request.
   * @param data.runId
   * @param data.before Cursor for pagination
   * @param data.after Cursor for pagination
   * @param data.limit Maximum number of messages to return
   * @param data.order Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order.
   * @param data.userId
   * @returns Step Successful Response
   * @throws ApiError
   */
  public static listRunSteps(
    data: ListRunStepsData,
    headers?: { user_id: string },
  ): CancelablePromise<ListRunStepsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/runs/{run_id}/steps',
      path: {
        run_id: data.runId,
      },
      query: {
        before: data.before,
        after: data.after,
        limit: data.limit,
        order: data.order,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class StepsService {
  /**
   * List Steps
   * List steps with optional pagination and date filters.
   * Dates should be provided in ISO 8601 format (e.g. 2025-01-29T15:01:19-08:00)
   * @param data The data for the request.
   * @param data.before Return steps before this step ID
   * @param data.after Return steps after this step ID
   * @param data.limit Maximum number of steps to return
   * @param data.order Sort order (asc or desc)
   * @param data.startDate Return steps after this ISO datetime (e.g. "2025-01-29T15:01:19-08:00")
   * @param data.endDate Return steps before this ISO datetime (e.g. "2025-01-29T15:01:19-08:00")
   * @param data.model Filter by the name of the model used for the step
   * @param data.agentId Filter by the ID of the agent that performed the step
   * @param data.traceIds Filter by trace ids returned by the server
   * @param data.feedback Filter by feedback
   * @param data.hasFeedback Filter by whether steps have feedback (true) or not (false)
   * @param data.tags Filter by tags
   * @param data.projectId Filter by the project ID that is associated with the step (cloud only).
   * @param data.userId
   * @param data.xProject Filter by project slug to associate with the group (cloud only).
   * @returns Step Successful Response
   * @throws ApiError
   */
  public static listSteps(
    data: ListStepsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListStepsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/steps/',
      query: {
        before: data.before,
        after: data.after,
        limit: data.limit,
        order: data.order,
        start_date: data.startDate,
        end_date: data.endDate,
        model: data.model,
        agent_id: data.agentId,
        trace_ids: data.traceIds,
        feedback: data.feedback,
        has_feedback: data.hasFeedback,
        tags: data.tags,
        project_id: data.projectId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Step
   * Get a step by ID.
   * @param data The data for the request.
   * @param data.stepId
   * @param data.userId
   * @returns Step Successful Response
   * @throws ApiError
   */
  public static retrieveStep(
    data: RetrieveStepData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveStepResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/steps/{step_id}',
      path: {
        step_id: data.stepId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Add Feedback
   * Add feedback to a step.
   * @param data The data for the request.
   * @param data.stepId
   * @param data.feedback
   * @param data.userId
   * @returns Step Successful Response
   * @throws ApiError
   */
  public static addFeedback(
    data: AddFeedbackData,
    headers?: { user_id: string },
  ): CancelablePromise<AddFeedbackResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/steps/{step_id}/feedback',
      path: {
        step_id: data.stepId,
      },
      query: {
        feedback: data.feedback,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Step Transaction Id
   * Update the transaction ID for a step.
   * @param data The data for the request.
   * @param data.stepId
   * @param data.transactionId
   * @param data.userId
   * @returns Step Successful Response
   * @throws ApiError
   */
  public static updateStepTransactionId(
    data: UpdateStepTransactionIdData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateStepTransactionIdResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/steps/{step_id}/transaction/{transaction_id}',
      path: {
        step_id: data.stepId,
        transaction_id: data.transactionId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class TagService {
  /**
   * List Tags
   * Get a list of all tags in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.queryText
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static listTags(
    data: ListTagsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tags/',
      query: {
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AdminService {
  /**
   * List Tags
   * Get a list of all tags in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @param data.queryText
   * @param data.userId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static listTags(
    data: ListTagsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListTagsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tags/',
      query: {
        after: data.after,
        limit: data.limit,
        query_text: data.queryText,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Users
   * Get a list of all users in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public static listUsers(
    data: ListUsersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/users/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create User
   * Create a new user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update User
   * Update a user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId The user_id key to be deleted.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/users/',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Get All Orgs
   * Get a list of all orgs in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static listOrgs(
    data: ListOrgsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListOrgsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/orgs/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Org
   * Create a new org in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static createOrganization(
    data: CreateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/orgs/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be deleted.
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static deleteOrganizationById(
    data: DeleteOrganizationByIdData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be updated.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static updateOrganization(
    data: UpdateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class TelemetryService {
  /**
   * Retrieve Provider Trace By Step Id
   * @param data The data for the request.
   * @param data.stepId
   * @param data.userId
   * @returns ProviderTrace Successful Response
   * @throws ApiError
   */
  public static retrieveProviderTrace(
    data: RetrieveProviderTraceData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveProviderTraceResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/telemetry/{step_id}',
      path: {
        step_id: data.stepId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class MessagesService {
  /**
   * Create Messages Batch
   * Submit a batch of agent messages for asynchronous processing.
   * Creates a job that will fan out messages to all listed agents and process them in parallel.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.userId
   * @returns BatchJob Successful Response
   * @throws ApiError
   */
  public static createMessagesBatch(
    data: CreateMessagesBatchData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateMessagesBatchResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/messages/batches',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Batch Runs
   * List all batch runs.
   * @param data The data for the request.
   * @param data.userId
   * @returns BatchJob Successful Response
   * @throws ApiError
   */
  public static listBatchRuns(
    data: ListBatchRunsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListBatchRunsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/messages/batches',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Retrieve Batch Run
   * Get the status of a batch run.
   * @param data The data for the request.
   * @param data.batchId
   * @param data.userId
   * @returns BatchJob Successful Response
   * @throws ApiError
   */
  public static retrieveBatchRun(
    data: RetrieveBatchRunData,
    headers?: { user_id: string },
  ): CancelablePromise<RetrieveBatchRunResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/messages/batches/{batch_id}',
      path: {
        batch_id: data.batchId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * List Batch Messages
   * Get messages for a specific batch job.
   *
   * Returns messages associated with the batch in chronological order.
   *
   * Pagination:
   * - For the first page, omit the cursor parameter
   * - For subsequent pages, use the ID of the last message from the previous response as the cursor
   * - Results will include messages before/after the cursor based on sort_descending
   * @param data The data for the request.
   * @param data.batchId
   * @param data.limit Maximum number of messages to return
   * @param data.cursor Message ID to use as pagination cursor (get messages before/after this ID) depending on sort_descending.
   * @param data.agentId Filter messages by agent ID
   * @param data.sortDescending Sort messages by creation time (true=newest first)
   * @param data.userId
   * @returns LettaBatchMessages Successful Response
   * @throws ApiError
   */
  public static listBatchMessages(
    data: ListBatchMessagesData,
    headers?: { user_id: string },
  ): CancelablePromise<ListBatchMessagesResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/messages/batches/{batch_id}/messages',
      path: {
        batch_id: data.batchId,
      },
      query: {
        limit: data.limit,
        cursor: data.cursor,
        agent_id: data.agentId,
        sort_descending: data.sortDescending,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Cancel Batch Run
   * Cancel a batch run.
   * @param data The data for the request.
   * @param data.batchId
   * @param data.userId
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static cancelBatchRun(
    data: CancelBatchRunData,
    headers?: { user_id: string },
  ): CancelablePromise<CancelBatchRunResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/messages/batches/{batch_id}/cancel',
      path: {
        batch_id: data.batchId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class VoiceService {
  /**
   * Create Voice Chat Completions
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @param data.userId
   * @returns unknown Successful response
   * @throws ApiError
   */
  public static createVoiceChatCompletions(
    data: CreateVoiceChatCompletionsData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateVoiceChatCompletionsResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/voice-beta/{agent_id}/chat/completions',
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class EmbeddingsService {
  /**
   * Get Embeddings Total Storage Size
   * Get the total size of all embeddings in the database for a user in the storage unit given.
   * @param data The data for the request.
   * @param data.userId
   * @param data.storageUnit
   * @returns number Successful Response
   * @throws ApiError
   */
  public static getTotalStorageSize(
    data: GetTotalStorageSizeData = {},
    headers?: { user_id: string },
  ): CancelablePromise<GetTotalStorageSizeResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/embeddings/total_storage_size',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class UsersService {
  /**
   * List Users
   * Get a list of all users in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns User Successful Response
   * @throws ApiError
   */
  public static listUsers(
    data: ListUsersData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/users/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create User
   * Create a new user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update User
   * Update a user in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/admin/users/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete User
   * @param data The data for the request.
   * @param data.userId The user_id key to be deleted.
   * @returns User Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/users/',
      query: {
        user_id: data.userId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class OrganizationService {
  /**
   * Get All Orgs
   * Get a list of all orgs in the database
   * @param data The data for the request.
   * @param data.after
   * @param data.limit
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static listOrgs(
    data: ListOrgsData = {},
    headers?: { user_id: string },
  ): CancelablePromise<ListOrgsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/admin/orgs/',
      query: {
        after: data.after,
        limit: data.limit,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Create Org
   * Create a new org in the database
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static createOrganization(
    data: CreateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<CreateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/admin/orgs/',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Delete Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be deleted.
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static deleteOrganizationById(
    data: DeleteOrganizationByIdData,
    headers?: { user_id: string },
  ): CancelablePromise<DeleteOrganizationByIdResponse> {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }

  /**
   * Update Org
   * @param data The data for the request.
   * @param data.orgId The org_id key to be updated.
   * @param data.requestBody
   * @returns Organization Successful Response
   * @throws ApiError
   */
  public static updateOrganization(
    data: UpdateOrganizationData,
    headers?: { user_id: string },
  ): CancelablePromise<UpdateOrganizationResponse> {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/admin/orgs/',
      query: {
        org_id: data.orgId,
      },
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}

export class AuthService {
  /**
   * Authenticate User
   * Authenticates the user and sends response with User related data.
   *
   * Currently, this is a placeholder that simply returns a UUID placeholder
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AuthResponse Successful Response
   * @throws ApiError
   */
  public static authenticateUserV1AuthPost(
    data: AuthenticateUserV1AuthPostData,
    headers?: { user_id: string },
  ): CancelablePromise<AuthenticateUserV1AuthPostResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/auth',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        422: 'Validation Error',
      },
      headers,
    });
  }
}
