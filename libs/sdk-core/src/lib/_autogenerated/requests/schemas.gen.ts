// This file is auto-generated by @hey-api/openapi-ts

export const $ActionModel = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    parameters: {
      $ref: '#/components/schemas/ActionParametersModel',
    },
    response: {
      $ref: '#/components/schemas/ActionResponseModel',
    },
    appName: {
      type: 'string',
      title: 'Appname',
    },
    appId: {
      type: 'string',
      title: 'Appid',
    },
    version: {
      type: 'string',
      title: 'Version',
    },
    available_versions: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Available Versions',
    },
    tags: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tags',
    },
    logo: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logo',
    },
    display_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Display Name',
    },
    enabled: {
      type: 'boolean',
      title: 'Enabled',
      default: false,
    },
  },
  type: 'object',
  required: [
    'name',
    'description',
    'parameters',
    'response',
    'appName',
    'appId',
    'version',
    'available_versions',
    'tags',
  ],
  title: 'ActionModel',
  description: 'Action data model.',
} as const;

export const $ActionParametersModel = {
  properties: {
    properties: {
      type: 'object',
      title: 'Properties',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
    required: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Required',
    },
    examples: {
      anyOf: [
        {
          items: {},
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Examples',
    },
  },
  type: 'object',
  required: ['properties', 'title', 'type'],
  title: 'ActionParametersModel',
  description: 'Action parameter data models.',
} as const;

export const $ActionResponseModel = {
  properties: {
    properties: {
      type: 'object',
      title: 'Properties',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
    required: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Required',
    },
    examples: {
      anyOf: [
        {
          items: {},
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Examples',
    },
  },
  type: 'object',
  required: ['properties', 'title', 'type'],
  title: 'ActionResponseModel',
  description: 'Action response data model.',
} as const;

export const $AgentEnvironmentVariable = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    id: {
      type: 'string',
      pattern: '^agent-env-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Agent-env',
      examples: ['agent-env-123e4567-e89b-12d3-a456-426614174000'],
    },
    key: {
      type: 'string',
      title: 'Key',
      description: 'The name of the environment variable.',
    },
    value: {
      type: 'string',
      title: 'Value',
      description: 'The value of the environment variable.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'An optional description of the environment variable.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The ID of the organization this environment variable belongs to.',
    },
    agent_id: {
      type: 'string',
      title: 'Agent Id',
      description: 'The ID of the agent this environment variable belongs to.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['key', 'value', 'agent_id'],
  title: 'AgentEnvironmentVariable',
} as const;

export const $AgentState = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    id: {
      type: 'string',
      title: 'Id',
      description: 'The id of the agent. Assigned by the database.',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the agent.',
    },
    tool_rules: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/ChildToolRule',
              },
              {
                $ref: '#/components/schemas/InitToolRule',
              },
              {
                $ref: '#/components/schemas/TerminalToolRule',
              },
              {
                $ref: '#/components/schemas/ConditionalToolRule',
              },
              {
                $ref: '#/components/schemas/ContinueToolRule',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                conditional: '#/components/schemas/ConditionalToolRule',
                constrain_child_tools: '#/components/schemas/ChildToolRule',
                continue_loop: '#/components/schemas/ContinueToolRule',
                exit_loop: '#/components/schemas/TerminalToolRule',
                run_first: '#/components/schemas/InitToolRule',
              },
            },
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Rules',
      description: 'The list of tool rules.',
    },
    message_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Ids',
      description: "The ids of the messages in the agent's in-context memory.",
    },
    system: {
      type: 'string',
      title: 'System',
      description: 'The system prompt used by the agent.',
    },
    agent_type: {
      $ref: '#/components/schemas/AgentType',
      description: 'The type of agent.',
    },
    llm_config: {
      $ref: '#/components/schemas/LLMConfig',
      description: 'The LLM configuration used by the agent.',
    },
    embedding_config: {
      $ref: '#/components/schemas/EmbeddingConfig',
      description: 'The embedding configuration used by the agent.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the agent.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the agent.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the agent.',
    },
    memory: {
      $ref: '#/components/schemas/Memory',
      description: 'The in-context memory of the agent.',
    },
    tools: {
      items: {
        $ref: '#/components/schemas/Tool',
      },
      type: 'array',
      title: 'Tools',
      description: 'The tools used by the agent.',
    },
    sources: {
      items: {
        $ref: '#/components/schemas/Source',
      },
      type: 'array',
      title: 'Sources',
      description: 'The sources used by the agent.',
    },
    tags: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tags',
      description: 'The tags associated with the agent.',
    },
    tool_exec_environment_variables: {
      items: {
        $ref: '#/components/schemas/AgentEnvironmentVariable',
      },
      type: 'array',
      title: 'Tool Exec Environment Variables',
      description:
        'The environment variables for tool execution specific to this agent.',
    },
    project_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project Id',
      description: 'The id of the project the agent belongs to.',
    },
    template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Template Id',
      description: 'The id of the template the agent belongs to.',
    },
    base_template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Base Template Id',
      description: 'The base template id of the agent.',
    },
    identity_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Identity Ids',
      description: 'The ids of the identities associated with this agent.',
      default: [],
    },
    message_buffer_autoclear: {
      type: 'boolean',
      title: 'Message Buffer Autoclear',
      description:
        'If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case.',
      default: false,
    },
  },
  additionalProperties: false,
  type: 'object',
  required: [
    'id',
    'name',
    'system',
    'agent_type',
    'llm_config',
    'embedding_config',
    'memory',
    'tools',
    'sources',
    'tags',
  ],
  title: 'AgentState',
  description: `Representation of an agent's state. This is the state of the agent at a given time, and is persisted in the DB backend. The state has all the information needed to recreate a persisted agent.

Parameters:
    id (str): The unique identifier of the agent.
    name (str): The name of the agent (must be unique to the user).
    created_at (datetime): The datetime the agent was created.
    message_ids (List[str]): The ids of the messages in the agent's in-context memory.
    memory (Memory): The in-context memory of the agent.
    tools (List[str]): The tools used by the agent. This includes any memory editing functions specified in \`memory\`.
    system (str): The system prompt used by the agent.
    llm_config (LLMConfig): The LLM configuration used by the agent.
    embedding_config (EmbeddingConfig): The embedding configuration used by the agent.`,
} as const;

export const $AgentType = {
  type: 'string',
  enum: ['memgpt_agent', 'split_thread_agent', 'offline_memory_agent'],
  title: 'AgentType',
  description: 'Enum to represent the type of agent.',
} as const;

export const $AppAuthScheme = {
  properties: {
    scheme_name: {
      type: 'string',
      title: 'Scheme Name',
    },
    auth_mode: {
      type: 'string',
      enum: [
        'OAUTH2',
        'OAUTH1',
        'API_KEY',
        'BASIC',
        'BEARER_TOKEN',
        'BASIC_WITH_JWT',
        'NO_AUTH',
      ],
      title: 'Auth Mode',
    },
    fields: {
      items: {
        $ref: '#/components/schemas/AuthSchemeField',
      },
      type: 'array',
      title: 'Fields',
    },
    proxy: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Proxy',
    },
    authorization_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Authorization Url',
    },
    token_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Token Url',
    },
    default_scopes: {
      anyOf: [
        {
          items: {},
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Scopes',
    },
    token_response_metadata: {
      anyOf: [
        {
          items: {},
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Token Response Metadata',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Id',
    },
    client_secret: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Client Secret',
    },
  },
  type: 'object',
  required: ['scheme_name', 'auth_mode', 'fields'],
  title: 'AppAuthScheme',
  description: 'App authenticatio scheme.',
} as const;

export const $AppModel = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    key: {
      type: 'string',
      title: 'Key',
    },
    appId: {
      type: 'string',
      title: 'Appid',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    categories: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Categories',
    },
    meta: {
      type: 'object',
      title: 'Meta',
    },
    logo: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logo',
    },
    docs: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Docs',
    },
    group: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Group',
    },
    status: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Status',
    },
    enabled: {
      type: 'boolean',
      title: 'Enabled',
      default: false,
    },
    no_auth: {
      type: 'boolean',
      title: 'No Auth',
      default: false,
    },
    auth_schemes: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/AppAuthScheme',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Auth Schemes',
    },
    testConnectors: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Testconnectors',
    },
    documentation_doc_text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Documentation Doc Text',
    },
    configuration_docs_text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Configuration Docs Text',
    },
  },
  type: 'object',
  required: ['name', 'key', 'appId', 'description', 'categories', 'meta'],
  title: 'AppModel',
  description: 'App data model.',
} as const;

export const $AssistantMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['assistant_message'],
      const: 'assistant_message',
      title: 'Message Type',
      default: 'assistant_message',
    },
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
  },
  type: 'object',
  required: ['id', 'date', 'content'],
  title: 'AssistantMessage',
} as const;

export const $Audio = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['id'],
  title: 'Audio',
} as const;

export const $AuthRequest = {
  properties: {
    password: {
      type: 'string',
      title: 'Password',
      description: 'Admin password provided when starting the Letta server',
    },
  },
  type: 'object',
  title: 'AuthRequest',
} as const;

export const $AuthResponse = {
  properties: {
    uuid: {
      type: 'string',
      format: 'uuid',
      title: 'Uuid',
      description: 'UUID of the user',
    },
    is_admin: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Is Admin',
      description: 'Whether the user is an admin',
    },
  },
  type: 'object',
  required: ['uuid'],
  title: 'AuthResponse',
} as const;

export const $AuthSchemeField = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    display_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Display Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    type: {
      type: 'string',
      title: 'Type',
    },
    default: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default',
    },
    required: {
      type: 'boolean',
      title: 'Required',
      default: false,
    },
    expected_from_customer: {
      type: 'boolean',
      title: 'Expected From Customer',
      default: true,
    },
    get_current_user_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Get Current User Endpoint',
    },
  },
  type: 'object',
  required: ['name', 'description', 'type'],
  title: 'AuthSchemeField',
  description: 'Auth scheme field.',
} as const;

export const $Block = {
  properties: {
    value: {
      type: 'string',
      title: 'Value',
      description: 'Value of the block.',
    },
    limit: {
      type: 'integer',
      title: 'Limit',
      description: 'Character limit of the block.',
      default: 5000,
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the block if it is a template.',
    },
    is_template: {
      type: 'boolean',
      title: 'Is Template',
      description:
        'Whether the block is a template (e.g. saved human/persona options).',
      default: false,
    },
    label: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Label',
      description:
        "Label of the block (e.g. 'human', 'persona') in the context window.",
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the block.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata of the block.',
      default: {},
    },
    id: {
      type: 'string',
      pattern: '^block-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Block',
      examples: ['block-123e4567-e89b-12d3-a456-426614174000'],
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the block.',
    },
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this Block.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that last updated this Block.',
    },
  },
  type: 'object',
  required: ['value'],
  title: 'Block',
  description: `A Block represents a reserved section of the LLM's context window which is editable. \`Block\` objects contained in the \`Memory\` object, which is able to edit the Block values.

Parameters:
    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.
    value (str): The value of the block. This is the string that is represented in the context window.
    limit (int): The character limit of the block.
    is_template (bool): Whether the block is a template (e.g. saved human/persona options). Non-template blocks are not stored in the database and are ephemeral, while templated blocks are stored in the database.
    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.
    template_name (str): The name of the block template (if it is a template).
    description (str): Description of the block.
    metadata (Dict): Metadata of the block.
    user_id (str): The unique identifier of the user associated with the block.`,
} as const;

export const $BlockUpdate = {
  properties: {
    value: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Value',
      description: 'Value of the block.',
    },
    limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Limit',
      description: 'Character limit of the block.',
      default: 5000,
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the block if it is a template.',
    },
    is_template: {
      type: 'boolean',
      title: 'Is Template',
      description:
        'Whether the block is a template (e.g. saved human/persona options).',
      default: false,
    },
    label: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Label',
      description:
        "Label of the block (e.g. 'human', 'persona') in the context window.",
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the block.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata of the block.',
      default: {},
    },
  },
  type: 'object',
  title: 'BlockUpdate',
  description: 'Update a block',
} as const;

export const $Body_upload_agent_serialized = {
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      title: 'File',
    },
  },
  type: 'object',
  required: ['file'],
  title: 'Body_upload_agent_serialized',
} as const;

export const $Body_upload_file_to_source = {
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      title: 'File',
    },
  },
  type: 'object',
  required: ['file'],
  title: 'Body_upload_file_to_source',
} as const;

export const $ChatCompletionAssistantMessageParam = {
  properties: {
    role: {
      type: 'string',
      enum: ['assistant'],
      const: 'assistant',
      title: 'Role',
    },
    audio: {
      anyOf: [
        {
          $ref: '#/components/schemas/Audio',
        },
        {
          type: 'null',
        },
      ],
    },
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            anyOf: [
              {
                $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
              },
              {
                $ref: '#/components/schemas/ChatCompletionContentPartRefusalParam',
              },
            ],
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Content',
    },
    function_call: {
      anyOf: [
        {
          $ref: '#/components/schemas/FunctionCall',
        },
        {
          type: 'null',
        },
      ],
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    refusal: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Refusal',
    },
    tool_calls: {
      items: {
        $ref: '#/components/schemas/ChatCompletionMessageToolCallParam',
      },
      type: 'array',
      title: 'Tool Calls',
    },
  },
  type: 'object',
  required: ['role'],
  title: 'ChatCompletionAssistantMessageParam',
} as const;

export const $ChatCompletionAudioParam = {
  properties: {
    format: {
      type: 'string',
      enum: ['wav', 'mp3', 'flac', 'opus', 'pcm16'],
      title: 'Format',
    },
    voice: {
      type: 'string',
      enum: [
        'alloy',
        'ash',
        'ballad',
        'coral',
        'echo',
        'sage',
        'shimmer',
        'verse',
      ],
      title: 'Voice',
    },
  },
  type: 'object',
  required: ['format', 'voice'],
  title: 'ChatCompletionAudioParam',
} as const;

export const $ChatCompletionContentPartImageParam = {
  properties: {
    image_url: {
      $ref: '#/components/schemas/ImageURL',
    },
    type: {
      type: 'string',
      enum: ['image_url'],
      const: 'image_url',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['image_url', 'type'],
  title: 'ChatCompletionContentPartImageParam',
} as const;

export const $ChatCompletionContentPartInputAudioParam = {
  properties: {
    input_audio: {
      $ref: '#/components/schemas/InputAudio',
    },
    type: {
      type: 'string',
      enum: ['input_audio'],
      const: 'input_audio',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['input_audio', 'type'],
  title: 'ChatCompletionContentPartInputAudioParam',
} as const;

export const $ChatCompletionContentPartRefusalParam = {
  properties: {
    refusal: {
      type: 'string',
      title: 'Refusal',
    },
    type: {
      type: 'string',
      enum: ['refusal'],
      const: 'refusal',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['refusal', 'type'],
  title: 'ChatCompletionContentPartRefusalParam',
} as const;

export const $ChatCompletionContentPartTextParam = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
    },
    type: {
      type: 'string',
      enum: ['text'],
      const: 'text',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['text', 'type'],
  title: 'ChatCompletionContentPartTextParam',
} as const;

export const $ChatCompletionDeveloperMessageParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    role: {
      type: 'string',
      enum: ['developer'],
      const: 'developer',
      title: 'Role',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['content', 'role'],
  title: 'ChatCompletionDeveloperMessageParam',
} as const;

export const $ChatCompletionFunctionCallOptionParam = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'ChatCompletionFunctionCallOptionParam',
} as const;

export const $ChatCompletionFunctionMessageParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Content',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    role: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Role',
    },
  },
  type: 'object',
  required: ['content', 'name', 'role'],
  title: 'ChatCompletionFunctionMessageParam',
} as const;

export const $ChatCompletionMessageToolCall = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    function: {
      $ref: '#/components/schemas/Function-Output',
    },
    type: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Type',
    },
  },
  additionalProperties: true,
  type: 'object',
  required: ['id', 'function', 'type'],
  title: 'ChatCompletionMessageToolCall',
} as const;

export const $ChatCompletionMessageToolCallParam = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    function: {
      $ref: '#/components/schemas/openai__types__chat__chat_completion_message_tool_call_param__Function',
    },
    type: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['id', 'function', 'type'],
  title: 'ChatCompletionMessageToolCallParam',
} as const;

export const $ChatCompletionNamedToolChoiceParam = {
  properties: {
    function: {
      $ref: '#/components/schemas/openai__types__chat__chat_completion_named_tool_choice_param__Function',
    },
    type: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['function', 'type'],
  title: 'ChatCompletionNamedToolChoiceParam',
} as const;

export const $ChatCompletionPredictionContentParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    type: {
      type: 'string',
      enum: ['content'],
      const: 'content',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['content', 'type'],
  title: 'ChatCompletionPredictionContentParam',
} as const;

export const $ChatCompletionStreamOptionsParam = {
  properties: {
    include_usage: {
      type: 'boolean',
      title: 'Include Usage',
    },
  },
  type: 'object',
  title: 'ChatCompletionStreamOptionsParam',
} as const;

export const $ChatCompletionSystemMessageParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    role: {
      type: 'string',
      enum: ['system'],
      const: 'system',
      title: 'Role',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['content', 'role'],
  title: 'ChatCompletionSystemMessageParam',
} as const;

export const $ChatCompletionToolMessageParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    role: {
      type: 'string',
      enum: ['tool'],
      const: 'tool',
      title: 'Role',
    },
    tool_call_id: {
      type: 'string',
      title: 'Tool Call Id',
    },
  },
  type: 'object',
  required: ['content', 'role', 'tool_call_id'],
  title: 'ChatCompletionToolMessageParam',
} as const;

export const $ChatCompletionToolParam = {
  properties: {
    function: {
      $ref: '#/components/schemas/FunctionDefinition-Input',
    },
    type: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['function', 'type'],
  title: 'ChatCompletionToolParam',
} as const;

export const $ChatCompletionUserMessageParam = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            anyOf: [
              {
                $ref: '#/components/schemas/ChatCompletionContentPartTextParam',
              },
              {
                $ref: '#/components/schemas/ChatCompletionContentPartImageParam',
              },
              {
                $ref: '#/components/schemas/ChatCompletionContentPartInputAudioParam',
              },
            ],
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    role: {
      type: 'string',
      enum: ['user'],
      const: 'user',
      title: 'Role',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['content', 'role'],
  title: 'ChatCompletionUserMessageParam',
} as const;

export const $ChildToolRule = {
  properties: {
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description:
        "The name of the tool. Must exist in the database for the user's organization.",
    },
    type: {
      type: 'string',
      enum: ['constrain_child_tools'],
      const: 'constrain_child_tools',
      title: 'Type',
      default: 'constrain_child_tools',
    },
    children: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Children',
      description: 'The children tools that can be invoked.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['tool_name', 'children'],
  title: 'ChildToolRule',
  description: 'A ToolRule represents a tool that can be invoked by the agent.',
} as const;

export const $CompletionCreateParamsNonStreaming = {
  properties: {
    messages: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/ChatCompletionDeveloperMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionSystemMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionUserMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionAssistantMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionToolMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionFunctionMessageParam',
          },
        ],
      },
      type: 'array',
      title: 'Messages',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'string',
          enum: [
            'o3-mini',
            'o3-mini-2025-01-31',
            'o1',
            'o1-2024-12-17',
            'o1-preview',
            'o1-preview-2024-09-12',
            'o1-mini',
            'o1-mini-2024-09-12',
            'gpt-4.5-preview',
            'gpt-4.5-preview-2025-02-27',
            'gpt-4o',
            'gpt-4o-2024-11-20',
            'gpt-4o-2024-08-06',
            'gpt-4o-2024-05-13',
            'gpt-4o-audio-preview',
            'gpt-4o-audio-preview-2024-10-01',
            'gpt-4o-audio-preview-2024-12-17',
            'gpt-4o-mini-audio-preview',
            'gpt-4o-mini-audio-preview-2024-12-17',
            'chatgpt-4o-latest',
            'gpt-4o-mini',
            'gpt-4o-mini-2024-07-18',
            'gpt-4-turbo',
            'gpt-4-turbo-2024-04-09',
            'gpt-4-0125-preview',
            'gpt-4-turbo-preview',
            'gpt-4-1106-preview',
            'gpt-4-vision-preview',
            'gpt-4',
            'gpt-4-0314',
            'gpt-4-0613',
            'gpt-4-32k',
            'gpt-4-32k-0314',
            'gpt-4-32k-0613',
            'gpt-3.5-turbo',
            'gpt-3.5-turbo-16k',
            'gpt-3.5-turbo-0301',
            'gpt-3.5-turbo-0613',
            'gpt-3.5-turbo-1106',
            'gpt-3.5-turbo-0125',
            'gpt-3.5-turbo-16k-0613',
          ],
        },
      ],
      title: 'Model',
    },
    audio: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionAudioParam',
        },
        {
          type: 'null',
        },
      ],
    },
    frequency_penalty: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Frequency Penalty',
    },
    function_call: {
      anyOf: [
        {
          type: 'string',
          enum: ['none', 'auto'],
        },
        {
          $ref: '#/components/schemas/ChatCompletionFunctionCallOptionParam',
        },
      ],
      title: 'Function Call',
    },
    functions: {
      items: {
        $ref: '#/components/schemas/openai__types__chat__completion_create_params__Function',
      },
      type: 'array',
      title: 'Functions',
    },
    logit_bias: {
      anyOf: [
        {
          additionalProperties: {
            type: 'integer',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logit Bias',
    },
    logprobs: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logprobs',
    },
    max_completion_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Completion Tokens',
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
    },
    metadata: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
    },
    modalities: {
      anyOf: [
        {
          items: {
            type: 'string',
            enum: ['text', 'audio'],
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Modalities',
    },
    n: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'N',
    },
    parallel_tool_calls: {
      type: 'boolean',
      title: 'Parallel Tool Calls',
    },
    prediction: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionPredictionContentParam',
        },
        {
          type: 'null',
        },
      ],
    },
    presence_penalty: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Presence Penalty',
    },
    reasoning_effort: {
      anyOf: [
        {
          type: 'string',
          enum: ['low', 'medium', 'high'],
        },
        {
          type: 'null',
        },
      ],
      title: 'Reasoning Effort',
    },
    response_format: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResponseFormatText',
        },
        {
          $ref: '#/components/schemas/ResponseFormatJSONObject',
        },
        {
          $ref: '#/components/schemas/ResponseFormatJSONSchema',
        },
      ],
      title: 'Response Format',
    },
    seed: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Seed',
    },
    service_tier: {
      anyOf: [
        {
          type: 'string',
          enum: ['auto', 'default'],
        },
        {
          type: 'null',
        },
      ],
      title: 'Service Tier',
    },
    stop: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stop',
    },
    store: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Store',
    },
    stream_options: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionStreamOptionsParam',
        },
        {
          type: 'null',
        },
      ],
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    tool_choice: {
      anyOf: [
        {
          type: 'string',
          enum: ['none', 'auto', 'required'],
        },
        {
          $ref: '#/components/schemas/ChatCompletionNamedToolChoiceParam',
        },
      ],
      title: 'Tool Choice',
    },
    tools: {
      items: {
        $ref: '#/components/schemas/ChatCompletionToolParam',
      },
      type: 'array',
      title: 'Tools',
    },
    top_logprobs: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Top Logprobs',
    },
    top_p: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Top P',
    },
    user: {
      type: 'string',
      title: 'User',
    },
    stream: {
      anyOf: [
        {
          type: 'boolean',
          enum: [false],
          const: false,
        },
        {
          type: 'null',
        },
      ],
      title: 'Stream',
    },
  },
  type: 'object',
  required: ['messages', 'model'],
  title: 'CompletionCreateParamsNonStreaming',
} as const;

export const $CompletionCreateParamsStreaming = {
  properties: {
    messages: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/ChatCompletionDeveloperMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionSystemMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionUserMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionAssistantMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionToolMessageParam',
          },
          {
            $ref: '#/components/schemas/ChatCompletionFunctionMessageParam',
          },
        ],
      },
      type: 'array',
      title: 'Messages',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'string',
          enum: [
            'o3-mini',
            'o3-mini-2025-01-31',
            'o1',
            'o1-2024-12-17',
            'o1-preview',
            'o1-preview-2024-09-12',
            'o1-mini',
            'o1-mini-2024-09-12',
            'gpt-4.5-preview',
            'gpt-4.5-preview-2025-02-27',
            'gpt-4o',
            'gpt-4o-2024-11-20',
            'gpt-4o-2024-08-06',
            'gpt-4o-2024-05-13',
            'gpt-4o-audio-preview',
            'gpt-4o-audio-preview-2024-10-01',
            'gpt-4o-audio-preview-2024-12-17',
            'gpt-4o-mini-audio-preview',
            'gpt-4o-mini-audio-preview-2024-12-17',
            'chatgpt-4o-latest',
            'gpt-4o-mini',
            'gpt-4o-mini-2024-07-18',
            'gpt-4-turbo',
            'gpt-4-turbo-2024-04-09',
            'gpt-4-0125-preview',
            'gpt-4-turbo-preview',
            'gpt-4-1106-preview',
            'gpt-4-vision-preview',
            'gpt-4',
            'gpt-4-0314',
            'gpt-4-0613',
            'gpt-4-32k',
            'gpt-4-32k-0314',
            'gpt-4-32k-0613',
            'gpt-3.5-turbo',
            'gpt-3.5-turbo-16k',
            'gpt-3.5-turbo-0301',
            'gpt-3.5-turbo-0613',
            'gpt-3.5-turbo-1106',
            'gpt-3.5-turbo-0125',
            'gpt-3.5-turbo-16k-0613',
          ],
        },
      ],
      title: 'Model',
    },
    audio: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionAudioParam',
        },
        {
          type: 'null',
        },
      ],
    },
    frequency_penalty: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Frequency Penalty',
    },
    function_call: {
      anyOf: [
        {
          type: 'string',
          enum: ['none', 'auto'],
        },
        {
          $ref: '#/components/schemas/ChatCompletionFunctionCallOptionParam',
        },
      ],
      title: 'Function Call',
    },
    functions: {
      items: {
        $ref: '#/components/schemas/openai__types__chat__completion_create_params__Function',
      },
      type: 'array',
      title: 'Functions',
    },
    logit_bias: {
      anyOf: [
        {
          additionalProperties: {
            type: 'integer',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logit Bias',
    },
    logprobs: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Logprobs',
    },
    max_completion_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Completion Tokens',
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
    },
    metadata: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
    },
    modalities: {
      anyOf: [
        {
          items: {
            type: 'string',
            enum: ['text', 'audio'],
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Modalities',
    },
    n: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'N',
    },
    parallel_tool_calls: {
      type: 'boolean',
      title: 'Parallel Tool Calls',
    },
    prediction: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionPredictionContentParam',
        },
        {
          type: 'null',
        },
      ],
    },
    presence_penalty: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Presence Penalty',
    },
    reasoning_effort: {
      anyOf: [
        {
          type: 'string',
          enum: ['low', 'medium', 'high'],
        },
        {
          type: 'null',
        },
      ],
      title: 'Reasoning Effort',
    },
    response_format: {
      anyOf: [
        {
          $ref: '#/components/schemas/ResponseFormatText',
        },
        {
          $ref: '#/components/schemas/ResponseFormatJSONObject',
        },
        {
          $ref: '#/components/schemas/ResponseFormatJSONSchema',
        },
      ],
      title: 'Response Format',
    },
    seed: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Seed',
    },
    service_tier: {
      anyOf: [
        {
          type: 'string',
          enum: ['auto', 'default'],
        },
        {
          type: 'null',
        },
      ],
      title: 'Service Tier',
    },
    stop: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stop',
    },
    store: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Store',
    },
    stream_options: {
      anyOf: [
        {
          $ref: '#/components/schemas/ChatCompletionStreamOptionsParam',
        },
        {
          type: 'null',
        },
      ],
    },
    temperature: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Temperature',
    },
    tool_choice: {
      anyOf: [
        {
          type: 'string',
          enum: ['none', 'auto', 'required'],
        },
        {
          $ref: '#/components/schemas/ChatCompletionNamedToolChoiceParam',
        },
      ],
      title: 'Tool Choice',
    },
    tools: {
      items: {
        $ref: '#/components/schemas/ChatCompletionToolParam',
      },
      type: 'array',
      title: 'Tools',
    },
    top_logprobs: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Top Logprobs',
    },
    top_p: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
      title: 'Top P',
    },
    user: {
      type: 'string',
      title: 'User',
    },
    stream: {
      type: 'boolean',
      enum: [true],
      const: true,
      title: 'Stream',
    },
  },
  type: 'object',
  required: ['messages', 'model', 'stream'],
  title: 'CompletionCreateParamsStreaming',
} as const;

export const $ConditionalToolRule = {
  properties: {
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description:
        "The name of the tool. Must exist in the database for the user's organization.",
    },
    type: {
      type: 'string',
      enum: ['conditional'],
      const: 'conditional',
      title: 'Type',
      default: 'conditional',
    },
    default_child: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Default Child',
      description:
        'The default child tool to be called. If None, any tool can be called.',
    },
    child_output_mapping: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Child Output Mapping',
      description: 'The output case to check for mapping',
    },
    require_output_mapping: {
      type: 'boolean',
      title: 'Require Output Mapping',
      description:
        "Whether to throw an error when output doesn't match any case",
      default: false,
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['tool_name', 'child_output_mapping'],
  title: 'ConditionalToolRule',
  description:
    'A ToolRule that conditionally maps to different child tools based on the output.',
} as const;

export const $ContextWindowOverview = {
  properties: {
    context_window_size_max: {
      type: 'integer',
      title: 'Context Window Size Max',
      description: 'The maximum amount of tokens the context window can hold.',
    },
    context_window_size_current: {
      type: 'integer',
      title: 'Context Window Size Current',
      description: 'The current number of tokens in the context window.',
    },
    num_messages: {
      type: 'integer',
      title: 'Num Messages',
      description: 'The number of messages in the context window.',
    },
    num_archival_memory: {
      type: 'integer',
      title: 'Num Archival Memory',
      description: 'The number of messages in the archival memory.',
    },
    num_recall_memory: {
      type: 'integer',
      title: 'Num Recall Memory',
      description: 'The number of messages in the recall memory.',
    },
    num_tokens_external_memory_summary: {
      type: 'integer',
      title: 'Num Tokens External Memory Summary',
      description:
        'The number of tokens in the external memory summary (archival + recall metadata).',
    },
    external_memory_summary: {
      type: 'string',
      title: 'External Memory Summary',
      description:
        'The metadata summary of the external memory sources (archival + recall metadata).',
    },
    num_tokens_system: {
      type: 'integer',
      title: 'Num Tokens System',
      description: 'The number of tokens in the system prompt.',
    },
    system_prompt: {
      type: 'string',
      title: 'System Prompt',
      description: 'The content of the system prompt.',
    },
    num_tokens_core_memory: {
      type: 'integer',
      title: 'Num Tokens Core Memory',
      description: 'The number of tokens in the core memory.',
    },
    core_memory: {
      type: 'string',
      title: 'Core Memory',
      description: 'The content of the core memory.',
    },
    num_tokens_summary_memory: {
      type: 'integer',
      title: 'Num Tokens Summary Memory',
      description: 'The number of tokens in the summary memory.',
    },
    summary_memory: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Summary Memory',
      description: 'The content of the summary memory.',
    },
    num_tokens_functions_definitions: {
      type: 'integer',
      title: 'Num Tokens Functions Definitions',
      description: 'The number of tokens in the functions definitions.',
    },
    functions_definitions: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/FunctionTool',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Functions Definitions',
      description: 'The content of the functions definitions.',
    },
    num_tokens_messages: {
      type: 'integer',
      title: 'Num Tokens Messages',
      description: 'The number of tokens in the messages list.',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
      description: 'The messages in the context window.',
    },
  },
  type: 'object',
  required: [
    'context_window_size_max',
    'context_window_size_current',
    'num_messages',
    'num_archival_memory',
    'num_recall_memory',
    'num_tokens_external_memory_summary',
    'external_memory_summary',
    'num_tokens_system',
    'system_prompt',
    'num_tokens_core_memory',
    'core_memory',
    'num_tokens_summary_memory',
    'num_tokens_functions_definitions',
    'functions_definitions',
    'num_tokens_messages',
    'messages',
  ],
  title: 'ContextWindowOverview',
  description:
    'Overview of the context window, including the number of messages and tokens.',
} as const;

export const $ContinueToolRule = {
  properties: {
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description:
        "The name of the tool. Must exist in the database for the user's organization.",
    },
    type: {
      type: 'string',
      enum: ['continue_loop'],
      const: 'continue_loop',
      title: 'Type',
      default: 'continue_loop',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['tool_name'],
  title: 'ContinueToolRule',
  description:
    'Represents a tool rule configuration where if this tool gets called, it must continue the agent loop.',
} as const;

export const $CreateAgentRequest = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the agent.',
    },
    memory_blocks: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/CreateBlock',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Memory Blocks',
      description: "The blocks to create in the agent's in-context memory.",
    },
    tools: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tools',
      description: 'The tools used by the agent.',
    },
    tool_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Ids',
      description: 'The ids of the tools used by the agent.',
    },
    source_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Ids',
      description: 'The ids of the sources used by the agent.',
    },
    block_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Block Ids',
      description: 'The ids of the blocks used by the agent.',
    },
    tool_rules: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/ChildToolRule',
              },
              {
                $ref: '#/components/schemas/InitToolRule',
              },
              {
                $ref: '#/components/schemas/TerminalToolRule',
              },
              {
                $ref: '#/components/schemas/ConditionalToolRule',
              },
              {
                $ref: '#/components/schemas/ContinueToolRule',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                conditional: '#/components/schemas/ConditionalToolRule',
                constrain_child_tools: '#/components/schemas/ChildToolRule',
                continue_loop: '#/components/schemas/ContinueToolRule',
                exit_loop: '#/components/schemas/TerminalToolRule',
                run_first: '#/components/schemas/InitToolRule',
              },
            },
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Rules',
      description: 'The tool rules governing the agent.',
    },
    tags: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tags',
      description: 'The tags associated with the agent.',
    },
    system: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'System',
      description: 'The system prompt used by the agent.',
    },
    agent_type: {
      $ref: '#/components/schemas/AgentType',
      description: 'The type of agent.',
    },
    llm_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/LLMConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The LLM configuration used by the agent.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the agent.',
    },
    initial_message_sequence: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/MessageCreate',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Initial Message Sequence',
      description:
        "The initial set of messages to put in the agent's in-context memory.",
    },
    include_base_tools: {
      type: 'boolean',
      title: 'Include Base Tools',
      description:
        'If true, attaches the Letta core tools (e.g. archival_memory and core_memory related functions).',
      default: true,
    },
    include_multi_agent_tools: {
      type: 'boolean',
      title: 'Include Multi Agent Tools',
      description:
        'If true, attaches the Letta multi-agent tools (e.g. sending a message to another agent).',
      default: false,
    },
    include_base_tool_rules: {
      type: 'boolean',
      title: 'Include Base Tool Rules',
      description:
        'If true, attaches the Letta base tool rules (e.g. deny all tools not explicitly allowed).',
      default: true,
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the agent.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the agent.',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description:
        'The LLM configuration handle used by the agent, specified in the format provider/model-name, as an alternative to specifying llm_config.',
    },
    embedding: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding',
      description:
        'The embedding configuration handle used by the agent, specified in the format provider/model-name.',
    },
    context_window_limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Window Limit',
      description: 'The context window limit used by the agent.',
    },
    embedding_chunk_size: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding Chunk Size',
      description: 'The embedding chunk size used by the agent.',
      default: 300,
    },
    from_template: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'From Template',
      description: 'The template id used to configure the agent',
    },
    template: {
      type: 'boolean',
      title: 'Template',
      description: 'Whether the agent is a template',
      default: false,
    },
    project: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project',
      description:
        'Deprecated: Project should now be passed via the X-Project header instead of in the request body. If using the sdk, this can be done via the new x_project field below.',
      deprecated: true,
    },
    tool_exec_environment_variables: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Exec Environment Variables',
      description:
        'The environment variables for tool execution specific to this agent.',
    },
    memory_variables: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Memory Variables',
      description: 'The variables that should be set for the agent.',
    },
    project_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project Id',
      description: 'The id of the project the agent belongs to.',
    },
    template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Template Id',
      description: 'The id of the template the agent belongs to.',
    },
    base_template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Base Template Id',
      description: 'The base template id of the agent.',
    },
    identity_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Identity Ids',
      description: 'The ids of the identities associated with this agent.',
    },
    message_buffer_autoclear: {
      type: 'boolean',
      title: 'Message Buffer Autoclear',
      description:
        'If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case.',
      default: false,
    },
    actor_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Actor Id',
    },
  },
  type: 'object',
  title: 'CreateAgentRequest',
  description:
    'CreateAgent model specifically for POST request body, excluding user_id which comes from headers',
} as const;

export const $CreateArchivalMemory = {
  properties: {
    text: {
      type: 'string',
      title: 'Text',
      description: 'Text to write to archival memory.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'CreateArchivalMemory',
} as const;

export const $CreateBlock = {
  properties: {
    value: {
      type: 'string',
      title: 'Value',
      description: 'Value of the block.',
    },
    limit: {
      type: 'integer',
      title: 'Limit',
      description: 'Character limit of the block.',
      default: 5000,
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'Name of the block if it is a template.',
    },
    is_template: {
      type: 'boolean',
      title: 'Is Template',
      default: false,
    },
    label: {
      type: 'string',
      title: 'Label',
      description: 'Label of the block.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'Description of the block.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata of the block.',
      default: {},
    },
  },
  type: 'object',
  required: ['value', 'label'],
  title: 'CreateBlock',
  description: 'Create a block',
} as const;

export const $E2BSandboxConfig = {
  properties: {
    timeout: {
      type: 'integer',
      title: 'Timeout',
      description: 'Time limit for the sandbox (in seconds).',
      default: 300,
    },
    template: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Template',
      description: 'The E2B template id (docker image).',
    },
    pip_requirements: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Pip Requirements',
      description: 'A list of pip packages to install on the E2B Sandbox',
    },
  },
  type: 'object',
  title: 'E2BSandboxConfig',
} as const;

export const $EmbeddingConfig = {
  properties: {
    embedding_endpoint_type: {
      type: 'string',
      enum: [
        'openai',
        'anthropic',
        'bedrock',
        'cohere',
        'google_ai',
        'google_vertex',
        'azure',
        'groq',
        'ollama',
        'webui',
        'webui-legacy',
        'lmstudio',
        'lmstudio-legacy',
        'llamacpp',
        'koboldcpp',
        'vllm',
        'hugging-face',
        'mistral',
        'together',
      ],
      title: 'Embedding Endpoint Type',
      description: 'The endpoint type for the model.',
    },
    embedding_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding Endpoint',
      description: 'The endpoint for the model (`None` if local).',
    },
    embedding_model: {
      type: 'string',
      title: 'Embedding Model',
      description: 'The model for the embedding.',
    },
    embedding_dim: {
      type: 'integer',
      title: 'Embedding Dim',
      description: 'The dimension of the embedding.',
    },
    embedding_chunk_size: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding Chunk Size',
      description: 'The chunk size of the embedding.',
      default: 300,
    },
    handle: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Handle',
      description:
        'The handle for this config, in the format provider/model-name.',
    },
    azure_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Azure Endpoint',
      description: 'The Azure endpoint for the model.',
    },
    azure_version: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Azure Version',
      description: 'The Azure version for the model.',
    },
    azure_deployment: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Azure Deployment',
      description: 'The Azure deployment for the model.',
    },
  },
  type: 'object',
  required: ['embedding_endpoint_type', 'embedding_model', 'embedding_dim'],
  title: 'EmbeddingConfig',
  description: `Embedding model configuration. This object specifies all the information necessary to access an embedding model to usage with Letta, except for secret keys.

Attributes:
    embedding_endpoint_type (str): The endpoint type for the model.
    embedding_endpoint (str): The endpoint for the model.
    embedding_model (str): The model for the embedding.
    embedding_dim (int): The dimension of the embedding.
    embedding_chunk_size (int): The chunk size of the embedding.
    azure_endpoint (:obj:\`str\`, optional): The Azure endpoint for the model (Azure only).
    azure_version (str): The Azure version for the model (Azure only).
    azure_deployment (str): The Azure deployment for the model (Azure only).`,
} as const;

export const $FileMetadata = {
  properties: {
    id: {
      type: 'string',
      pattern: '^file-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the File',
      examples: ['file-123e4567-e89b-12d3-a456-426614174000'],
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the document.',
    },
    source_id: {
      type: 'string',
      title: 'Source Id',
      description:
        'The unique identifier of the source associated with the document.',
    },
    file_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Name',
      description: 'The name of the file.',
    },
    file_path: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Path',
      description: 'The path to the file.',
    },
    file_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Type',
      description: 'The type of the file (MIME type).',
    },
    file_size: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Size',
      description: 'The size of the file in bytes.',
    },
    file_creation_date: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Creation Date',
      description: 'The creation date of the file.',
    },
    file_last_modified_date: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Last Modified Date',
      description: 'The last modified date of the file.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The creation date of the file.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The update date of the file.',
    },
    is_deleted: {
      type: 'boolean',
      title: 'Is Deleted',
      description: 'Whether this file is deleted or not.',
      default: false,
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['source_id'],
  title: 'FileMetadata',
  description: 'Representation of a single FileMetadata',
} as const;

export const $Function_Output = {
  properties: {
    arguments: {
      type: 'string',
      title: 'Arguments',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  additionalProperties: true,
  type: 'object',
  required: ['arguments', 'name'],
  title: 'Function',
} as const;

export const $FunctionCall = {
  properties: {
    arguments: {
      type: 'string',
      title: 'Arguments',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
  },
  type: 'object',
  required: ['arguments', 'name'],
  title: 'FunctionCall',
} as const;

export const $FunctionDefinition_Input = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    parameters: {
      type: 'object',
      title: 'Parameters',
    },
    strict: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Strict',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'FunctionDefinition',
} as const;

export const $FunctionDefinition_Output = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    parameters: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Parameters',
    },
    strict: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Strict',
    },
  },
  additionalProperties: true,
  type: 'object',
  required: ['name'],
  title: 'FunctionDefinition',
} as const;

export const $FunctionTool = {
  properties: {
    function: {
      $ref: '#/components/schemas/FunctionDefinition-Output',
    },
    type: {
      type: 'string',
      enum: ['function'],
      const: 'function',
      title: 'Type',
    },
  },
  additionalProperties: true,
  type: 'object',
  required: ['function', 'type'],
  title: 'FunctionTool',
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const $Health = {
  properties: {
    version: {
      type: 'string',
      title: 'Version',
    },
    status: {
      type: 'string',
      title: 'Status',
    },
  },
  type: 'object',
  required: ['version', 'status'],
  title: 'Health',
  description: 'Health check response body',
} as const;

export const $Identity = {
  properties: {
    id: {
      type: 'string',
      pattern: '^identity-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Identity',
      examples: ['identity-123e4567-e89b-12d3-a456-426614174000'],
    },
    identifier_key: {
      type: 'string',
      title: 'Identifier Key',
      description: 'External, user-generated identifier key of the identity.',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the identity.',
    },
    identity_type: {
      $ref: '#/components/schemas/IdentityType',
      description: 'The type of the identity.',
    },
    project_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project Id',
      description: 'The project id of the identity, if applicable.',
    },
    agent_ids: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Agent Ids',
      description: 'The IDs of the agents associated with the identity.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The organization id of the user',
    },
    properties: {
      items: {
        $ref: '#/components/schemas/IdentityProperty',
      },
      type: 'array',
      title: 'Properties',
      description: 'List of properties associated with the identity',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['identifier_key', 'name', 'identity_type', 'agent_ids'],
  title: 'Identity',
} as const;

export const $IdentityCreate = {
  properties: {
    identifier_key: {
      type: 'string',
      title: 'Identifier Key',
      description: 'External, user-generated identifier key of the identity.',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the identity.',
    },
    identity_type: {
      $ref: '#/components/schemas/IdentityType',
      description: 'The type of the identity.',
    },
    project_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project Id',
      description: 'The project id of the identity, if applicable.',
    },
    agent_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Ids',
      description: 'The agent ids that are associated with the identity.',
    },
    properties: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/IdentityProperty',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Properties',
      description: 'List of properties associated with the identity.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['identifier_key', 'name', 'identity_type'],
  title: 'IdentityCreate',
} as const;

export const $IdentityProperty = {
  properties: {
    key: {
      type: 'string',
      title: 'Key',
      description: 'The key of the property',
    },
    value: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'integer',
        },
        {
          type: 'number',
        },
        {
          type: 'boolean',
        },
        {
          type: 'object',
        },
      ],
      title: 'Value',
      description: 'The value of the property',
    },
    type: {
      $ref: '#/components/schemas/IdentityPropertyType',
      description: 'The type of the property',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['key', 'value', 'type'],
  title: 'IdentityProperty',
  description: 'A property of an identity',
} as const;

export const $IdentityPropertyType = {
  type: 'string',
  enum: ['string', 'number', 'boolean', 'json'],
  title: 'IdentityPropertyType',
  description: 'Enum to represent the type of the identity property.',
} as const;

export const $IdentityType = {
  type: 'string',
  enum: ['org', 'user', 'other'],
  title: 'IdentityType',
  description: 'Enum to represent the type of the identity.',
} as const;

export const $IdentityUpdate = {
  properties: {
    identifier_key: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Identifier Key',
      description: 'External, user-generated identifier key of the identity.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the identity.',
    },
    identity_type: {
      anyOf: [
        {
          $ref: '#/components/schemas/IdentityType',
        },
        {
          type: 'null',
        },
      ],
      description: 'The type of the identity.',
    },
    agent_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Ids',
      description: 'The agent ids that are associated with the identity.',
    },
    properties: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/IdentityProperty',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Properties',
      description: 'List of properties associated with the identity.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'IdentityUpdate',
} as const;

export const $ImageURL = {
  properties: {
    url: {
      type: 'string',
      title: 'Url',
    },
    detail: {
      type: 'string',
      enum: ['auto', 'low', 'high'],
      title: 'Detail',
    },
  },
  type: 'object',
  required: ['url'],
  title: 'ImageURL',
} as const;

export const $InitToolRule = {
  properties: {
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description:
        "The name of the tool. Must exist in the database for the user's organization.",
    },
    type: {
      type: 'string',
      enum: ['run_first'],
      const: 'run_first',
      title: 'Type',
      default: 'run_first',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['tool_name'],
  title: 'InitToolRule',
  description: 'Represents the initial tool rule configuration.',
} as const;

export const $InputAudio = {
  properties: {
    data: {
      type: 'string',
      title: 'Data',
    },
    format: {
      type: 'string',
      enum: ['wav', 'mp3'],
      title: 'Format',
    },
  },
  type: 'object',
  required: ['data', 'format'],
  title: 'InputAudio',
} as const;

export const $JSONSchema = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    schema: {
      type: 'object',
      title: 'Schema',
    },
    strict: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Strict',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'JSONSchema',
} as const;

export const $Job = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    status: {
      $ref: '#/components/schemas/JobStatus',
      description: 'The status of the job.',
      default: 'created',
    },
    completed_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Completed At',
      description: 'The unix timestamp of when the job was completed.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the job.',
    },
    job_type: {
      $ref: '#/components/schemas/JobType',
      description: 'The type of the job.',
      default: 'job',
    },
    id: {
      type: 'string',
      pattern: '^(job|run)-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Job',
      examples: ['job-123e4567-e89b-12d3-a456-426614174000'],
    },
    user_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Id',
      description: 'The unique identifier of the user associated with the job.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'Job',
  description: `Representation of offline jobs, used for tracking status of data loading tasks (involving parsing and embedding files).

Parameters:
    id (str): The unique identifier of the job.
    status (JobStatus): The status of the job.
    created_at (datetime): The unix timestamp of when the job was created.
    completed_at (datetime): The unix timestamp of when the job was completed.
    user_id (str): The unique identifier of the user associated with the.`,
} as const;

export const $JobStatus = {
  type: 'string',
  enum: ['created', 'running', 'completed', 'failed', 'pending'],
  title: 'JobStatus',
  description: 'Status of the job.',
} as const;

export const $JobType = {
  type: 'string',
  enum: ['job', 'run'],
  title: 'JobType',
} as const;

export const $LLMConfig = {
  properties: {
    model: {
      type: 'string',
      title: 'Model',
      description: 'LLM model name. ',
    },
    model_endpoint_type: {
      type: 'string',
      enum: [
        'openai',
        'anthropic',
        'cohere',
        'google_ai',
        'google_vertex',
        'azure',
        'groq',
        'ollama',
        'webui',
        'webui-legacy',
        'lmstudio',
        'lmstudio-legacy',
        'lmstudio-chatcompletions',
        'llamacpp',
        'koboldcpp',
        'vllm',
        'hugging-face',
        'mistral',
        'together',
        'bedrock',
        'deepseek',
        'xai',
      ],
      title: 'Model Endpoint Type',
      description: 'The endpoint type for the model.',
    },
    model_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model Endpoint',
      description: 'The endpoint for the model.',
    },
    model_wrapper: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model Wrapper',
      description: 'The wrapper for the model.',
    },
    context_window: {
      type: 'integer',
      title: 'Context Window',
      description: 'The context window size for the model.',
    },
    put_inner_thoughts_in_kwargs: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Put Inner Thoughts In Kwargs',
      description:
        "Puts 'inner_thoughts' as a kwarg in the function call if this is set to True. This helps with function calling performance and also the generation of inner thoughts.",
      default: true,
    },
    handle: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Handle',
      description:
        'The handle for this config, in the format provider/model-name.',
    },
    temperature: {
      type: 'number',
      title: 'Temperature',
      description:
        'The temperature to use when generating text with the model. A higher temperature will result in more random text.',
      default: 0.7,
    },
    max_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Max Tokens',
      description:
        'The maximum number of tokens to generate. If not set, the model will use its default value.',
      default: 4096,
    },
  },
  type: 'object',
  required: ['model', 'model_endpoint_type', 'context_window'],
  title: 'LLMConfig',
  description: `Configuration for a Language Model (LLM) model. This object specifies all the information necessary to access an LLM model to usage with Letta, except for secret keys.

Attributes:
    model (str): The name of the LLM model.
    model_endpoint_type (str): The endpoint type for the model.
    model_endpoint (str): The endpoint for the model.
    model_wrapper (str): The wrapper for the model. This is used to wrap additional text around the input/output of the model. This is useful for text-to-text completions, such as the Completions API in OpenAI.
    context_window (int): The context window size for the model.
    put_inner_thoughts_in_kwargs (bool): Puts \`inner_thoughts\` as a kwarg in the function call if this is set to True. This helps with function calling performance and also the generation of inner thoughts.
    temperature (float): The temperature to use when generating text with the model. A higher temperature will result in more random text.
    max_tokens (int): The maximum number of tokens to generate.`,
} as const;

export const $LettaRequest = {
  properties: {
    messages: {
      items: {
        $ref: '#/components/schemas/MessageCreate',
      },
      type: 'array',
      title: 'Messages',
      description: 'The messages to be sent to the agent.',
    },
    use_assistant_message: {
      type: 'boolean',
      title: 'Use Assistant Message',
      description:
        'Whether the server should parse specific tool call arguments (default `send_message`) as `AssistantMessage` objects.',
      default: true,
    },
    assistant_message_tool_name: {
      type: 'string',
      title: 'Assistant Message Tool Name',
      description: 'The name of the designated message tool.',
      default: 'send_message',
    },
    assistant_message_tool_kwarg: {
      type: 'string',
      title: 'Assistant Message Tool Kwarg',
      description:
        'The name of the message argument in the designated message tool.',
      default: 'message',
    },
  },
  type: 'object',
  required: ['messages'],
  title: 'LettaRequest',
} as const;

export const $LettaRequestConfig = {
  properties: {
    use_assistant_message: {
      type: 'boolean',
      title: 'Use Assistant Message',
      description:
        'Whether the server should parse specific tool call arguments (default `send_message`) as `AssistantMessage` objects.',
      default: true,
    },
    assistant_message_tool_name: {
      type: 'string',
      title: 'Assistant Message Tool Name',
      description: 'The name of the designated message tool.',
      default: 'send_message',
    },
    assistant_message_tool_kwarg: {
      type: 'string',
      title: 'Assistant Message Tool Kwarg',
      description:
        'The name of the message argument in the designated message tool.',
      default: 'message',
    },
  },
  type: 'object',
  title: 'LettaRequestConfig',
} as const;

export const $LettaResponse = {
  properties: {
    messages: {
      items: {
        $ref: '#/components/schemas/LettaMessageUnion',
      },
      type: 'array',
      title: 'Messages',
      description: 'The messages returned by the agent.',
    },
    usage: {
      $ref: '#/components/schemas/LettaUsageStatistics',
      description: 'The usage statistics of the agent.',
    },
  },
  type: 'object',
  required: ['messages', 'usage'],
  title: 'LettaResponse',
  description: `Response object from an agent interaction, consisting of the new messages generated by the agent and usage statistics.
The type of the returned messages can be either \`Message\` or \`LettaMessage\`, depending on what was specified in the request.

Attributes:
    messages (List[Union[Message, LettaMessage]]): The messages returned by the agent.
    usage (LettaUsageStatistics): The usage statistics`,
} as const;

export const $LettaStreamingRequest = {
  properties: {
    messages: {
      items: {
        $ref: '#/components/schemas/MessageCreate',
      },
      type: 'array',
      title: 'Messages',
      description: 'The messages to be sent to the agent.',
    },
    use_assistant_message: {
      type: 'boolean',
      title: 'Use Assistant Message',
      description:
        'Whether the server should parse specific tool call arguments (default `send_message`) as `AssistantMessage` objects.',
      default: true,
    },
    assistant_message_tool_name: {
      type: 'string',
      title: 'Assistant Message Tool Name',
      description: 'The name of the designated message tool.',
      default: 'send_message',
    },
    assistant_message_tool_kwarg: {
      type: 'string',
      title: 'Assistant Message Tool Kwarg',
      description:
        'The name of the message argument in the designated message tool.',
      default: 'message',
    },
    stream_tokens: {
      type: 'boolean',
      title: 'Stream Tokens',
      description:
        'Flag to determine if individual tokens should be streamed. Set to True for token streaming (requires stream_steps = True).',
      default: false,
    },
  },
  type: 'object',
  required: ['messages'],
  title: 'LettaStreamingRequest',
} as const;

export const $LettaUsageStatistics = {
  properties: {
    message_type: {
      type: 'string',
      enum: ['usage_statistics'],
      const: 'usage_statistics',
      title: 'Message Type',
      default: 'usage_statistics',
    },
    completion_tokens: {
      type: 'integer',
      title: 'Completion Tokens',
      description: 'The number of tokens generated by the agent.',
      default: 0,
    },
    prompt_tokens: {
      type: 'integer',
      title: 'Prompt Tokens',
      description: 'The number of tokens in the prompt.',
      default: 0,
    },
    total_tokens: {
      type: 'integer',
      title: 'Total Tokens',
      description: 'The total number of tokens processed by the agent.',
      default: 0,
    },
    step_count: {
      type: 'integer',
      title: 'Step Count',
      description: 'The number of steps taken by the agent.',
      default: 0,
    },
  },
  type: 'object',
  title: 'LettaUsageStatistics',
  description: `Usage statistics for the agent interaction.

Attributes:
    completion_tokens (int): The number of tokens generated by the agent.
    prompt_tokens (int): The number of tokens in the prompt.
    total_tokens (int): The total number of tokens processed by the agent.
    step_count (int): The number of steps taken by the agent.`,
} as const;

export const $LocalSandboxConfig = {
  properties: {
    sandbox_dir: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Sandbox Dir',
      description: 'Directory for the sandbox environment.',
    },
    use_venv: {
      type: 'boolean',
      title: 'Use Venv',
      description:
        'Whether or not to use the venv, or run directly in the same run loop.',
      default: false,
    },
    venv_name: {
      type: 'string',
      title: 'Venv Name',
      description:
        'The name for the venv in the sandbox directory. We first search for an existing venv with this name, otherwise, we make it from the requirements.txt.',
      default: 'venv',
    },
    pip_requirements: {
      items: {
        $ref: '#/components/schemas/PipRequirement',
      },
      type: 'array',
      title: 'Pip Requirements',
      description:
        'List of pip packages to install with mandatory name and optional version following semantic versioning. This only is considered when use_venv is True.',
    },
  },
  type: 'object',
  title: 'LocalSandboxConfig',
} as const;

export const $Memory = {
  properties: {
    blocks: {
      items: {
        $ref: '#/components/schemas/Block',
      },
      type: 'array',
      title: 'Blocks',
      description: "Memory blocks contained in the agent's in-context memory",
    },
    prompt_template: {
      type: 'string',
      title: 'Prompt Template',
      description:
        'Jinja2 template for compiling memory blocks into a prompt string',
      default: `{% for block in blocks %}<{{ block.label }} characters="{{ block.value|length }}/{{ block.limit }}">
{{ block.value }}
</{{ block.label }}>{% if not loop.last %}
{% endif %}{% endfor %}`,
    },
  },
  type: 'object',
  required: ['blocks'],
  title: 'Memory',
  description:
    'Represents the in-context memory (i.e. Core memory) of the agent. This includes both the `Block` objects (labelled by sections), as well as tools to edit the blocks.',
} as const;

export const $Message = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    id: {
      type: 'string',
      pattern: '^message-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Message',
      examples: ['message-123e4567-e89b-12d3-a456-426614174000'],
    },
    role: {
      $ref: '#/components/schemas/MessageRole',
      description: 'The role of the participant.',
    },
    content: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Content',
      description: 'The content of the message.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The unique identifier of the organization.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
      description: 'The unique identifier of the agent.',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description: 'The model used to make the function call.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the participant.',
    },
    tool_calls: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ChatCompletionMessageToolCall',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Calls',
      description: 'The list of tool calls requested.',
    },
    tool_call_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Call Id',
      description: 'The id of the tool call.',
    },
    step_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Step Id',
      description: 'The id of the step that this message was created in.',
    },
    otid: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Otid',
      description: 'The offline threading id associated with this message',
    },
    tool_returns: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/ToolReturn',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Returns',
      description: 'Tool execution return information for prior tool calls',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['role'],
  title: 'Message',
  description: `Letta's internal representation of a message. Includes methods to convert to/from LLM provider formats.

Attributes:
    id (str): The unique identifier of the message.
    role (MessageRole): The role of the participant.
    text (str): The text of the message.
    user_id (str): The unique identifier of the user.
    agent_id (str): The unique identifier of the agent.
    model (str): The model used to make the function call.
    name (str): The name of the participant.
    created_at (datetime): The time the message was created.
    tool_calls (List[OpenAIToolCall,]): The list of tool calls requested.
    tool_call_id (str): The id of the tool call.`,
} as const;

export const $MessageCreate = {
  properties: {
    role: {
      type: 'string',
      enum: ['user', 'system'],
      title: 'Role',
      description: 'The role of the participant.',
    },
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
      description: 'The content of the message.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the participant.',
    },
  },
  type: 'object',
  required: ['role', 'content'],
  title: 'MessageCreate',
  description: 'Request to create a message',
} as const;

export const $MessageRole = {
  type: 'string',
  enum: ['assistant', 'user', 'tool', 'function', 'system'],
  title: 'MessageRole',
} as const;

export const $Organization = {
  properties: {
    id: {
      type: 'string',
      pattern: '^org-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Org',
      examples: ['org-123e4567-e89b-12d3-a456-426614174000'],
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the organization.',
      default: 'SincereYogurt',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The creation date of the organization.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'Organization',
} as const;

export const $OrganizationCreate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the organization.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'OrganizationCreate',
} as const;

export const $Passage = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
      title: 'Created At',
      description: 'The creation date of the passage.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    is_deleted: {
      type: 'boolean',
      title: 'Is Deleted',
      description: 'Whether this passage is deleted or not.',
      default: false,
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the user associated with the passage.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
      description:
        'The unique identifier of the agent associated with the passage.',
    },
    source_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Id',
      description: 'The data source of the passage.',
    },
    file_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Id',
      description:
        'The unique identifier of the file associated with the passage.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the passage.',
      default: {},
    },
    id: {
      type: 'string',
      pattern: '^passage-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Passage',
      examples: ['passage-123e4567-e89b-12d3-a456-426614174000'],
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'The text of the passage.',
    },
    embedding: {
      anyOf: [
        {
          items: {
            type: 'number',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding',
      description: 'The embedding of the passage.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the passage.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['text', 'embedding', 'embedding_config'],
  title: 'Passage',
  description: `Representation of a passage, which is stored in archival memory.

Parameters:
    text (str): The text of the passage.
    embedding (List[float]): The embedding of the passage.
    embedding_config (EmbeddingConfig): The embedding configuration used by the passage.
    created_at (datetime): The creation date of the passage.
    user_id (str): The unique identifier of the user associated with the passage.
    agent_id (str): The unique identifier of the agent associated with the passage.
    source_id (str): The data source of the passage.
    file_id (str): The unique identifier of the file associated with the passage.`,
} as const;

export const $PassageUpdate = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    is_deleted: {
      type: 'boolean',
      title: 'Is Deleted',
      description: 'Whether this passage is deleted or not.',
      default: false,
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the user associated with the passage.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
      description:
        'The unique identifier of the agent associated with the passage.',
    },
    source_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Id',
      description: 'The data source of the passage.',
    },
    file_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'File Id',
      description:
        'The unique identifier of the file associated with the passage.',
    },
    metadata_: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata ',
      description: 'The metadata of the passage.',
      default: {},
    },
    text: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Text',
      description: 'The text of the passage.',
    },
    embedding: {
      anyOf: [
        {
          items: {
            type: 'number',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Embedding',
      description: 'The embedding of the passage.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the passage.',
    },
    id: {
      type: 'string',
      title: 'Id',
      description: 'The unique identifier of the passage.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['id'],
  title: 'PassageUpdate',
} as const;

export const $PipRequirement = {
  properties: {
    name: {
      type: 'string',
      minLength: 1,
      title: 'Name',
      description: 'Name of the pip package.',
    },
    version: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Version',
      description:
        'Optional version of the package, following semantic versioning.',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'PipRequirement',
} as const;

export const $Provider = {
  properties: {
    id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Id',
      description:
        'The id of the provider, lazily created by the database manager.',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the provider',
    },
    api_key: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Api Key',
      description: 'API key used for requests to the provider.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The organization id of the user',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The last update timestamp of the provider.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name'],
  title: 'Provider',
} as const;

export const $ProviderCreate = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the provider.',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key used for requests to the provider.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name', 'api_key'],
  title: 'ProviderCreate',
} as const;

export const $ProviderUpdate = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
      description: 'The id of the provider to update.',
    },
    api_key: {
      type: 'string',
      title: 'Api Key',
      description: 'API key used for requests to the provider.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['id', 'api_key'],
  title: 'ProviderUpdate',
} as const;

export const $ReasoningMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['reasoning_message'],
      const: 'reasoning_message',
      title: 'Message Type',
      default: 'reasoning_message',
    },
    reasoning: {
      type: 'string',
      title: 'Reasoning',
    },
  },
  type: 'object',
  required: ['id', 'date', 'reasoning'],
  title: 'ReasoningMessage',
  description: `Representation of an agent's internal reasoning.

Attributes:
    reasoning (str): The internal reasoning of the agent
    id (str): The ID of the message
    date (datetime): The date the message was created in ISO format`,
} as const;

export const $ResponseFormatJSONObject = {
  properties: {
    type: {
      type: 'string',
      enum: ['json_object'],
      const: 'json_object',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['type'],
  title: 'ResponseFormatJSONObject',
} as const;

export const $ResponseFormatJSONSchema = {
  properties: {
    json_schema: {
      $ref: '#/components/schemas/JSONSchema',
    },
    type: {
      type: 'string',
      enum: ['json_schema'],
      const: 'json_schema',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['json_schema', 'type'],
  title: 'ResponseFormatJSONSchema',
} as const;

export const $ResponseFormatText = {
  properties: {
    type: {
      type: 'string',
      enum: ['text'],
      const: 'text',
      title: 'Type',
    },
  },
  type: 'object',
  required: ['type'],
  title: 'ResponseFormatText',
} as const;

export const $Run = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    status: {
      $ref: '#/components/schemas/JobStatus',
      description: 'The status of the job.',
      default: 'created',
    },
    completed_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Completed At',
      description: 'The unix timestamp of when the job was completed.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the job.',
    },
    job_type: {
      $ref: '#/components/schemas/JobType',
      default: 'run',
    },
    id: {
      type: 'string',
      pattern: '^(job|run)-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Run',
      examples: ['run-123e4567-e89b-12d3-a456-426614174000'],
    },
    user_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'User Id',
      description: 'The unique identifier of the user associated with the run.',
    },
    request_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/LettaRequestConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The request configuration for the run.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'Run',
  description: `Representation of a run, which is a job with a 'run' prefix in its ID.
Inherits all fields and behavior from Job except for the ID prefix.

Parameters:
    id (str): The unique identifier of the run (prefixed with 'run-').
    status (JobStatus): The status of the run.
    created_at (datetime): The unix timestamp of when the run was created.
    completed_at (datetime): The unix timestamp of when the run was completed.
    user_id (str): The unique identifier of the user associated with the run.`,
} as const;

export const $SandboxConfig = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    id: {
      type: 'string',
      pattern: '^sandbox-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Sandbox',
      examples: ['sandbox-123e4567-e89b-12d3-a456-426614174000'],
    },
    type: {
      $ref: '#/components/schemas/SandboxType',
      description: 'The type of sandbox.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the sandbox.',
    },
    config: {
      type: 'object',
      title: 'Config',
      description: 'The JSON sandbox settings data.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'SandboxConfig',
} as const;

export const $SandboxConfigCreate = {
  properties: {
    config: {
      anyOf: [
        {
          $ref: '#/components/schemas/LocalSandboxConfig',
        },
        {
          $ref: '#/components/schemas/E2BSandboxConfig',
        },
      ],
      title: 'Config',
      description: 'The configuration for the sandbox.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['config'],
  title: 'SandboxConfigCreate',
} as const;

export const $SandboxConfigUpdate = {
  properties: {
    config: {
      anyOf: [
        {
          $ref: '#/components/schemas/LocalSandboxConfig',
        },
        {
          $ref: '#/components/schemas/E2BSandboxConfig',
        },
      ],
      title: 'Config',
      description: 'The JSON configuration data for the sandbox.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'SandboxConfigUpdate',
  description: 'Pydantic model for updating SandboxConfig fields.',
} as const;

export const $SandboxEnvironmentVariable = {
  properties: {
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this object.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this object.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the object was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the object was last updated.',
    },
    id: {
      type: 'string',
      pattern: '^sandbox-env-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Sandbox-env',
      examples: ['sandbox-env-123e4567-e89b-12d3-a456-426614174000'],
    },
    key: {
      type: 'string',
      title: 'Key',
      description: 'The name of the environment variable.',
    },
    value: {
      type: 'string',
      title: 'Value',
      description: 'The value of the environment variable.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'An optional description of the environment variable.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The ID of the organization this environment variable belongs to.',
    },
    sandbox_config_id: {
      type: 'string',
      title: 'Sandbox Config Id',
      description:
        'The ID of the sandbox config this environment variable belongs to.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['key', 'value', 'sandbox_config_id'],
  title: 'SandboxEnvironmentVariable',
} as const;

export const $SandboxEnvironmentVariableCreate = {
  properties: {
    key: {
      type: 'string',
      title: 'Key',
      description: 'The name of the environment variable.',
    },
    value: {
      type: 'string',
      title: 'Value',
      description: 'The value of the environment variable.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'An optional description of the environment variable.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['key', 'value'],
  title: 'SandboxEnvironmentVariableCreate',
} as const;

export const $SandboxEnvironmentVariableUpdate = {
  properties: {
    key: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Key',
      description: 'The name of the environment variable.',
    },
    value: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Value',
      description: 'The value of the environment variable.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'An optional description of the environment variable.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'SandboxEnvironmentVariableUpdate',
} as const;

export const $SandboxType = {
  type: 'string',
  enum: ['e2b', 'local'],
  title: 'SandboxType',
} as const;

export const $Source = {
  properties: {
    id: {
      type: 'string',
      pattern: '^source-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Source',
      examples: ['source-123e4567-e89b-12d3-a456-426614174000'],
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the source.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the source.',
    },
    embedding_config: {
      $ref: '#/components/schemas/EmbeddingConfig',
      description: 'The embedding configuration used by the source.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The ID of the organization that created the source.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata associated with the source.',
    },
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this Tool.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this Tool.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The timestamp when the source was created.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The timestamp when the source was last updated.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name', 'embedding_config'],
  title: 'Source',
  description: `Representation of a source, which is a collection of files and passages.

Parameters:
    id (str): The ID of the source
    name (str): The name of the source.
    embedding_config (EmbeddingConfig): The embedding configuration used by the source.
    user_id (str): The ID of the user that created the source.
    metadata (dict): Metadata associated with the source.
    description (str): The description of the source.`,
} as const;

export const $SourceCreate = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the source.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the source.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the source.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata associated with the source.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name'],
  title: 'SourceCreate',
  description: 'Schema for creating a new Source.',
} as const;

export const $SourceUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the source.',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the source.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'Metadata associated with the source.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the source.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'SourceUpdate',
  description: 'Schema for updating an existing Source.',
} as const;

export const $Step = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
      description: 'The id of the step. Assigned by the database.',
    },
    origin: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Origin',
      description: 'The surface that this agent step was initiated from.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the step.',
    },
    provider_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Provider Id',
      description:
        'The unique identifier of the provider that was configured for this step',
    },
    job_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Job Id',
      description:
        'The unique identifier of the job that this step belongs to. Only included for async calls.',
    },
    agent_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Agent Id',
      description: 'The ID of the agent that performed the step.',
    },
    provider_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Provider Name',
      description: 'The name of the provider used for this step.',
    },
    model: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model',
      description: 'The name of the model used for this step.',
    },
    model_endpoint: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Model Endpoint',
      description: 'The model endpoint url used for this step.',
    },
    context_window_limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Context Window Limit',
      description: 'The context window limit configured for this step.',
    },
    completion_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Completion Tokens',
      description:
        'The number of tokens generated by the agent during this step.',
    },
    prompt_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Prompt Tokens',
      description: 'The number of tokens in the prompt during this step.',
    },
    total_tokens: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Total Tokens',
      description:
        'The total number of tokens processed by the agent during this step.',
    },
    completion_tokens_details: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Completion Tokens Details',
      description: 'Metadata for the agent.',
    },
    tags: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tags',
      description: 'Metadata tags.',
      default: [],
    },
    tid: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tid',
      description:
        'The unique identifier of the transaction that processed this step.',
    },
    trace_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Trace Id',
      description: 'The trace id of the agent step.',
    },
    messages: {
      items: {
        $ref: '#/components/schemas/Message',
      },
      type: 'array',
      title: 'Messages',
      description: 'The messages generated during this step.',
      default: [],
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['id'],
  title: 'Step',
} as const;

export const $SystemMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['system_message'],
      const: 'system_message',
      title: 'Message Type',
      default: 'system_message',
    },
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
  },
  type: 'object',
  required: ['id', 'date', 'content'],
  title: 'SystemMessage',
  description: `A message generated by the system. Never streamed back on a response, only used for cursor pagination.

Attributes:
    content (Union[str, List[MessageContentUnion]]): The message content sent by the user (can be a string or an array of content parts)
    id (str): The ID of the message
    date (datetime): The date the message was created in ISO format`,
} as const;

export const $TerminalToolRule = {
  properties: {
    tool_name: {
      type: 'string',
      title: 'Tool Name',
      description:
        "The name of the tool. Must exist in the database for the user's organization.",
    },
    type: {
      type: 'string',
      enum: ['exit_loop'],
      const: 'exit_loop',
      title: 'Type',
      default: 'exit_loop',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['tool_name'],
  title: 'TerminalToolRule',
  description:
    'Represents a terminal tool rule configuration where if this tool gets called, it must end the agent loop.',
} as const;

export const $TextContent = {
  properties: {
    type: {
      type: 'string',
      enum: ['text'],
      const: 'text',
      title: 'Type',
      description: 'The type of the message.',
      default: 'text',
    },
    text: {
      type: 'string',
      title: 'Text',
      description: 'The text content of the message.',
    },
  },
  type: 'object',
  required: ['text'],
  title: 'TextContent',
} as const;

export const $Tool = {
  properties: {
    id: {
      type: 'string',
      pattern: '^tool-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the Tool',
      examples: ['tool-123e4567-e89b-12d3-a456-426614174000'],
    },
    tool_type: {
      $ref: '#/components/schemas/ToolType',
      description: 'The type of the tool.',
      default: 'custom',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the tool.',
    },
    source_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Type',
      description: 'The type of the source code.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description:
        'The unique identifier of the organization associated with the tool.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the function.',
    },
    tags: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tags',
      description: 'Metadata tags.',
      default: [],
    },
    source_code: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Code',
      description: 'The source code of the function.',
    },
    json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Json Schema',
      description: 'The JSON schema of the function.',
    },
    args_json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Args Json Schema',
      description: 'The args JSON schema of the function.',
    },
    return_char_limit: {
      type: 'integer',
      title: 'Return Char Limit',
      description: 'The maximum number of characters in the response.',
      default: 6000,
    },
    created_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created By Id',
      description: 'The id of the user that made this Tool.',
    },
    last_updated_by_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Last Updated By Id',
      description: 'The id of the user that made this Tool.',
    },
  },
  additionalProperties: false,
  type: 'object',
  title: 'Tool',
  description: `Representation of a tool, which is a function that can be called by the agent.

Parameters:
    id (str): The unique identifier of the tool.
    name (str): The name of the function.
    tags (List[str]): Metadata tags.
    source_code (str): The source code of the function.
    json_schema (Dict): The JSON schema of the function.`,
} as const;

export const $ToolCall = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    arguments: {
      type: 'string',
      title: 'Arguments',
    },
    tool_call_id: {
      type: 'string',
      title: 'Tool Call Id',
    },
  },
  type: 'object',
  required: ['name', 'arguments', 'tool_call_id'],
  title: 'ToolCall',
} as const;

export const $ToolCallDelta = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
    },
    arguments: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Arguments',
    },
    tool_call_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Call Id',
    },
  },
  type: 'object',
  required: ['name', 'arguments', 'tool_call_id'],
  title: 'ToolCallDelta',
} as const;

export const $ToolCallMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['tool_call_message'],
      const: 'tool_call_message',
      title: 'Message Type',
      default: 'tool_call_message',
    },
    tool_call: {
      anyOf: [
        {
          $ref: '#/components/schemas/ToolCall',
        },
        {
          $ref: '#/components/schemas/ToolCallDelta',
        },
      ],
      title: 'Tool Call',
    },
  },
  type: 'object',
  required: ['id', 'date', 'tool_call'],
  title: 'ToolCallMessage',
  description: `A message representing a request to call a tool (generated by the LLM to trigger tool execution).

Attributes:
    tool_call (Union[ToolCall, ToolCallDelta]): The tool call
    id (str): The ID of the message
    date (datetime): The date the message was created in ISO format`,
} as const;

export const $ToolCreate = {
  properties: {
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the tool.',
    },
    tags: {
      items: {
        type: 'string',
      },
      type: 'array',
      title: 'Tags',
      description: 'Metadata tags.',
      default: [],
    },
    source_code: {
      type: 'string',
      title: 'Source Code',
      description: 'The source code of the function.',
    },
    source_type: {
      type: 'string',
      title: 'Source Type',
      description: 'The source type of the function.',
      default: 'python',
    },
    json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Json Schema',
      description:
        'The JSON schema of the function (auto-generated from source_code if not provided)',
    },
    args_json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Args Json Schema',
      description: 'The args JSON schema of the function.',
    },
    return_char_limit: {
      type: 'integer',
      title: 'Return Char Limit',
      description: 'The maximum number of characters in the response.',
      default: 6000,
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['source_code'],
  title: 'ToolCreate',
} as const;

export const $ToolReturn = {
  properties: {
    status: {
      type: 'string',
      enum: ['success', 'error'],
      title: 'Status',
      description: 'The status of the tool call',
    },
    stdout: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stdout',
      description:
        'Captured stdout (e.g. prints, logs) from the tool invocation',
    },
    stderr: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stderr',
      description: 'Captured stderr from the tool invocation',
    },
  },
  type: 'object',
  required: ['status'],
  title: 'ToolReturn',
} as const;

export const $ToolReturnMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['tool_return_message'],
      const: 'tool_return_message',
      title: 'Message Type',
      default: 'tool_return_message',
    },
    tool_return: {
      type: 'string',
      title: 'Tool Return',
    },
    status: {
      type: 'string',
      enum: ['success', 'error'],
      title: 'Status',
    },
    tool_call_id: {
      type: 'string',
      title: 'Tool Call Id',
    },
    stdout: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stdout',
    },
    stderr: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Stderr',
    },
  },
  type: 'object',
  required: ['id', 'date', 'tool_return', 'status', 'tool_call_id'],
  title: 'ToolReturnMessage',
  description: `A message representing the return value of a tool call (generated by Letta executing the requested tool).

Attributes:
    tool_return (str): The return value of the tool
    status (Literal["success", "error"]): The status of the tool call
    id (str): The ID of the message
    date (datetime): The date the message was created in ISO format
    tool_call_id (str): A unique identifier for the tool call that generated this message
    stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from the tool invocation
    stderr (Optional[List(str)]): Captured stderr from the tool invocation`,
} as const;

export const $ToolRunFromSource = {
  properties: {
    source_code: {
      type: 'string',
      title: 'Source Code',
      description: 'The source code of the function.',
    },
    args: {
      type: 'object',
      title: 'Args',
      description: 'The arguments to pass to the tool.',
    },
    env_vars: {
      additionalProperties: {
        type: 'string',
      },
      type: 'object',
      title: 'Env Vars',
      description: 'The environment variables to pass to the tool.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the tool to run.',
    },
    source_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Type',
      description: 'The type of the source code.',
    },
    args_json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Args Json Schema',
      description: 'The args JSON schema of the function.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['source_code', 'args'],
  title: 'ToolRunFromSource',
} as const;

export const $ToolType = {
  type: 'string',
  enum: [
    'custom',
    'letta_core',
    'letta_memory_core',
    'letta_multi_agent_core',
    'external_composio',
    'external_langchain',
  ],
  title: 'ToolType',
} as const;

export const $ToolUpdate = {
  properties: {
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the tool.',
    },
    tags: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tags',
      description: 'Metadata tags.',
    },
    source_code: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Code',
      description: 'The source code of the function.',
    },
    source_type: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Type',
      description: 'The type of the source code.',
    },
    json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Json Schema',
      description:
        'The JSON schema of the function (auto-generated from source_code if not provided)',
    },
    args_json_schema: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Args Json Schema',
      description: 'The args JSON schema of the function.',
    },
    return_char_limit: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Return Char Limit',
      description: 'The maximum number of characters in the response.',
    },
  },
  type: 'object',
  title: 'ToolUpdate',
} as const;

export const $UpdateAgent = {
  properties: {
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The name of the agent.',
    },
    tool_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Ids',
      description: 'The ids of the tools used by the agent.',
    },
    source_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Source Ids',
      description: 'The ids of the sources used by the agent.',
    },
    block_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Block Ids',
      description: 'The ids of the blocks used by the agent.',
    },
    tags: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tags',
      description: 'The tags associated with the agent.',
    },
    system: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'System',
      description: 'The system prompt used by the agent.',
    },
    tool_rules: {
      anyOf: [
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/ChildToolRule',
              },
              {
                $ref: '#/components/schemas/InitToolRule',
              },
              {
                $ref: '#/components/schemas/TerminalToolRule',
              },
              {
                $ref: '#/components/schemas/ConditionalToolRule',
              },
              {
                $ref: '#/components/schemas/ContinueToolRule',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                conditional: '#/components/schemas/ConditionalToolRule',
                constrain_child_tools: '#/components/schemas/ChildToolRule',
                continue_loop: '#/components/schemas/ContinueToolRule',
                exit_loop: '#/components/schemas/TerminalToolRule',
                run_first: '#/components/schemas/InitToolRule',
              },
            },
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Rules',
      description: 'The tool rules governing the agent.',
    },
    llm_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/LLMConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The LLM configuration used by the agent.',
    },
    embedding_config: {
      anyOf: [
        {
          $ref: '#/components/schemas/EmbeddingConfig',
        },
        {
          type: 'null',
        },
      ],
      description: 'The embedding configuration used by the agent.',
    },
    message_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Ids',
      description: "The ids of the messages in the agent's in-context memory.",
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
      description: 'The description of the agent.',
    },
    metadata: {
      anyOf: [
        {
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Metadata',
      description: 'The metadata of the agent.',
    },
    tool_exec_environment_variables: {
      anyOf: [
        {
          additionalProperties: {
            type: 'string',
          },
          type: 'object',
        },
        {
          type: 'null',
        },
      ],
      title: 'Tool Exec Environment Variables',
      description:
        'The environment variables for tool execution specific to this agent.',
    },
    project_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Project Id',
      description: 'The id of the project the agent belongs to.',
    },
    template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Template Id',
      description: 'The id of the template the agent belongs to.',
    },
    base_template_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Base Template Id',
      description: 'The base template id of the agent.',
    },
    identity_ids: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
      title: 'Identity Ids',
      description: 'The ids of the identities associated with this agent.',
    },
    message_buffer_autoclear: {
      anyOf: [
        {
          type: 'boolean',
        },
        {
          type: 'null',
        },
      ],
      title: 'Message Buffer Autoclear',
      description:
        'If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case.',
    },
  },
  type: 'object',
  title: 'UpdateAgent',
} as const;

export const $UpdateAssistantMessage = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    message_type: {
      type: 'string',
      enum: ['assistant_message'],
      const: 'assistant_message',
      title: 'Message Type',
      default: 'assistant_message',
    },
  },
  type: 'object',
  required: ['content'],
  title: 'UpdateAssistantMessage',
} as const;

export const $UpdateReasoningMessage = {
  properties: {
    reasoning: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Reasoning',
    },
    message_type: {
      type: 'string',
      enum: ['reasoning_message'],
      const: 'reasoning_message',
      title: 'Message Type',
      default: 'reasoning_message',
    },
  },
  type: 'object',
  required: ['reasoning'],
  title: 'UpdateReasoningMessage',
} as const;

export const $UpdateSystemMessage = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    message_type: {
      type: 'string',
      enum: ['system_message'],
      const: 'system_message',
      title: 'Message Type',
      default: 'system_message',
    },
  },
  type: 'object',
  required: ['content'],
  title: 'UpdateSystemMessage',
} as const;

export const $UpdateUserMessage = {
  properties: {
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
    message_type: {
      type: 'string',
      enum: ['user_message'],
      const: 'user_message',
      title: 'Message Type',
      default: 'user_message',
    },
  },
  type: 'object',
  required: ['content'],
  title: 'UpdateUserMessage',
} as const;

export const $UsageStatistics = {
  properties: {
    completion_tokens: {
      type: 'integer',
      title: 'Completion Tokens',
      default: 0,
    },
    prompt_tokens: {
      type: 'integer',
      title: 'Prompt Tokens',
      default: 0,
    },
    total_tokens: {
      type: 'integer',
      title: 'Total Tokens',
      default: 0,
    },
  },
  type: 'object',
  title: 'UsageStatistics',
} as const;

export const $User = {
  properties: {
    id: {
      type: 'string',
      pattern: '^user-[a-fA-F0-9]{8}',
      title: 'Id',
      description: 'The human-friendly ID of the User',
      examples: ['user-123e4567-e89b-12d3-a456-426614174000'],
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The organization id of the user',
      default: 'org-00000000-0000-4000-8000-000000000000',
    },
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the user.',
    },
    created_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Created At',
      description: 'The creation date of the user.',
    },
    updated_at: {
      anyOf: [
        {
          type: 'string',
          format: 'date-time',
        },
        {
          type: 'null',
        },
      ],
      title: 'Updated At',
      description: 'The update date of the user.',
    },
    is_deleted: {
      type: 'boolean',
      title: 'Is Deleted',
      description: 'Whether this user is deleted or not.',
      default: false,
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name'],
  title: 'User',
  description: `Representation of a user.

Parameters:
    id (str): The unique identifier of the user.
    name (str): The name of the user.
    created_at (datetime): The creation date of the user.`,
} as const;

export const $UserCreate = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
      description: 'The name of the user.',
    },
    organization_id: {
      type: 'string',
      title: 'Organization Id',
      description: 'The organization id of the user.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['name', 'organization_id'],
  title: 'UserCreate',
} as const;

export const $UserMessage = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    date: {
      type: 'string',
      format: 'date-time',
      title: 'Date',
    },
    message_type: {
      type: 'string',
      enum: ['user_message'],
      const: 'user_message',
      title: 'Message Type',
      default: 'user_message',
    },
    content: {
      anyOf: [
        {
          type: 'string',
        },
        {
          items: {
            oneOf: [
              {
                $ref: '#/components/schemas/TextContent',
              },
            ],
            discriminator: {
              propertyName: 'type',
              mapping: {
                text: '#/components/schemas/TextContent',
              },
            },
          },
          type: 'array',
        },
      ],
      title: 'Content',
    },
  },
  type: 'object',
  required: ['id', 'date', 'content'],
  title: 'UserMessage',
  description: `A message sent by the user. Never streamed back on a response, only used for cursor pagination.

Attributes:
    content (Union[str, List[MessageContentUnion]]): The message content sent by the user (can be a string or an array of content parts)
    id (str): The ID of the message
    date (datetime): The date the message was created in ISO format`,
} as const;

export const $UserUpdate = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
      description: 'The id of the user to update.',
    },
    name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Name',
      description: 'The new name of the user.',
    },
    organization_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Organization Id',
      description: 'The new organization id of the user.',
    },
  },
  additionalProperties: false,
  type: 'object',
  required: ['id'],
  title: 'UserUpdate',
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const $openai__types__chat__chat_completion_message_tool_call_param__Function =
  {
    properties: {
      arguments: {
        type: 'string',
        title: 'Arguments',
      },
      name: {
        type: 'string',
        title: 'Name',
      },
    },
    type: 'object',
    required: ['arguments', 'name'],
    title: 'Function',
  } as const;

export const $openai__types__chat__chat_completion_named_tool_choice_param__Function =
  {
    properties: {
      name: {
        type: 'string',
        title: 'Name',
      },
    },
    type: 'object',
    required: ['name'],
    title: 'Function',
  } as const;

export const $openai__types__chat__completion_create_params__Function = {
  properties: {
    name: {
      type: 'string',
      title: 'Name',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    parameters: {
      type: 'object',
      title: 'Parameters',
    },
  },
  type: 'object',
  required: ['name'],
  title: 'Function',
} as const;

export const $LettaMessageUnion = {
  oneOf: [
    {
      $ref: '#/components/schemas/SystemMessage',
    },
    {
      $ref: '#/components/schemas/UserMessage',
    },
    {
      $ref: '#/components/schemas/ReasoningMessage',
    },
    {
      $ref: '#/components/schemas/ToolCallMessage',
    },
    {
      $ref: '#/components/schemas/ToolReturnMessage',
    },
    {
      $ref: '#/components/schemas/AssistantMessage',
    },
  ],
  discriminator: {
    propertyName: 'message_type',
    mapping: {
      system_message: '#/components/schemas/SystemMessage',
      user_message: '#/components/schemas/UserMessage',
      reasoning_message: '#/components/schemas/ReasoningMessage',
      tool_call_message: '#/components/schemas/ToolCallMessage',
      tool_return_message: '#/components/schemas/ToolReturnMessage',
      assistant_message: '#/components/schemas/AssistantMessage',
    },
  },
} as const;
