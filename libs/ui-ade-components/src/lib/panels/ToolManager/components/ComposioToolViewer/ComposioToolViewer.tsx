import { webApi, webApiQueryKeys } from '@letta-cloud/sdk-web';
import React, { useMemo, useState } from 'react';
import {
  Alert,
  Typography,
  VStack,
  NiceGridDisplay,
  ExternalLink,
  RawToggleGroup,
  McpIcon,
  CogIcon,
  HStack,
} from '@letta-cloud/ui-component-library';
import { ToolActionsHeader } from '../ToolActionsHeader/ToolActionsHeader';
import { useTranslations } from '@letta-cloud/translations';
import { useCurrentAgent } from '../../../../hooks';
import { ComposioAppHeader } from '../ComposioAppHeader/ComposioAppHeader';
import { ToolSettings } from '../ToolsSettings/ToolSettings';
import type { Tool } from '@letta-cloud/sdk-core';

interface ComposioToolViewerProps {
  composioToolKey: string;
  name: string;
  description: string;
  tool: Tool;
}

function getAppProviderName(composioToolKey: string) {
  // the first part of the key is the app provider name

  return composioToolKey.split('_')[0];
}

interface ComposioDetailsProps {
  name: string;
  description: string;
  composioToolKey: string;
}

function ComposioDetails(props: ComposioDetailsProps) {
  const { name, composioToolKey, description } = props;

  const appName = useMemo(
    () => getAppProviderName(composioToolKey),
    [composioToolKey],
  );

  const { data } = webApi.composio.listComposioActions.useQuery({
    queryKey: webApiQueryKeys.composio.listComposioActions({
      app: appName.toUpperCase(),
    }),
    refetchOnWindowFocus: false,
    queryData: {
      query: {
        app: appName.toUpperCase(),
      },
    },
  });

  const t = useTranslations('ComposioToolViewer');

  const toolDetails = useMemo(() => {
    return data?.body.items.find(
      (item) => item.enum.toUpperCase() === composioToolKey.toUpperCase(),
    );
  }, [data, composioToolKey]);

  return (
    <VStack gap="large" fullWidth fullHeight padding>
      <ComposioAppHeader
        appName={appName}
        name={name}
        logo={toolDetails?.logo}
      />
      <Alert title={t('autogenerated')} variant="warning" />
      <VStack width="contained" gap={false}>
        <Typography bold variant="body3" uppercase>
          {t('description')}
        </Typography>
        <Typography variant="body">{description}</Typography>
      </VStack>
      <NiceGridDisplay>
        <VStack gap={false}>
          <Typography bold variant="body3" uppercase>
            {t('developer')}
          </Typography>
          <Typography overrideEl="span" variant="body2" color="muted">
            <ExternalLink href="https://composio.dev/">
              composio.dev
            </ExternalLink>
          </Typography>
        </VStack>
      </NiceGridDisplay>
    </VStack>
  );
}

type EditMode = 'details' | 'settings';

interface EditModesProps {
  setMode: (mode: EditMode) => void;
  mode: EditMode;
}

function EditModes(props: EditModesProps) {
  const { setMode, mode } = props;
  const t = useTranslations('ToolsEditor/LocalToolsViewer');

  return (
    <RawToggleGroup
      vertical
      label={t('EditModes.label')}
      hideLabel
      value={mode}
      onValueChange={(value) => {
        if (!value) {
          return;
        }
        setMode(value as EditMode);
      }}
      size="small"
      items={[
        {
          hideLabel: true,
          icon: <McpIcon />,
          label: t('EditModes.modes.details'),
          value: 'details',
        },
        {
          hideLabel: true,
          icon: <CogIcon />,
          label: t('EditModes.modes.settings'),
          value: 'settings',
        },
      ]}
    />
  );
}

export function ComposioToolViewer(props: ComposioToolViewerProps) {
  const { composioToolKey, name, description, tool } = props;

  const { tools } = useCurrentAgent();

  const [editMode, setEditMode] = useState<EditMode>('details');

  const attachedId = useMemo(() => {
    return tools?.find(
      (tool) =>
        tool?.tool_type === 'external_composio' &&
        tool.name === composioToolKey,
    )?.id;
  }, [tools, composioToolKey]);

  return (
    <VStack gap={false} fullWidth fullHeight>
      <ToolActionsHeader
        idToAttach={composioToolKey}
        attachedId={attachedId}
        type="external_composio"
        name={name}
      />
      <HStack fullHeight fullWidth>
        {editMode === 'details' ? (
          <ComposioDetails
            composioToolKey={composioToolKey}
            name={name}
            description={description}
          />
        ) : (
          <ToolSettings showDelete={false} showSave tool={tool} />
        )}
        <VStack borderLeft fullHeight padding="xxsmall" color="background-grey">
          <EditModes setMode={setEditMode} mode={editMode} />
        </VStack>
      </HStack>
    </VStack>
  );
}
