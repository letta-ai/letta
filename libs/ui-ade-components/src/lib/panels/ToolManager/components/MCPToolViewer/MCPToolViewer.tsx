import { webApi, webApiQueryKeys } from '@letta-cloud/sdk-web';
import { useMemo } from 'react';
import {
  Alert,
  Typography,
  VStack,
  NiceGridDisplay,
  ExternalLink,
} from '@letta-cloud/ui-component-library';
import { ToolActionsHeader } from '../ToolActionsHeader/ToolActionsHeader';
import { useTranslations } from '@letta-cloud/translations';
import { useCurrentAgent } from '../../../../hooks';
import { ComposioAppHeader } from '../ComposioAppHeader/ComposioAppHeader';

interface ComposioToolViewerProps {
  composioToolKey: string;
  name: string;
  description: string;
}

function getAppProviderName(composioToolKey: string) {
  // the first part of the key is the app provider name

  return composioToolKey.split('_')[0];
}

export function ComposioToolViewer(props: ComposioToolViewerProps) {
  const { composioToolKey, name, description } = props;

  const appName = useMemo(
    () => getAppProviderName(composioToolKey),
    [composioToolKey],
  );

  const { tools } = useCurrentAgent();

  const { data } = webApi.composio.listComposioActions.useQuery({
    queryKey: webApiQueryKeys.composio.listComposioActions({
      app: appName.toUpperCase(),
    }),
    refetchOnWindowFocus: false,
    queryData: {
      query: {
        app: appName.toUpperCase(),
      },
    },
  });

  const t = useTranslations('ComposioToolViewer');

  const toolDetails = useMemo(() => {
    return data?.body.items.find(
      (item) => item.enum.toUpperCase() === composioToolKey.toUpperCase(),
    );
  }, [data, composioToolKey]);

  const attachedId = useMemo(() => {
    return tools?.find(
      (tool) =>
        tool?.tool_type === 'external_composio' &&
        tool.name === composioToolKey,
    )?.id;
  }, [tools, composioToolKey]);

  return (
    <VStack gap={false}>
      <ToolActionsHeader
        idToAttach={composioToolKey}
        attachedId={attachedId}
        type="external_composio"
        name={name}
      />
      <VStack gap="large" padding>
        <ComposioAppHeader
          appName={appName}
          name={name}
          logo={toolDetails?.logo}
        />
        <Alert title={t('autogenerated')} variant="warning" />
        <VStack width="contained" gap={false}>
          <Typography bold variant="body3" uppercase>
            {t('description')}
          </Typography>
          <Typography variant="body">{description}</Typography>
        </VStack>
        <NiceGridDisplay>
          <VStack gap={false}>
            <Typography bold variant="body3" uppercase>
              {t('developer')}
            </Typography>
            <Typography overrideEl="span" variant="body2" color="muted">
              <ExternalLink href="https://composio.dev/">
                composio.dev
              </ExternalLink>
            </Typography>
          </VStack>
        </NiceGridDisplay>
      </VStack>
    </VStack>
  );
}
