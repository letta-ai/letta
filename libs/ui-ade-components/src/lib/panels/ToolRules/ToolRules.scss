@use "sass:map";

// Variables
// Consolidated color map
$color-vars: (
  start-background:        rgba(50, 205, 50, 0.33),
  start-background-dim:    rgba(50, 205, 50, 0.25),
  start-border:            #32cd32,
  agent-background:       rgba(59, 130, 246, 0.33),
  agent-background-dim:   rgba(59, 130, 246, 0.25),
  agent-border:           #3b82f6,
  done-background:        rgba(237, 53, 127, 0.33),
  done-background-dim:    rgba(237, 53, 127, 0.25),
  done-border:            #ed357f,
  node-border:            #9ca3af,
);

$rule-icon-colors: (
  run-first: #7c3aed,
  constrain: #ea580c,
  max-count: #ca8a04,
  continue: #059669,
  exit: #dc2626,
);

// Inject CSS vars from SASS vars
:root {
  @each $name, $value in $color-vars {
    --#{$name}: #{$value};
  }
  @each $type, $color in $rule-icon-colors {
    --rule-icon-#{$type}: #{$color};
  }
}

// Main container
.tool-rules-visual {
  flex: 1;
  height: 100vh;
  position: relative;
  background: hsl(var(--background-grey));

  // Hide React Flow handles
  .react-flow__handle {
    visibility: hidden !important;
    pointer-events: none !important;
  }

  // React Flow background
  .react-flow__background {
    gap: 20px;
    color: hsl(var(--muted));
  }
}

// Legend component
.tool-rules-legend {
  position: absolute;
  top: 16px;
  right: 16px;
  z-index: 1000;
  background: hsl(var(--background) / 0.95);
  border: 1px solid map.get($color-vars, node-border);
  border-radius: 2px;
  box-shadow: var(--shadow-md);
  backdrop-filter: blur(8px);

  &__toggle {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 8px;
    padding: 8px 12px;
    background: none;
    border: none;
    font-size: var(--font-size-sm);
    font-weight: 600;
    cursor: pointer;
    width: 100%;
    text-align: left;
    color: inherit;

    &:hover {
      background: hsl(var(--background-hover));
    }

    &-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: var(--font-size-sm);
      height: var(--font-size-sm);

      svg {
        width: 100%;
        height: 100%;
        transform: scale(2.5);
        transform-origin: center;
      }
    }
  }

  &__content {
    padding: 12px;
    border-top: 0.5px solid hsl(var(--border));
    font-size: var(--font-size-xs);
    line-height: 1.4;
  }

  &__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 4px;
  }

  &__item {
    display: flex;
    align-items: center;
    gap: 4px;

    span {
      font-size: var(--font-size-xs);
    }
  }
}

// Node styles
.tool-rules-node {
  transition: all 0.05s ease;
  // cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;

  &--control {
    border-radius: 4px;
    font-size: var(--font-size-xs);
    font-weight: 600;
    text-align: center;
    height: 30px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    min-width: 80px;

    &.start {
      background: map.get($color-vars, start-background);
      border: 1px solid map.get($color-vars, start-border);

      &--dim {
        background: map.get($color-vars, start-background-dim);
      }
    }

    &.agent {
      background: map.get($color-vars, agent-background);
      border: 1px solid map.get($color-vars, agent-border);

      &--dim {
        background: map.get($color-vars, agent-background-dim);
      }
    }

    &.done {
      background: map.get($color-vars, done-background);
      border: 1px solid map.get($color-vars, done-border);

      &--dim {
        background: map.get($color-vars, done-background-dim);
      }
    }
  }

  &--tool {
    border-radius: 2px;
    font-size: var(--font-size-sm);
    font-weight: 600;
    text-align: center;
    border: 1px solid map.get($color-vars, node-border);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    min-width: 100px;
    background: hsl(var(--background));

    &--dim {
      background: hsl(var(--background) / 0.7);
    }

    &.start-focused {
      background: map.get($color-vars, start-background);
    }

    &.agent-focused {
      background: map.get($color-vars, agent-background);
    }

    &.done-focused {
      background: map.get($color-vars, done-background);
    }
  }
}

// Tool node content
.tool-node {
  &__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    gap: 2px;
  }

  &__header {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
  }

  &__icons {
    display: flex;
    gap: 2px;
    align-items: center;

    .rule-icon {
      @each $type, $color in $rule-icon-colors {
        &--#{$type} {
          color: $color;
        }
      }
    }
  }

  &__name {
    font-size: var(--font-size-sm);
    font-weight: 600;
    text-align: center;
    line-height: 1.2;
  }

  &__max-count {
    font-size: var(--font-size-xs);
    opacity: 0.7;
    text-align: center;
  }
}

// Edge styles
.tool-rules-edge {
  &--default {
    stroke: hsl(var(--muted));
  }

  &--outgoing {
    stroke: hsl(var(--brand));
  }

  &--incoming {
    stroke: hsl(var(--brand));
  }

  &--dashed {
    stroke-dasharray: 5, 5;
  }
}

// Utility classes
.opacity-full { opacity: 1; }
.opacity-high { opacity: 0.9; }
.opacity-medium { opacity: 0.8; }
.opacity-low { opacity: 0.4; }
.opacity-minimal { opacity: 0.1; }

// Responsive adjustments
@media (max-width: 1200px) {
  :root {
    --tool-rules-main-tools-x: 250px;
    --tool-rules-child-tools-x: 450px;
    --tool-rules-exit-loop-x: 650px;
    --tool-rules-done-x: 700px;
  }
}

@media (max-width: 900px) {
  :root {
    --tool-rules-main-tools-x: 200px;
    --tool-rules-child-tools-x: 350px;
    --tool-rules-exit-loop-x: 500px;
    --tool-rules-done-x: 550px;
  }

  .tool-rules-legend {
    top: 8px;
    right: 8px;

    &__toggle {
      padding: 6px 8px;
      font-size: var(--font-size-xs);
    }

    &__content {
      padding: 8px;
    }
  }
}

// Animation classes
@keyframes node-focus {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.02);
  }
}

.tool-rules-node--focused {
  animation: node-focus 0.1s ease-out;
  transform: scale(1.02);
}

// Loading state
.tool-rules-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  font-size: var(--font-size-base);
  color: hsl(var(--text-lighter));
}