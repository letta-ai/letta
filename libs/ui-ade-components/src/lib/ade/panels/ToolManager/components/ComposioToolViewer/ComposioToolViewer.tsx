'use client';
import React, { useMemo, useState } from 'react';
import {
  Alert,
  Typography,
  VStack,
  NiceGridDisplay,
  ExternalLink,
  CogIcon,
  TabGroup,
  HStack,
  SegmentIcon,
} from '@letta-cloud/ui-component-library';
import { ToolActionsHeader } from '../ToolActionsHeader/ToolActionsHeader';
import { useTranslations } from '@letta-cloud/translations';
import { useCurrentAgent } from '../../../../../hooks';
import { ToolSettings } from '../ToolsSettings/ToolSettings';
import type { Tool } from '@letta-cloud/sdk-core';

interface ComposioToolViewerProps {
  composioToolKey: string;
  name: string;
  description: string;
  tool: Tool;
}

interface ComposioDetailsProps {
  name: string;
  description: string;
  composioToolKey: string;
}

function ComposioDetails(props: ComposioDetailsProps) {
  const { description } = props;

  const t = useTranslations('ComposioToolViewer');

  return (
    <VStack gap="large" fullWidth fullHeight padding overflow="auto">
      <Alert title={t('autogenerated')} variant="warning" />
      <VStack width="contained" gap={false}>
        <Typography bold variant="body3">
          {t('description')}
        </Typography>
        <Typography variant="body">{description}</Typography>
      </VStack>
      <NiceGridDisplay>
        <VStack gap={false}>
          <Typography bold variant="body3">
            {t('developer')}
          </Typography>
          <Typography overrideEl="span" variant="body2" color="muted">
            <ExternalLink href="https://composio.dev/">
              composio.dev
            </ExternalLink>
          </Typography>
        </VStack>
      </NiceGridDisplay>
    </VStack>
  );
}

type EditMode = 'details' | 'settings';

interface EditModesProps {
  setMode: (mode: EditMode) => void;
  mode: EditMode;
}

function EditModes(props: EditModesProps) {
  const { setMode, mode } = props;
  const t = useTranslations('ToolsEditor/LocalToolsViewer');

  return (
    <TabGroup
      value={mode}
      onValueChange={(value) => {
        if (!value) {
          return;
        }
        setMode(value as EditMode);
      }}
      items={[
        {
          icon: <SegmentIcon />,
          label: t('EditModes.modes.details'),
          value: 'details',
        },
        {
          icon: <CogIcon />,
          label: t('EditModes.modes.settings'),
          value: 'settings',
        },
      ]}
    />
  );
}

export function ComposioToolViewer(props: ComposioToolViewerProps) {
  const { composioToolKey, name, description, tool } = props;

  const { tools } = useCurrentAgent();

  const [editMode, setEditMode] = useState<EditMode>('details');

  const attachedId = useMemo(() => {
    return tools?.find(
      (tool) =>
        tool?.tool_type === 'external_composio' &&
        tool.name === composioToolKey,
    )?.id;
  }, [tools, composioToolKey]);

  return (
    <VStack gap={false} fullWidth fullHeight>
      <ToolActionsHeader
        idToAttach={composioToolKey}
        attachedId={attachedId}
        type="external_composio"
        name={name}
      />
      <VStack fullWidth flex collapseHeight gap={false}>
        <HStack paddingX="medium" borderBottom>
          <EditModes setMode={setEditMode} mode={editMode} />
        </HStack>
        {editMode === 'details' ? (
          <ComposioDetails
            composioToolKey={composioToolKey}
            name={name}
            description={description}
          />
        ) : (
          <ToolSettings showDelete={false} showSave tool={tool} />
        )}
      </VStack>
    </VStack>
  );
}
