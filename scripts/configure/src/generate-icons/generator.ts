import type {
  Tree} from '@nx/devkit';
import { workspaceRoot,
  formatFiles,
} from '@nx/devkit';
import { startCase } from 'lodash';
import * as fs from 'fs';
import * as path from 'path';
import type { GenerateIconsGeneratorSchema } from './schema';

function generateComponentFiles(name: string, svgContent: string) {
  return `import * as React from 'react';
import type { IconWrappedProps } from '../IconWrapper';
import { IconWrapper } from '../IconWrapper';

export function ${name}(props: IconWrappedProps) {
  return (<IconWrapper {...props}>${svgContent}</IconWrapper>);
}
`
}

function generateIndexFile(icons: string[]) {
  return icons.map((icon) => `export * from './_autogenerated/${icon}';`).join('\n');
}

function getComponentName(fileName: string) {
  return `${startCase(fileName.replace('.svg', '')).replace(/ /g, '')}Icon`;
}

export async function generateIconsGenerator(
  tree: Tree,
  options: GenerateIconsGeneratorSchema
) {
  const { regenerate } = options;
  const allIcons = fs.readdirSync(path.join(workspaceRoot, 'libs/component-library/src/lib/icons/sources'));
  const existingIcons = fs.readdirSync(path.join(workspaceRoot, 'libs/component-library/src/lib/icons/_autogenerated'));

  const existingIconsAsSet = new Set(existingIcons.map((icon) => icon.replace('.tsx', '')));



  const iconsToGenerate = regenerate ? allIcons : allIcons.filter((icon) => {
    const componentName = getComponentName(icon);
    return !existingIconsAsSet.has(componentName);
  });

  const generatedIcons: string[] = [];

  iconsToGenerate.forEach((fileName) => {
    const svgContent = tree.read(path.join('libs/component-library/src/lib/icons/sources', fileName))?.toString();

    if (!svgContent) {
      return;
    }

    const componentName = getComponentName(fileName);

    generatedIcons.push(componentName);

    const componentContent = generateComponentFiles(componentName, svgContent);

    tree.write(path.join('libs/component-library/src/lib/icons/_autogenerated', `${componentName}.tsx`), componentContent);
  })

  if (generatedIcons.length === 0) {
    console.log('No icons to generate');
    return;
  }

  const indexContent = generateIndexFile(generatedIcons);

  tree.write(path.join('libs/component-library/src/lib/icons/index.ts'), indexContent);

  await formatFiles(tree);
}

export default generateIconsGenerator;
