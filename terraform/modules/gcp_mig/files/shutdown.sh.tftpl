#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Start Logging ---
LOG_FILE="/var/tmp/shutdown-script-log-$(date +%s).log"
exec > >(tee -a "$LOG_FILE") 2>&1
echo "--- Shutdown script started at $(date) ---"
set -x
# --- End Logging ---

# --- Cleanup Function ---
cleanup() {
  echo "--- Running cleanup ---"
  rm -f /tmp/github-app-key.pem
  echo "--- Shutdown script finished at $(date) ---"
  set +x
}
trap cleanup EXIT
# --- End Cleanup Function ---

# Change to the runner directory
cd /home/ci-runner/actions-runner

# Function to generate fresh GitHub App token
generate_fresh_token() {
  echo "Generating fresh GitHub App token..."

  # Fetch GitHub App credentials from Secret Manager
  GITHUB_APP_ID=$(gcloud secrets versions access latest --secret=${env}_ci_gh-app-id)
  GITHUB_APP_KEY=$(gcloud secrets versions access latest --secret=${env}_ci_gh-app-private-key)

  # Write the key to a temporary file
  echo "$GITHUB_APP_KEY" > /tmp/github-app-key.pem

  # Generate a JWT token for GitHub App authentication
  JWT_TOKEN=$(python3 -c "
import time
import jwt

# Load private key from file
with open('/tmp/github-app-key.pem', 'r') as f:
    private_key = f.read()

# Create payload
payload = {
    'iat': int(time.time()),
    'exp': int(time.time()) + 600,
    'iss': '$GITHUB_APP_ID'
}

# Create JWT token
token = jwt.encode(payload, private_key, algorithm='RS256')
print(token)
")

  # Get installation ID
  INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/app/installations" | jq -r '.[0].id')

  # Get an installation token
  INSTALLATION_TOKEN=$(curl -s -X POST \
    -H "Authorization: Bearer $JWT_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" \
    | jq -r '.token')

  # Get a fresh removal token
  FRESH_REMOVE_TOKEN=$(curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $INSTALLATION_TOKEN" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/orgs/letta-ai/actions/runners/remove-token" | jq -r '.token')

  echo "$FRESH_REMOVE_TOKEN"
}

TOKEN_FILE="/home/ci-runner/actions-runner/remove_token.txt"
RUNNER_NAME_FILE="/home/ci-runner/actions-runner/runner_name.txt"

# Try to use saved token first
if [ -f "$TOKEN_FILE" ]; then
  REMOVE_TOKEN=$(cat "$TOKEN_FILE")
  echo "Found saved removal token, attempting to use it..."

  echo "Uninstalling service..."
  ./svc.sh uninstall || true

  echo "Removing runner configuration using pre-saved token..."
  if su ci-runner -c "./config.sh remove --token $REMOVE_TOKEN" 2>/dev/null; then
    echo "Successfully removed runner using saved token"
  else
    echo "Saved token failed (likely expired), generating fresh token..."
    FRESH_TOKEN=$(generate_fresh_token)
    if [ -n "$FRESH_TOKEN" ] && [ "$FRESH_TOKEN" != "null" ]; then
      echo "Attempting removal with fresh token..."
      su ci-runner -c "./config.sh remove --token $FRESH_TOKEN" || echo "Fresh token removal also failed"
    else
      echo "Failed to generate fresh token"
    fi
  fi

  rm -f "$TOKEN_FILE"
  rm -f "$RUNNER_NAME_FILE"
else
  echo "No removal token file found. Attempting to generate fresh token..."
  FRESH_TOKEN=$(generate_fresh_token)
  if [ -n "$FRESH_TOKEN" ] && [ "$FRESH_TOKEN" != "null" ]; then
    echo "Uninstalling service..."
    ./svc.sh uninstall || true
    echo "Removing runner configuration using fresh token..."
    su ci-runner -c "./config.sh remove --token $FRESH_TOKEN" || echo "Fresh token removal failed"
  else
    echo "Error: Could not generate removal token. Runner may remain registered."
  fi
fi

exit 0
