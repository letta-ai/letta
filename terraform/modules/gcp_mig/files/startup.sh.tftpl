#!/bin/bash

# Get instance details
INSTANCE_NAME=$(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/name" -H "Metadata-Flavor: Google")
ZONE=$(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | cut -d/ -f4)

# Fetch GitHub App credentials from Secret Manager
# TODO: use env vars or letta_secrets_helper
GITHUB_APP_ID=$(gcloud secrets versions access latest --secret=${env}_ci_gh-app-id)
GITHUB_APP_KEY=$(gcloud secrets versions access latest --secret=${env}_ci_gh-app-private-key)

# Write the key to a temporary file
echo "$GITHUB_APP_KEY" > /tmp/github-app-key.pem

# Generate a JWT token for GitHub App authentication
JWT_TOKEN=$(python3 -c "
import time
import jwt

# Load private key from file
with open('/tmp/github-app-key.pem', 'r') as f:
    private_key = f.read()

# Create payload
payload = {
    'iat': int(time.time()),
    'exp': int(time.time()) + 600,
    'iss': '$GITHUB_APP_ID'
}

# Create JWT token
token = jwt.encode(payload, private_key, algorithm='RS256')
print(token)
")

# Get installation ID
INSTALLATION_ID=$(curl -s -H "Authorization: Bearer $JWT_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  "https://api.github.com/app/installations" | jq -r '.[0].id')

# Get an installation token
INSTALLATION_TOKEN=$(curl -s -X POST \
  -H "Authorization: Bearer $JWT_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens" \
  | jq -r '.token')

echo "--- Generating and saving removal token for shutdown ---"
REMOVE_TOKEN=$(curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $INSTALLATION_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  "https://api.github.com/orgs/letta-ai/actions/runners/remove-token" | jq -r '.token')

if [ -n "$REMOVE_TOKEN" ] && [ "$REMOVE_TOKEN" != "null" ]; then
  # Save the token for the shutdown script to use
  echo "$REMOVE_TOKEN" > /home/ci-runner/actions-runner/remove_token.txt
  # Ensure the runner user can access it if needed
  chown ci-runner:ci-runner /home/ci-runner/actions-runner/remove_token.txt
  echo "Successfully saved runner removal token."
else
  echo "Warning: Failed to generate and save runner remove token."
fi

REG_TOKEN=$(curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $INSTALLATION_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  "https://api.github.com/orgs/letta-ai/actions/runners/registration-token" \
  | jq -r '.token')

# Remove the private key
rm /tmp/github-app-key.pem

# Use environment variables from instance metadata
RUNNER_LABELS="self-hosted,gcp,${runner_labels}"
ORG_NAME="${github_org}"

# Change to the runner directory
cd /home/ci-runner/actions-runner

UNIQUE_ID=$(uuidgen | cut -d'-' -f1)
RUNNER_NAME="gcp-$INSTANCE_NAME-$UNIQUE_ID"

if [ -n "$REMOVE_TOKEN" ] && [ "$REMOVE_TOKEN" != "null" ]; then
  # Save the token for the shutdown script to use
  echo "$REMOVE_TOKEN" > /home/ci-runner/actions-runner/remove_token.txt
  # Ensure the runner user can access it if needed
  chown ci-runner:ci-runner /home/ci-runner/actions-runner/remove_token.txt
  echo "Successfully saved runner removal token."
else
  echo "Warning: Failed to generate and save runner remove token."
fi

RUNNER_NAME_FILE="/home/ci-runner/actions-runner/runner_name.txt"

echo "$RUNNER_NAME" > "$RUNNER_NAME_FILE"

# Configure the runner with the token
sudo -u ci-runner ./config.sh --unattended \
  --url "https://github.com/$ORG_NAME" \
  --token "$REG_TOKEN" \
  --name "$RUNNER_NAME" \
  --labels "$RUNNER_LABELS"

# Install the runner service
sudo ./svc.sh install ci-runner

DD_API_KEY=$(letta_secrets_helper --service ci --env dev | grep DD_API_KEY | cut -d= -f2-)
DD_SITE="us5.datadoghq.com"
bash -c "DD_API_KEY=$DD_API_KEY DD_SITE=$DD_SITE $(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)"

# Verify installation
echo "Verifying Datadog Agent installation..."
sudo systemctl status datadog-agent --no-pager || true

# Enable the service to start on boot
echo "Enabling Datadog Agent service..."
sudo systemctl enable datadog-agent

# Start the service
echo "Starting Datadog Agent service..."
sudo systemctl start datadog-agent

# Optional: Create a basic configuration file
echo "Creating basic Datadog Agent configuration..."
sudo mkdir -p /etc/datadog-agent

# Create a basic config (this will extend the default config)
sudo tee /etc/datadog-agent/datadog.yaml > /dev/null <<EOF
# Basic Datadog configuration
api_key: $DD_API_KEY
site: $DD_SITE

# Enable logs collection
logs_enabled: true

# Enable process monitoring
process_config:
  enabled: "true"

# Enable network monitoring
network_config:
  enabled: true

# Tags for this host
tags:
  - env:${env}
  - service:ci
EOF

# Restart the agent to pick up the new configuration
echo "Restarting Datadog Agent to apply configuration..."
sudo systemctl restart datadog-agent

# inject last minute commands
${final_steps}

# Start the runner service
sudo ./svc.sh start
